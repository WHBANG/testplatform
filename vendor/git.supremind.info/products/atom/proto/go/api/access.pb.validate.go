// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: access.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _access_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AccessRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AccessRule) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetResource()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AccessRuleValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Operation

	switch m.Subject.(type) {

	case *AccessRule_User:
		// no validation rules for User

	case *AccessRule_Role:
		// no validation rules for Role

	}

	return nil
}

// AccessRuleValidationError is the validation error returned by
// AccessRule.Validate if the designated constraints aren't met.
type AccessRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessRuleValidationError) ErrorName() string { return "AccessRuleValidationError" }

// Error satisfies the builtin error interface
func (e AccessRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessRuleValidationError{}

// Validate checks the field values on GroupingRule with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GroupingRule) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		return GroupingRuleValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
	}

	switch m.Subject.(type) {

	case *GroupingRule_User:
		// no validation rules for User

	case *GroupingRule_SubRole:
		// no validation rules for SubRole

	}

	return nil
}

// GroupingRuleValidationError is the validation error returned by
// GroupingRule.Validate if the designated constraints aren't met.
type GroupingRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupingRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupingRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupingRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupingRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupingRuleValidationError) ErrorName() string { return "GroupingRuleValidationError" }

// Error satisfies the builtin error interface
func (e GroupingRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupingRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupingRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupingRuleValidationError{}

// Validate checks the field values on ListOptions with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AsRole

	// no validation rules for Op

	return nil
}

// ListOptionsValidationError is the validation error returned by
// ListOptions.Validate if the designated constraints aren't met.
type ListOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOptionsValidationError) ErrorName() string { return "ListOptionsValidationError" }

// Error satisfies the builtin error interface
func (e ListOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOptionsValidationError{}

// Validate checks the field values on GrantAccessReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GrantAccessReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetRule()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GrantAccessReqValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// GrantAccessReqValidationError is the validation error returned by
// GrantAccessReq.Validate if the designated constraints aren't met.
type GrantAccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantAccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantAccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantAccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantAccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantAccessReqValidationError) ErrorName() string { return "GrantAccessReqValidationError" }

// Error satisfies the builtin error interface
func (e GrantAccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantAccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantAccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantAccessReqValidationError{}

// Validate checks the field values on RevokeAccessReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RevokeAccessReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetRule()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RevokeAccessReqValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// RevokeAccessReqValidationError is the validation error returned by
// RevokeAccessReq.Validate if the designated constraints aren't met.
type RevokeAccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAccessReqValidationError) ErrorName() string { return "RevokeAccessReqValidationError" }

// Error satisfies the builtin error interface
func (e RevokeAccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAccessReqValidationError{}

// Validate checks the field values on RulesByResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RulesByResourceReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetResource()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RulesByResourceReqValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// RulesByResourceReqValidationError is the validation error returned by
// RulesByResourceReq.Validate if the designated constraints aren't met.
type RulesByResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RulesByResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RulesByResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RulesByResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RulesByResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RulesByResourceReqValidationError) ErrorName() string {
	return "RulesByResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e RulesByResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRulesByResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RulesByResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RulesByResourceReqValidationError{}

// Validate checks the field values on RulesByResourceRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RulesByResourceRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RulesByResourceResValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// RulesByResourceResValidationError is the validation error returned by
// RulesByResourceRes.Validate if the designated constraints aren't met.
type RulesByResourceResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RulesByResourceResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RulesByResourceResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RulesByResourceResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RulesByResourceResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RulesByResourceResValidationError) ErrorName() string {
	return "RulesByResourceResValidationError"
}

// Error satisfies the builtin error interface
func (e RulesByResourceResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRulesByResourceRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RulesByResourceResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RulesByResourceResValidationError{}

// Validate checks the field values on CheckAccessReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckAccessReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetResource()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CheckAccessReqValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Op

	return nil
}

// CheckAccessReqValidationError is the validation error returned by
// CheckAccessReq.Validate if the designated constraints aren't met.
type CheckAccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAccessReqValidationError) ErrorName() string { return "CheckAccessReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckAccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAccessReqValidationError{}

// Validate checks the field values on CheckAccessRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckAccessRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Shall

	return nil
}

// CheckAccessResValidationError is the validation error returned by
// CheckAccessRes.Validate if the designated constraints aren't met.
type CheckAccessResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAccessResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAccessResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAccessResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAccessResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAccessResValidationError) ErrorName() string { return "CheckAccessResValidationError" }

// Error satisfies the builtin error interface
func (e CheckAccessResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAccessRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAccessResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAccessResValidationError{}

// Validate checks the field values on AccessToResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccessToResourceReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetResource()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AccessToResourceReqValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// AccessToResourceReqValidationError is the validation error returned by
// AccessToResourceReq.Validate if the designated constraints aren't met.
type AccessToResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessToResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessToResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessToResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessToResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessToResourceReqValidationError) ErrorName() string {
	return "AccessToResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e AccessToResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessToResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessToResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessToResourceReqValidationError{}

// Validate checks the field values on ListUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUsersReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ByRole

	return nil
}

// ListUsersReqValidationError is the validation error returned by
// ListUsersReq.Validate if the designated constraints aren't met.
type ListUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersReqValidationError) ErrorName() string { return "ListUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersReqValidationError{}

// Validate checks the field values on ListUsersRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUsersRes) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListUsersResValidationError is the validation error returned by
// ListUsersRes.Validate if the designated constraints aren't met.
type ListUsersResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResValidationError) ErrorName() string { return "ListUsersResValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResValidationError{}

// Validate checks the field values on ListRolesReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRolesReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WithUsers

	return nil
}

// ListRolesReqValidationError is the validation error returned by
// ListRolesReq.Validate if the designated constraints aren't met.
type ListRolesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesReqValidationError) ErrorName() string { return "ListRolesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesReqValidationError{}

// Validate checks the field values on ListRolesRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRolesRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListRolesResValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListRolesResValidationError is the validation error returned by
// ListRolesRes.Validate if the designated constraints aren't met.
type ListRolesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResValidationError) ErrorName() string { return "ListRolesResValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Role) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on AssignRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AssignRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for grouping

	return nil
}

// AssignRoleReqValidationError is the validation error returned by
// AssignRoleReq.Validate if the designated constraints aren't met.
type AssignRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignRoleReqValidationError) ErrorName() string { return "AssignRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e AssignRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignRoleReqValidationError{}

// Validate checks the field values on DeassignRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeassignRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for grouping

	return nil
}

// DeassignRoleReqValidationError is the validation error returned by
// DeassignRoleReq.Validate if the designated constraints aren't met.
type DeassignRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeassignRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeassignRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeassignRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeassignRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeassignRoleReqValidationError) ErrorName() string { return "DeassignRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeassignRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeassignRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeassignRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeassignRoleReqValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Role

	return nil
}

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}
