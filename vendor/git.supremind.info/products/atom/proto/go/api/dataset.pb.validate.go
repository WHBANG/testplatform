// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dataset.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _dataset_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Dataset with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Dataset) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DatasetValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DatasetValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// DatasetValidationError is the validation error returned by Dataset.Validate
// if the designated constraints aren't met.
type DatasetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetValidationError) ErrorName() string { return "DatasetValidationError" }

// Error satisfies the builtin error interface
func (e DatasetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetValidationError{}

// Validate checks the field values on DatasetSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DatasetSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContentType

	return nil
}

// DatasetSpecValidationError is the validation error returned by
// DatasetSpec.Validate if the designated constraints aren't met.
type DatasetSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetSpecValidationError) ErrorName() string { return "DatasetSpecValidationError" }

// Error satisfies the builtin error interface
func (e DatasetSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasetSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetSpecValidationError{}

// Validate checks the field values on DatasetStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DatasetStatus) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return DatasetStatusValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// DatasetStatusValidationError is the validation error returned by
// DatasetStatus.Validate if the designated constraints aren't met.
type DatasetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetStatusValidationError) ErrorName() string { return "DatasetStatusValidationError" }

// Error satisfies the builtin error interface
func (e DatasetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetStatusValidationError{}

// Validate checks the field values on DatasetVersion with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DatasetVersion) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	// no validation rules for Parent

	{
		tmp := m.GetStatistics()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DatasetVersionValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for State

	for idx, item := range m.GetInvolvedVolumes() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return DatasetVersionValidationError{
						field:  fmt.Sprintf("InvolvedVolumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// DatasetVersionValidationError is the validation error returned by
// DatasetVersion.Validate if the designated constraints aren't met.
type DatasetVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetVersionValidationError) ErrorName() string { return "DatasetVersionValidationError" }

// Error satisfies the builtin error interface
func (e DatasetVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasetVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetVersionValidationError{}

// Validate checks the field values on DataStatistics with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DataStatistics) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilesIncluded

	// no validation rules for ItemsIncluded

	// no validation rules for SizeIncluded

	return nil
}

// DataStatisticsValidationError is the validation error returned by
// DataStatistics.Validate if the designated constraints aren't met.
type DataStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataStatisticsValidationError) ErrorName() string { return "DataStatisticsValidationError" }

// Error satisfies the builtin error interface
func (e DataStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataStatisticsValidationError{}

// Validate checks the field values on DatumMeta with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DatumMeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Volume

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		return DatumMetaValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ContentLength

	// no validation rules for Tags

	{
		tmp := m.GetVolumeRef()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DatumMetaValidationError{
					field:  "VolumeRef",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Uri

	return nil
}

// DatumMetaValidationError is the validation error returned by
// DatumMeta.Validate if the designated constraints aren't met.
type DatumMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatumMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatumMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatumMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatumMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatumMetaValidationError) ErrorName() string { return "DatumMetaValidationError" }

// Error satisfies the builtin error interface
func (e DatumMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatumMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatumMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatumMetaValidationError{}

// Validate checks the field values on DataItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if len(m.GetMetas()) < 1 {
		return DataItemValidationError{
			field:  "Metas",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetMetas() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return DataItemValidationError{
						field:  fmt.Sprintf("Metas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for key, val := range m.GetAnnotations() {
		_ = val

		// no validation rules for Annotations[key]

		{
			tmp := val

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return DataItemValidationError{
						field:  fmt.Sprintf("Annotations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// DataItemValidationError is the validation error returned by
// DataItem.Validate if the designated constraints aren't met.
type DataItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataItemValidationError) ErrorName() string { return "DataItemValidationError" }

// Error satisfies the builtin error interface
func (e DataItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataItemValidationError{}

// Validate checks the field values on Dataflow with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Dataflow) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVersion()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DataflowValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetParams()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DataflowValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetUploadVolume()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DataflowValidationError{
					field:  "UploadVolume",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for UploadPrefix

	return nil
}

// DataflowValidationError is the validation error returned by
// Dataflow.Validate if the designated constraints aren't met.
type DataflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataflowValidationError) ErrorName() string { return "DataflowValidationError" }

// Error satisfies the builtin error interface
func (e DataflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataflowValidationError{}

// Validate checks the field values on CreateDatasetReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateDatasetReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetDataset()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateDatasetReqValidationError{
					field:  "Dataset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateDatasetReqValidationError is the validation error returned by
// CreateDatasetReq.Validate if the designated constraints aren't met.
type CreateDatasetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDatasetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDatasetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDatasetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDatasetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDatasetReqValidationError) ErrorName() string { return "CreateDatasetReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateDatasetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDatasetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDatasetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDatasetReqValidationError{}

// Validate checks the field values on GetDatasetReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetDatasetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return GetDatasetReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		return GetDatasetReqValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetDatasetReqValidationError is the validation error returned by
// GetDatasetReq.Validate if the designated constraints aren't met.
type GetDatasetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDatasetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDatasetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDatasetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDatasetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDatasetReqValidationError) ErrorName() string { return "GetDatasetReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDatasetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDatasetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDatasetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDatasetReqValidationError{}

// Validate checks the field values on ListDatasetsReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListDatasetsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Creator

	// no validation rules for ContentType

	{
		tmp := m.GetOptions()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListDatasetsReqValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListDatasetsReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Op

	return nil
}

// ListDatasetsReqValidationError is the validation error returned by
// ListDatasetsReq.Validate if the designated constraints aren't met.
type ListDatasetsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDatasetsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDatasetsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDatasetsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDatasetsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDatasetsReqValidationError) ErrorName() string { return "ListDatasetsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListDatasetsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDatasetsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDatasetsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDatasetsReqValidationError{}

// Validate checks the field values on ListDatasetsRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListDatasetsRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDatasets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListDatasetsResValidationError{
						field:  fmt.Sprintf("Datasets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListDatasetsResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListDatasetsResValidationError is the validation error returned by
// ListDatasetsRes.Validate if the designated constraints aren't met.
type ListDatasetsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDatasetsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDatasetsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDatasetsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDatasetsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDatasetsResValidationError) ErrorName() string { return "ListDatasetsResValidationError" }

// Error satisfies the builtin error interface
func (e ListDatasetsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDatasetsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDatasetsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDatasetsResValidationError{}

// Validate checks the field values on RemoveDatasetReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveDatasetReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RemoveDatasetReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		return RemoveDatasetReqValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RemoveDatasetReqValidationError is the validation error returned by
// RemoveDatasetReq.Validate if the designated constraints aren't met.
type RemoveDatasetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDatasetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDatasetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDatasetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDatasetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDatasetReqValidationError) ErrorName() string { return "RemoveDatasetReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveDatasetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDatasetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDatasetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDatasetReqValidationError{}

// Validate checks the field values on DatasetVersionRef with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DatasetVersionRef) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetDataset()) < 1 {
		return DatasetVersionRefValidationError{
			field:  "Dataset",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		return DatasetVersionRefValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		return DatasetVersionRefValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DatasetVersionRefValidationError is the validation error returned by
// DatasetVersionRef.Validate if the designated constraints aren't met.
type DatasetVersionRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetVersionRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetVersionRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetVersionRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetVersionRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetVersionRefValidationError) ErrorName() string {
	return "DatasetVersionRefValidationError"
}

// Error satisfies the builtin error interface
func (e DatasetVersionRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasetVersionRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetVersionRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetVersionRefValidationError{}

// Validate checks the field values on DatasetVersionChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DatasetVersionChange) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for DatasetVersionRef

	if utf8.RuneCountInString(m.GetParent()) < 1 {
		return DatasetVersionChangeValidationError{
			field:  "Parent",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DatasetVersionChangeValidationError is the validation error returned by
// DatasetVersionChange.Validate if the designated constraints aren't met.
type DatasetVersionChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetVersionChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetVersionChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetVersionChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetVersionChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetVersionChangeValidationError) ErrorName() string {
	return "DatasetVersionChangeValidationError"
}

// Error satisfies the builtin error interface
func (e DatasetVersionChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatasetVersionChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetVersionChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetVersionChangeValidationError{}

// Validate checks the field values on ListDataItemsReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListDataItemsReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetDatasetVersion()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListDataItemsReqValidationError{
					field:  "DatasetVersion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListDataItemsReqValidationError is the validation error returned by
// ListDataItemsReq.Validate if the designated constraints aren't met.
type ListDataItemsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataItemsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataItemsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataItemsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataItemsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataItemsReqValidationError) ErrorName() string { return "ListDataItemsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListDataItemsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataItemsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataItemsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataItemsReqValidationError{}

// Validate checks the field values on AppendDataItemReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AppendDataItemReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVersion()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AppendDataItemReqValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetDatum()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AppendDataItemReqValidationError{
					field:  "Datum",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// AppendDataItemReqValidationError is the validation error returned by
// AppendDataItemReq.Validate if the designated constraints aren't met.
type AppendDataItemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppendDataItemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppendDataItemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppendDataItemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppendDataItemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppendDataItemReqValidationError) ErrorName() string {
	return "AppendDataItemReqValidationError"
}

// Error satisfies the builtin error interface
func (e AppendDataItemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppendDataItemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppendDataItemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppendDataItemReqValidationError{}

// Validate checks the field values on AppendDataItemsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AppendDataItemsRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumAppended

	{
		tmp := m.GetLatest()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AppendDataItemsResValidationError{
					field:  "Latest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// AppendDataItemsResValidationError is the validation error returned by
// AppendDataItemsRes.Validate if the designated constraints aren't met.
type AppendDataItemsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppendDataItemsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppendDataItemsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppendDataItemsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppendDataItemsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppendDataItemsResValidationError) ErrorName() string {
	return "AppendDataItemsResValidationError"
}

// Error satisfies the builtin error interface
func (e AppendDataItemsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppendDataItemsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppendDataItemsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppendDataItemsResValidationError{}

// Validate checks the field values on CreateDatasetVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDatasetVersionReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVersion()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateDatasetVersionReqValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for CloneParent

	return nil
}

// CreateDatasetVersionReqValidationError is the validation error returned by
// CreateDatasetVersionReq.Validate if the designated constraints aren't met.
type CreateDatasetVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDatasetVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDatasetVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDatasetVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDatasetVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDatasetVersionReqValidationError) ErrorName() string {
	return "CreateDatasetVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDatasetVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDatasetVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDatasetVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDatasetVersionReqValidationError{}

// Validate checks the field values on PushToDatasetVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PushToDatasetVersionReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVersion()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return PushToDatasetVersionReqValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetDataItems() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return PushToDatasetVersionReqValidationError{
						field:  fmt.Sprintf("DataItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// PushToDatasetVersionReqValidationError is the validation error returned by
// PushToDatasetVersionReq.Validate if the designated constraints aren't met.
type PushToDatasetVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushToDatasetVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushToDatasetVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushToDatasetVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushToDatasetVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushToDatasetVersionReqValidationError) ErrorName() string {
	return "PushToDatasetVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e PushToDatasetVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushToDatasetVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushToDatasetVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushToDatasetVersionReqValidationError{}

// Validate checks the field values on FinalizeDatasetVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FinalizeDatasetVersionReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVersion()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return FinalizeDatasetVersionReqValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// FinalizeDatasetVersionReqValidationError is the validation error returned by
// FinalizeDatasetVersionReq.Validate if the designated constraints aren't met.
type FinalizeDatasetVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinalizeDatasetVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinalizeDatasetVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinalizeDatasetVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinalizeDatasetVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinalizeDatasetVersionReqValidationError) ErrorName() string {
	return "FinalizeDatasetVersionReqValidationError"
}

// Error satisfies the builtin error interface
func (e FinalizeDatasetVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinalizeDatasetVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinalizeDatasetVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinalizeDatasetVersionReqValidationError{}

// Validate checks the field values on SearchDataItemsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchDataItemsReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetFilter()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SearchDataItemsReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// SearchDataItemsReqValidationError is the validation error returned by
// SearchDataItemsReq.Validate if the designated constraints aren't met.
type SearchDataItemsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDataItemsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDataItemsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDataItemsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDataItemsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDataItemsReqValidationError) ErrorName() string {
	return "SearchDataItemsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDataItemsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDataItemsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDataItemsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDataItemsReqValidationError{}

// Validate checks the field values on DataItemFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DataItemFilter) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInDatasets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return DataItemFilterValidationError{
						field:  fmt.Sprintf("InDatasets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for ByTags

	{
		tmp := m.GetCreatedAfter()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DataItemFilterValidationError{
					field:  "CreatedAfter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetCreatedBefore()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DataItemFilterValidationError{
					field:  "CreatedBefore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// DataItemFilterValidationError is the validation error returned by
// DataItemFilter.Validate if the designated constraints aren't met.
type DataItemFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataItemFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataItemFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataItemFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataItemFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataItemFilterValidationError) ErrorName() string { return "DataItemFilterValidationError" }

// Error satisfies the builtin error interface
func (e DataItemFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataItemFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataItemFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataItemFilterValidationError{}

// Validate checks the field values on Dataflow_Params with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Dataflow_Params) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetFiltering()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_ParamsValidationError{
					field:  "Filtering",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetDeduplication()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_ParamsValidationError{
					field:  "Deduplication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetFormatting()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_ParamsValidationError{
					field:  "Formatting",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Dataflow_ParamsValidationError is the validation error returned by
// Dataflow_Params.Validate if the designated constraints aren't met.
type Dataflow_ParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dataflow_ParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dataflow_ParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dataflow_ParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dataflow_ParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dataflow_ParamsValidationError) ErrorName() string { return "Dataflow_ParamsValidationError" }

// Error satisfies the builtin error interface
func (e Dataflow_ParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataflow_Params.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dataflow_ParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dataflow_ParamsValidationError{}

// Validate checks the field values on Dataflow_Filtering with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Dataflow_Filtering) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetResolution()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_FilteringValidationError{
					field:  "Resolution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetDuration()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_FilteringValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetFileSize()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_FilteringValidationError{
					field:  "FileSize",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Dataflow_FilteringValidationError is the validation error returned by
// Dataflow_Filtering.Validate if the designated constraints aren't met.
type Dataflow_FilteringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dataflow_FilteringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dataflow_FilteringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dataflow_FilteringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dataflow_FilteringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dataflow_FilteringValidationError) ErrorName() string {
	return "Dataflow_FilteringValidationError"
}

// Error satisfies the builtin error interface
func (e Dataflow_FilteringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataflow_Filtering.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dataflow_FilteringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dataflow_FilteringValidationError{}

// Validate checks the field values on Dataflow_Resolution with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Dataflow_Resolution) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetWidth()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_ResolutionValidationError{
					field:  "Width",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetHeight()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Dataflow_ResolutionValidationError{
					field:  "Height",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Dataflow_ResolutionValidationError is the validation error returned by
// Dataflow_Resolution.Validate if the designated constraints aren't met.
type Dataflow_ResolutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dataflow_ResolutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dataflow_ResolutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dataflow_ResolutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dataflow_ResolutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dataflow_ResolutionValidationError) ErrorName() string {
	return "Dataflow_ResolutionValidationError"
}

// Error satisfies the builtin error interface
func (e Dataflow_ResolutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataflow_Resolution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dataflow_ResolutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dataflow_ResolutionValidationError{}

// Validate checks the field values on Dataflow_Range with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Dataflow_Range) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Max

	// no validation rules for Min

	return nil
}

// Dataflow_RangeValidationError is the validation error returned by
// Dataflow_Range.Validate if the designated constraints aren't met.
type Dataflow_RangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dataflow_RangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dataflow_RangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dataflow_RangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dataflow_RangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dataflow_RangeValidationError) ErrorName() string { return "Dataflow_RangeValidationError" }

// Error satisfies the builtin error interface
func (e Dataflow_RangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataflow_Range.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dataflow_RangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dataflow_RangeValidationError{}

// Validate checks the field values on Dataflow_Deduplication with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Dataflow_Deduplication) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Method

	return nil
}

// Dataflow_DeduplicationValidationError is the validation error returned by
// Dataflow_Deduplication.Validate if the designated constraints aren't met.
type Dataflow_DeduplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dataflow_DeduplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dataflow_DeduplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dataflow_DeduplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dataflow_DeduplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dataflow_DeduplicationValidationError) ErrorName() string {
	return "Dataflow_DeduplicationValidationError"
}

// Error satisfies the builtin error interface
func (e Dataflow_DeduplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataflow_Deduplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dataflow_DeduplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dataflow_DeduplicationValidationError{}

// Validate checks the field values on Dataflow_Formatting with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Dataflow_Formatting) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Dataflow_FormattingValidationError is the validation error returned by
// Dataflow_Formatting.Validate if the designated constraints aren't met.
type Dataflow_FormattingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dataflow_FormattingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dataflow_FormattingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dataflow_FormattingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dataflow_FormattingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dataflow_FormattingValidationError) ErrorName() string {
	return "Dataflow_FormattingValidationError"
}

// Error satisfies the builtin error interface
func (e Dataflow_FormattingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataflow_Formatting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dataflow_FormattingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dataflow_FormattingValidationError{}
