// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceClass int32

const (
	Unset        DeviceClass = 0
	LowendGPU    DeviceClass = 1
	HighendGPU   DeviceClass = 2
	InferringGPU DeviceClass = 3
)

var DeviceClass_name = map[int32]string{
	0: "Unset",
	1: "LowendGPU",
	2: "HighendGPU",
	3: "InferringGPU",
}

var DeviceClass_value = map[string]int32{
	"Unset":        0,
	"LowendGPU":    1,
	"HighendGPU":   2,
	"InferringGPU": 3,
}

func (x DeviceClass) String() string {
	return proto.EnumName(DeviceClass_name, int32(x))
}

func (DeviceClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}

type DeviceKind int32

const (
	DeviceGPU DeviceKind = 0
)

var DeviceKind_name = map[int32]string{
	0: "DeviceGPU",
}

var DeviceKind_value = map[string]int32{
	"DeviceGPU": 0,
}

func (x DeviceKind) String() string {
	return proto.EnumName(DeviceKind_name, int32(x))
}

func (DeviceKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}

type DeviceCategory struct {
	*Metadata `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta,omitempty" bson:",inline"`
	Spec      *DeviceCategorySpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty" bson:"spec"`
	Status    *DeviceCategoryStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"`
}

func (m *DeviceCategory) Reset()         { *m = DeviceCategory{} }
func (m *DeviceCategory) String() string { return proto.CompactTextString(m) }
func (*DeviceCategory) ProtoMessage()    {}
func (*DeviceCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}
func (m *DeviceCategory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCategory.Unmarshal(m, b)
}
func (m *DeviceCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCategory.Marshal(b, m, deterministic)
}
func (m *DeviceCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCategory.Merge(m, src)
}
func (m *DeviceCategory) XXX_Size() int {
	return xxx_messageInfo_DeviceCategory.Size(m)
}
func (m *DeviceCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCategory.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCategory proto.InternalMessageInfo

func (m *DeviceCategory) GetSpec() *DeviceCategorySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DeviceCategory) GetStatus() *DeviceCategoryStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DeviceCategorySpec struct {
	Kind        DeviceKind  `protobuf:"varint,1,opt,name=kind,proto3,enum=apiserver.v2.DeviceKind" json:"kind,omitempty"`
	Class       DeviceClass `protobuf:"varint,2,opt,name=class,proto3,enum=apiserver.v2.DeviceClass" json:"class,omitempty"`
	SpecVersion SpecVersion `protobuf:"varint,3,opt,name=specVersion,proto3,enum=apiserver.v2.SpecVersion" json:"specVersion,omitempty" bson:"specVersion,omitempty"`
}

func (m *DeviceCategorySpec) Reset()         { *m = DeviceCategorySpec{} }
func (m *DeviceCategorySpec) String() string { return proto.CompactTextString(m) }
func (*DeviceCategorySpec) ProtoMessage()    {}
func (*DeviceCategorySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}
func (m *DeviceCategorySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCategorySpec.Unmarshal(m, b)
}
func (m *DeviceCategorySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCategorySpec.Marshal(b, m, deterministic)
}
func (m *DeviceCategorySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCategorySpec.Merge(m, src)
}
func (m *DeviceCategorySpec) XXX_Size() int {
	return xxx_messageInfo_DeviceCategorySpec.Size(m)
}
func (m *DeviceCategorySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCategorySpec.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCategorySpec proto.InternalMessageInfo

func (m *DeviceCategorySpec) GetKind() DeviceKind {
	if m != nil {
		return m.Kind
	}
	return DeviceGPU
}

func (m *DeviceCategorySpec) GetClass() DeviceClass {
	if m != nil {
		return m.Class
	}
	return Unset
}

func (m *DeviceCategorySpec) GetSpecVersion() SpecVersion {
	if m != nil {
		return m.SpecVersion
	}
	return SpecVersionUnset
}

type DeviceCategoryStatus struct {
}

func (m *DeviceCategoryStatus) Reset()         { *m = DeviceCategoryStatus{} }
func (m *DeviceCategoryStatus) String() string { return proto.CompactTextString(m) }
func (*DeviceCategoryStatus) ProtoMessage()    {}
func (*DeviceCategoryStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{2}
}
func (m *DeviceCategoryStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCategoryStatus.Unmarshal(m, b)
}
func (m *DeviceCategoryStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCategoryStatus.Marshal(b, m, deterministic)
}
func (m *DeviceCategoryStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCategoryStatus.Merge(m, src)
}
func (m *DeviceCategoryStatus) XXX_Size() int {
	return xxx_messageInfo_DeviceCategoryStatus.Size(m)
}
func (m *DeviceCategoryStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCategoryStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCategoryStatus proto.InternalMessageInfo

type ListDeviceCategoryKindsReq struct {
}

func (m *ListDeviceCategoryKindsReq) Reset()         { *m = ListDeviceCategoryKindsReq{} }
func (m *ListDeviceCategoryKindsReq) String() string { return proto.CompactTextString(m) }
func (*ListDeviceCategoryKindsReq) ProtoMessage()    {}
func (*ListDeviceCategoryKindsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{3}
}
func (m *ListDeviceCategoryKindsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceCategoryKindsReq.Unmarshal(m, b)
}
func (m *ListDeviceCategoryKindsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceCategoryKindsReq.Marshal(b, m, deterministic)
}
func (m *ListDeviceCategoryKindsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceCategoryKindsReq.Merge(m, src)
}
func (m *ListDeviceCategoryKindsReq) XXX_Size() int {
	return xxx_messageInfo_ListDeviceCategoryKindsReq.Size(m)
}
func (m *ListDeviceCategoryKindsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceCategoryKindsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceCategoryKindsReq proto.InternalMessageInfo

type ListDeviceCategoryKindsRes struct {
	Kinds []DeviceKind `protobuf:"varint,1,rep,packed,name=kinds,proto3,enum=apiserver.v2.DeviceKind" json:"kinds,omitempty"`
}

func (m *ListDeviceCategoryKindsRes) Reset()         { *m = ListDeviceCategoryKindsRes{} }
func (m *ListDeviceCategoryKindsRes) String() string { return proto.CompactTextString(m) }
func (*ListDeviceCategoryKindsRes) ProtoMessage()    {}
func (*ListDeviceCategoryKindsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{4}
}
func (m *ListDeviceCategoryKindsRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceCategoryKindsRes.Unmarshal(m, b)
}
func (m *ListDeviceCategoryKindsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceCategoryKindsRes.Marshal(b, m, deterministic)
}
func (m *ListDeviceCategoryKindsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceCategoryKindsRes.Merge(m, src)
}
func (m *ListDeviceCategoryKindsRes) XXX_Size() int {
	return xxx_messageInfo_ListDeviceCategoryKindsRes.Size(m)
}
func (m *ListDeviceCategoryKindsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceCategoryKindsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceCategoryKindsRes proto.InternalMessageInfo

func (m *ListDeviceCategoryKindsRes) GetKinds() []DeviceKind {
	if m != nil {
		return m.Kinds
	}
	return nil
}

type ListDeviceCategoriesReq struct {
	Kind  DeviceKind  `protobuf:"varint,1,opt,name=kind,proto3,enum=apiserver.v2.DeviceKind" json:"kind,omitempty"`
	Class DeviceClass `protobuf:"varint,2,opt,name=class,proto3,enum=apiserver.v2.DeviceClass" json:"class,omitempty"`
	Pager *PagerReq   `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListDeviceCategoriesReq) Reset()         { *m = ListDeviceCategoriesReq{} }
func (m *ListDeviceCategoriesReq) String() string { return proto.CompactTextString(m) }
func (*ListDeviceCategoriesReq) ProtoMessage()    {}
func (*ListDeviceCategoriesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{5}
}
func (m *ListDeviceCategoriesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceCategoriesReq.Unmarshal(m, b)
}
func (m *ListDeviceCategoriesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceCategoriesReq.Marshal(b, m, deterministic)
}
func (m *ListDeviceCategoriesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceCategoriesReq.Merge(m, src)
}
func (m *ListDeviceCategoriesReq) XXX_Size() int {
	return xxx_messageInfo_ListDeviceCategoriesReq.Size(m)
}
func (m *ListDeviceCategoriesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceCategoriesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceCategoriesReq proto.InternalMessageInfo

func (m *ListDeviceCategoriesReq) GetKind() DeviceKind {
	if m != nil {
		return m.Kind
	}
	return DeviceGPU
}

func (m *ListDeviceCategoriesReq) GetClass() DeviceClass {
	if m != nil {
		return m.Class
	}
	return Unset
}

func (m *ListDeviceCategoriesReq) GetPager() *PagerReq {
	if m != nil {
		return m.Pager
	}
	return nil
}

type ListDeviceCategoriesRes struct {
	DeviceCategories []*DeviceCategory `protobuf:"bytes,1,rep,name=deviceCategories,proto3" json:"deviceCategories,omitempty"`
	Pager            *PagerRes         `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListDeviceCategoriesRes) Reset()         { *m = ListDeviceCategoriesRes{} }
func (m *ListDeviceCategoriesRes) String() string { return proto.CompactTextString(m) }
func (*ListDeviceCategoriesRes) ProtoMessage()    {}
func (*ListDeviceCategoriesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{6}
}
func (m *ListDeviceCategoriesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceCategoriesRes.Unmarshal(m, b)
}
func (m *ListDeviceCategoriesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceCategoriesRes.Marshal(b, m, deterministic)
}
func (m *ListDeviceCategoriesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceCategoriesRes.Merge(m, src)
}
func (m *ListDeviceCategoriesRes) XXX_Size() int {
	return xxx_messageInfo_ListDeviceCategoriesRes.Size(m)
}
func (m *ListDeviceCategoriesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceCategoriesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceCategoriesRes proto.InternalMessageInfo

func (m *ListDeviceCategoriesRes) GetDeviceCategories() []*DeviceCategory {
	if m != nil {
		return m.DeviceCategories
	}
	return nil
}

func (m *ListDeviceCategoriesRes) GetPager() *PagerRes {
	if m != nil {
		return m.Pager
	}
	return nil
}

type GetDeviceCategoryReq struct {
	Kind DeviceKind `protobuf:"varint,1,opt,name=kind,proto3,enum=apiserver.v2.DeviceKind" json:"kind,omitempty"`
	Name string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetDeviceCategoryReq) Reset()         { *m = GetDeviceCategoryReq{} }
func (m *GetDeviceCategoryReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceCategoryReq) ProtoMessage()    {}
func (*GetDeviceCategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{7}
}
func (m *GetDeviceCategoryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceCategoryReq.Unmarshal(m, b)
}
func (m *GetDeviceCategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceCategoryReq.Marshal(b, m, deterministic)
}
func (m *GetDeviceCategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceCategoryReq.Merge(m, src)
}
func (m *GetDeviceCategoryReq) XXX_Size() int {
	return xxx_messageInfo_GetDeviceCategoryReq.Size(m)
}
func (m *GetDeviceCategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceCategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceCategoryReq proto.InternalMessageInfo

func (m *GetDeviceCategoryReq) GetKind() DeviceKind {
	if m != nil {
		return m.Kind
	}
	return DeviceGPU
}

func (m *GetDeviceCategoryReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateDeviceCategoryReq struct {
	DeviceCategory *DeviceCategory `protobuf:"bytes,1,opt,name=deviceCategory,proto3" json:"deviceCategory,omitempty"`
}

func (m *CreateDeviceCategoryReq) Reset()         { *m = CreateDeviceCategoryReq{} }
func (m *CreateDeviceCategoryReq) String() string { return proto.CompactTextString(m) }
func (*CreateDeviceCategoryReq) ProtoMessage()    {}
func (*CreateDeviceCategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{8}
}
func (m *CreateDeviceCategoryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDeviceCategoryReq.Unmarshal(m, b)
}
func (m *CreateDeviceCategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDeviceCategoryReq.Marshal(b, m, deterministic)
}
func (m *CreateDeviceCategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeviceCategoryReq.Merge(m, src)
}
func (m *CreateDeviceCategoryReq) XXX_Size() int {
	return xxx_messageInfo_CreateDeviceCategoryReq.Size(m)
}
func (m *CreateDeviceCategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeviceCategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeviceCategoryReq proto.InternalMessageInfo

func (m *CreateDeviceCategoryReq) GetDeviceCategory() *DeviceCategory {
	if m != nil {
		return m.DeviceCategory
	}
	return nil
}

type UpdateDeviceCategoryReq struct {
	DeviceCategory *DeviceCategory `protobuf:"bytes,1,opt,name=deviceCategory,proto3" json:"deviceCategory,omitempty"`
}

func (m *UpdateDeviceCategoryReq) Reset()         { *m = UpdateDeviceCategoryReq{} }
func (m *UpdateDeviceCategoryReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceCategoryReq) ProtoMessage()    {}
func (*UpdateDeviceCategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{9}
}
func (m *UpdateDeviceCategoryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDeviceCategoryReq.Unmarshal(m, b)
}
func (m *UpdateDeviceCategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDeviceCategoryReq.Marshal(b, m, deterministic)
}
func (m *UpdateDeviceCategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceCategoryReq.Merge(m, src)
}
func (m *UpdateDeviceCategoryReq) XXX_Size() int {
	return xxx_messageInfo_UpdateDeviceCategoryReq.Size(m)
}
func (m *UpdateDeviceCategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceCategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceCategoryReq proto.InternalMessageInfo

func (m *UpdateDeviceCategoryReq) GetDeviceCategory() *DeviceCategory {
	if m != nil {
		return m.DeviceCategory
	}
	return nil
}

type RemoveDeviceCategoryReq struct {
	Kind DeviceKind `protobuf:"varint,1,opt,name=kind,proto3,enum=apiserver.v2.DeviceKind" json:"kind,omitempty"`
	Name string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveDeviceCategoryReq) Reset()         { *m = RemoveDeviceCategoryReq{} }
func (m *RemoveDeviceCategoryReq) String() string { return proto.CompactTextString(m) }
func (*RemoveDeviceCategoryReq) ProtoMessage()    {}
func (*RemoveDeviceCategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10}
}
func (m *RemoveDeviceCategoryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveDeviceCategoryReq.Unmarshal(m, b)
}
func (m *RemoveDeviceCategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveDeviceCategoryReq.Marshal(b, m, deterministic)
}
func (m *RemoveDeviceCategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDeviceCategoryReq.Merge(m, src)
}
func (m *RemoveDeviceCategoryReq) XXX_Size() int {
	return xxx_messageInfo_RemoveDeviceCategoryReq.Size(m)
}
func (m *RemoveDeviceCategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDeviceCategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDeviceCategoryReq proto.InternalMessageInfo

func (m *RemoveDeviceCategoryReq) GetKind() DeviceKind {
	if m != nil {
		return m.Kind
	}
	return DeviceGPU
}

func (m *RemoveDeviceCategoryReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("apiserver.v2.DeviceClass", DeviceClass_name, DeviceClass_value)
	proto.RegisterEnum("apiserver.v2.DeviceKind", DeviceKind_name, DeviceKind_value)
	proto.RegisterType((*DeviceCategory)(nil), "apiserver.v2.DeviceCategory")
	proto.RegisterType((*DeviceCategorySpec)(nil), "apiserver.v2.DeviceCategorySpec")
	proto.RegisterType((*DeviceCategoryStatus)(nil), "apiserver.v2.DeviceCategoryStatus")
	proto.RegisterType((*ListDeviceCategoryKindsReq)(nil), "apiserver.v2.ListDeviceCategoryKindsReq")
	proto.RegisterType((*ListDeviceCategoryKindsRes)(nil), "apiserver.v2.ListDeviceCategoryKindsRes")
	proto.RegisterType((*ListDeviceCategoriesReq)(nil), "apiserver.v2.ListDeviceCategoriesReq")
	proto.RegisterType((*ListDeviceCategoriesRes)(nil), "apiserver.v2.ListDeviceCategoriesRes")
	proto.RegisterType((*GetDeviceCategoryReq)(nil), "apiserver.v2.GetDeviceCategoryReq")
	proto.RegisterType((*CreateDeviceCategoryReq)(nil), "apiserver.v2.CreateDeviceCategoryReq")
	proto.RegisterType((*UpdateDeviceCategoryReq)(nil), "apiserver.v2.UpdateDeviceCategoryReq")
	proto.RegisterType((*RemoveDeviceCategoryReq)(nil), "apiserver.v2.RemoveDeviceCategoryReq")
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5) }

var fileDescriptor_870276a56ac00da5 = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0x8f, 0x43, 0x82, 0x96, 0x17, 0x36, 0x9b, 0x1d, 0x65, 0x49, 0x36, 0xa0, 0x04, 0x59, 0x5a,
	0x09, 0xa1, 0xe0, 0x48, 0xd9, 0xdb, 0xde, 0x36, 0x80, 0x80, 0x5d, 0x56, 0x42, 0x46, 0xd9, 0x56,
	0xe5, 0x50, 0x39, 0xf1, 0xc3, 0x8c, 0x1a, 0x7b, 0x8c, 0x67, 0x92, 0x36, 0xd7, 0x1e, 0x7b, 0x6a,
	0xbf, 0x44, 0xd5, 0x8f, 0xc3, 0xa1, 0x87, 0xaa, 0x87, 0x48, 0x2d, 0xdf, 0x80, 0x23, 0xea, 0xa1,
	0x9a, 0xb1, 0x51, 0x12, 0xc7, 0x09, 0xf4, 0xc0, 0x6d, 0xde, 0xbc, 0xdf, 0xfb, 0xbd, 0x3f, 0xfe,
	0x8d, 0x67, 0x60, 0xd5, 0xc6, 0x01, 0xed, 0xa2, 0xe1, 0x07, 0x4c, 0x30, 0xb2, 0x6a, 0xf9, 0x94,
	0x63, 0x30, 0xc0, 0xc0, 0x18, 0x34, 0x2b, 0x3b, 0x0e, 0x15, 0x17, 0xfd, 0x8e, 0xd1, 0x65, 0x6e,
	0xc3, 0x61, 0x0e, 0x6b, 0x28, 0x50, 0xa7, 0x7f, 0xae, 0x2c, 0x65, 0xa8, 0x55, 0x18, 0x5c, 0xf9,
	0x7b, 0x02, 0x8e, 0xde, 0x80, 0x0d, 0xfd, 0x80, 0xbd, 0x1a, 0x86, 0x41, 0xdd, 0x1d, 0x07, 0xbd,
	0x9d, 0x81, 0xd5, 0xa3, 0xb6, 0x25, 0xb0, 0x31, 0xb3, 0x88, 0x28, 0xd6, 0x1d, 0xc6, 0x9c, 0x1e,
	0x8e, 0x13, 0xa1, 0xeb, 0x8b, 0x61, 0xe4, 0x04, 0x17, 0x85, 0x15, 0xae, 0xf5, 0x6f, 0x1a, 0xe4,
	0xf7, 0x54, 0xe5, 0xbb, 0x96, 0x40, 0x87, 0x05, 0x43, 0xf2, 0x0f, 0x64, 0x24, 0xa0, 0xac, 0x6d,
	0x6a, 0x5b, 0xb9, 0xe6, 0x9a, 0x31, 0xd9, 0x8a, 0xf1, 0x1f, 0x0a, 0xcb, 0xb6, 0x84, 0xd5, 0xaa,
	0xde, 0xb6, 0xb2, 0x6f, 0xb4, 0xf4, 0x4f, 0xda, 0xd5, 0xa8, 0xa6, 0xdd, 0x8c, 0x6a, 0xf9, 0x0e,
	0x67, 0xde, 0x5f, 0x7a, 0x9d, 0x7a, 0x3d, 0xea, 0xa1, 0x6e, 0x2a, 0x0e, 0xb2, 0x0f, 0x19, 0xee,
	0x63, 0xb7, 0x9c, 0x56, 0x5c, 0x9b, 0xd3, 0x5c, 0xd3, 0x79, 0x4f, 0x7d, 0xec, 0xb6, 0x7e, 0xb9,
	0x19, 0xd5, 0x72, 0x21, 0x93, 0x8c, 0xd3, 0x4d, 0x15, 0x4e, 0x9e, 0xc0, 0x32, 0x17, 0x96, 0xe8,
	0xf3, 0xf2, 0x92, 0x22, 0xd2, 0x17, 0x12, 0x29, 0x64, 0x6b, 0xfd, 0x66, 0x54, 0x2b, 0x45, 0x54,
	0x6a, 0xa7, 0xce, 0x5c, 0x2a, 0xd4, 0x1c, 0x74, 0x33, 0xa2, 0xd3, 0x3f, 0x6b, 0x40, 0x66, 0xcb,
	0x20, 0x75, 0xc8, 0xbc, 0xa0, 0x9e, 0xad, 0x46, 0x90, 0x6f, 0x96, 0x93, 0xb2, 0xfd, 0x4b, 0x3d,
	0xdb, 0x54, 0x28, 0xd2, 0x80, 0x6c, 0xb7, 0x67, 0x71, 0xae, 0xba, 0xcc, 0x37, 0x7f, 0x4f, 0x2c,
	0x4e, 0x02, 0xcc, 0x10, 0x47, 0x10, 0x72, 0xb2, 0xad, 0xff, 0x31, 0xe0, 0x94, 0x79, 0xaa, 0xa7,
	0x99, 0xb0, 0xd3, 0x31, 0xa0, 0xb5, 0x75, 0xdb, 0xca, 0xbe, 0xd6, 0xd2, 0x05, 0x39, 0xe7, 0x8d,
	0xf1, 0x74, 0x22, 0xf7, 0x64, 0x5f, 0x93, 0xbc, 0xfa, 0x1a, 0x14, 0x93, 0x26, 0xa3, 0x6f, 0x40,
	0xe5, 0x98, 0x72, 0x31, 0xed, 0x93, 0xfd, 0x70, 0x13, 0x2f, 0xf5, 0xe3, 0x05, 0x5e, 0x4e, 0x0c,
	0xc8, 0xca, 0x9e, 0x79, 0x59, 0xdb, 0x5c, 0x5a, 0x38, 0x9a, 0x10, 0xa6, 0xbf, 0xd7, 0xa0, 0x34,
	0x43, 0x47, 0x51, 0x66, 0x7a, 0xec, 0x29, 0xd7, 0x21, 0xeb, 0x5b, 0x0e, 0x06, 0x91, 0x66, 0x62,
	0x42, 0x3e, 0x91, 0x2e, 0x13, 0x2f, 0xcd, 0x10, 0xa4, 0xbf, 0x9b, 0x5b, 0x28, 0x27, 0x87, 0x50,
	0xb0, 0x63, 0xdb, 0xaa, 0xff, 0x5c, 0x73, 0x63, 0x91, 0x10, 0xcd, 0x99, 0xa8, 0x71, 0x4d, 0xe9,
	0x05, 0x35, 0xf1, 0xbb, 0x9a, 0x9e, 0x42, 0xf1, 0x00, 0x63, 0x5f, 0xe2, 0xc7, 0x07, 0x47, 0x20,
	0xe3, 0x59, 0x2e, 0xaa, 0x94, 0x2b, 0xa6, 0x5a, 0xeb, 0xcf, 0xa1, 0xb4, 0x1b, 0xa0, 0x25, 0x70,
	0x96, 0x7c, 0x0f, 0xf2, 0x53, 0x65, 0x0f, 0xa3, 0x1f, 0xc1, 0xe2, 0x56, 0x63, 0x31, 0x32, 0x41,
	0xdb, 0xb7, 0x1f, 0x31, 0xc1, 0x19, 0x94, 0x4c, 0x74, 0xd9, 0x00, 0x1f, 0x61, 0x3c, 0xdb, 0x47,
	0x90, 0x9b, 0x10, 0x14, 0x59, 0x81, 0x6c, 0xdb, 0xe3, 0x28, 0x0a, 0x29, 0xf2, 0x33, 0xac, 0x1c,
	0xb3, 0x97, 0xe8, 0xd9, 0x07, 0x27, 0xed, 0x82, 0x46, 0xf2, 0x00, 0x87, 0xd4, 0xb9, 0x88, 0xec,
	0x34, 0x29, 0xc0, 0xea, 0x91, 0x77, 0x8e, 0x41, 0x40, 0x3d, 0x47, 0xee, 0x2c, 0x6d, 0xaf, 0x03,
	0x8c, 0x53, 0xca, 0xf0, 0xd0, 0x92, 0xce, 0x54, 0xf3, 0x63, 0x06, 0x7e, 0x8b, 0x1d, 0x51, 0x0c,
	0xa4, 0x49, 0xdc, 0x04, 0x35, 0x86, 0xa7, 0x90, 0x6c, 0x4d, 0x37, 0x34, 0xff, 0x28, 0x57, 0x1e,
	0x8a, 0xe4, 0xc4, 0x86, 0x62, 0x92, 0xf8, 0xc9, 0x1f, 0xf7, 0x30, 0x84, 0x27, 0xb9, 0xf2, 0x20,
	0x18, 0x27, 0x6d, 0xf8, 0x75, 0x46, 0xcf, 0x24, 0xf6, 0x2f, 0x4f, 0x12, 0x7c, 0x65, 0xa1, 0x34,
	0xc8, 0x19, 0x14, 0x93, 0xc4, 0x1c, 0x2f, 0x7e, 0x8e, 0xe0, 0xef, 0x27, 0x4f, 0x12, 0x72, 0x9c,
	0x7c, 0x8e, 0xd8, 0xef, 0x21, 0x6f, 0x43, 0x31, 0x49, 0xc4, 0x71, 0xf2, 0x39, 0x42, 0xaf, 0xac,
	0x19, 0xe1, 0x35, 0x6f, 0xdc, 0x5d, 0xf3, 0xc6, 0xbe, 0xbc, 0x06, 0x5a, 0xbb, 0x57, 0x5f, 0xaa,
	0xa9, 0x0f, 0x5f, 0xab, 0xda, 0xdb, 0xeb, 0x6a, 0xea, 0xea, 0xba, 0x9a, 0xfa, 0x74, 0x5d, 0x4d,
	0x3d, 0x93, 0xaf, 0x10, 0x83, 0xf7, 0xfd, 0x00, 0x5d, 0xea, 0xd9, 0x06, 0xf5, 0xce, 0xd5, 0x43,
	0xc4, 0xee, 0x77, 0x05, 0x6f, 0x58, 0x82, 0xb9, 0x8d, 0xbb, 0x97, 0x48, 0xc3, 0xf2, 0x69, 0x67,
	0x59, 0x59, 0x7f, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xca, 0xa8, 0xbb, 0xeb, 0xd9, 0x08, 0x00,
	0x00,
}

func (this *DeviceCategory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCategory)
	if !ok {
		that2, ok := that.(DeviceCategory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *DeviceCategorySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCategorySpec)
	if !ok {
		that2, ok := that.(DeviceCategorySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	if this.SpecVersion != that1.SpecVersion {
		return false
	}
	return true
}
func (this *DeviceCategoryStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCategoryStatus)
	if !ok {
		that2, ok := that.(DeviceCategoryStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListDeviceCategoryKindsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDeviceCategoryKindsReq)
	if !ok {
		that2, ok := that.(ListDeviceCategoryKindsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListDeviceCategoryKindsRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDeviceCategoryKindsRes)
	if !ok {
		that2, ok := that.(ListDeviceCategoryKindsRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Kinds) != len(that1.Kinds) {
		return false
	}
	for i := range this.Kinds {
		if this.Kinds[i] != that1.Kinds[i] {
			return false
		}
	}
	return true
}
func (this *ListDeviceCategoriesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDeviceCategoriesReq)
	if !ok {
		that2, ok := that.(ListDeviceCategoriesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Class != that1.Class {
		return false
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *ListDeviceCategoriesRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDeviceCategoriesRes)
	if !ok {
		that2, ok := that.(ListDeviceCategoriesRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DeviceCategories) != len(that1.DeviceCategories) {
		return false
	}
	for i := range this.DeviceCategories {
		if !this.DeviceCategories[i].Equal(that1.DeviceCategories[i]) {
			return false
		}
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *GetDeviceCategoryReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeviceCategoryReq)
	if !ok {
		that2, ok := that.(GetDeviceCategoryReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateDeviceCategoryReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateDeviceCategoryReq)
	if !ok {
		that2, ok := that.(CreateDeviceCategoryReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceCategory.Equal(that1.DeviceCategory) {
		return false
	}
	return true
}
func (this *UpdateDeviceCategoryReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDeviceCategoryReq)
	if !ok {
		that2, ok := that.(UpdateDeviceCategoryReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeviceCategory.Equal(that1.DeviceCategory) {
		return false
	}
	return true
}
func (this *RemoveDeviceCategoryReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveDeviceCategoryReq)
	if !ok {
		that2, ok := that.(RemoveDeviceCategoryReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceCategoryServiceClient is the client API for DeviceCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceCategoryServiceClient interface {
	ListDeviceCategoryKinds(ctx context.Context, in *ListDeviceCategoryKindsReq, opts ...grpc.CallOption) (*ListDeviceCategoryKindsRes, error)
	ListDeviceCategories(ctx context.Context, in *ListDeviceCategoriesReq, opts ...grpc.CallOption) (*ListDeviceCategoriesRes, error)
	GetDeviceCategory(ctx context.Context, in *GetDeviceCategoryReq, opts ...grpc.CallOption) (*DeviceCategory, error)
	CreateDeviceCategory(ctx context.Context, in *CreateDeviceCategoryReq, opts ...grpc.CallOption) (*DeviceCategory, error)
	UpdateDeviceCategory(ctx context.Context, in *UpdateDeviceCategoryReq, opts ...grpc.CallOption) (*DeviceCategory, error)
	RemoveDeviceCategory(ctx context.Context, in *RemoveDeviceCategoryReq, opts ...grpc.CallOption) (*types.Empty, error)
}

type deviceCategoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceCategoryServiceClient(cc *grpc.ClientConn) DeviceCategoryServiceClient {
	return &deviceCategoryServiceClient{cc}
}

func (c *deviceCategoryServiceClient) ListDeviceCategoryKinds(ctx context.Context, in *ListDeviceCategoryKindsReq, opts ...grpc.CallOption) (*ListDeviceCategoryKindsRes, error) {
	out := new(ListDeviceCategoryKindsRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.DeviceCategoryService/ListDeviceCategoryKinds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCategoryServiceClient) ListDeviceCategories(ctx context.Context, in *ListDeviceCategoriesReq, opts ...grpc.CallOption) (*ListDeviceCategoriesRes, error) {
	out := new(ListDeviceCategoriesRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.DeviceCategoryService/ListDeviceCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCategoryServiceClient) GetDeviceCategory(ctx context.Context, in *GetDeviceCategoryReq, opts ...grpc.CallOption) (*DeviceCategory, error) {
	out := new(DeviceCategory)
	err := c.cc.Invoke(ctx, "/apiserver.v2.DeviceCategoryService/GetDeviceCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCategoryServiceClient) CreateDeviceCategory(ctx context.Context, in *CreateDeviceCategoryReq, opts ...grpc.CallOption) (*DeviceCategory, error) {
	out := new(DeviceCategory)
	err := c.cc.Invoke(ctx, "/apiserver.v2.DeviceCategoryService/CreateDeviceCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCategoryServiceClient) UpdateDeviceCategory(ctx context.Context, in *UpdateDeviceCategoryReq, opts ...grpc.CallOption) (*DeviceCategory, error) {
	out := new(DeviceCategory)
	err := c.cc.Invoke(ctx, "/apiserver.v2.DeviceCategoryService/UpdateDeviceCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCategoryServiceClient) RemoveDeviceCategory(ctx context.Context, in *RemoveDeviceCategoryReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/apiserver.v2.DeviceCategoryService/RemoveDeviceCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceCategoryServiceServer is the server API for DeviceCategoryService service.
type DeviceCategoryServiceServer interface {
	ListDeviceCategoryKinds(context.Context, *ListDeviceCategoryKindsReq) (*ListDeviceCategoryKindsRes, error)
	ListDeviceCategories(context.Context, *ListDeviceCategoriesReq) (*ListDeviceCategoriesRes, error)
	GetDeviceCategory(context.Context, *GetDeviceCategoryReq) (*DeviceCategory, error)
	CreateDeviceCategory(context.Context, *CreateDeviceCategoryReq) (*DeviceCategory, error)
	UpdateDeviceCategory(context.Context, *UpdateDeviceCategoryReq) (*DeviceCategory, error)
	RemoveDeviceCategory(context.Context, *RemoveDeviceCategoryReq) (*types.Empty, error)
}

// UnimplementedDeviceCategoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceCategoryServiceServer struct {
}

func (*UnimplementedDeviceCategoryServiceServer) ListDeviceCategoryKinds(ctx context.Context, req *ListDeviceCategoryKindsReq) (*ListDeviceCategoryKindsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceCategoryKinds not implemented")
}
func (*UnimplementedDeviceCategoryServiceServer) ListDeviceCategories(ctx context.Context, req *ListDeviceCategoriesReq) (*ListDeviceCategoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceCategories not implemented")
}
func (*UnimplementedDeviceCategoryServiceServer) GetDeviceCategory(ctx context.Context, req *GetDeviceCategoryReq) (*DeviceCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCategory not implemented")
}
func (*UnimplementedDeviceCategoryServiceServer) CreateDeviceCategory(ctx context.Context, req *CreateDeviceCategoryReq) (*DeviceCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceCategory not implemented")
}
func (*UnimplementedDeviceCategoryServiceServer) UpdateDeviceCategory(ctx context.Context, req *UpdateDeviceCategoryReq) (*DeviceCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceCategory not implemented")
}
func (*UnimplementedDeviceCategoryServiceServer) RemoveDeviceCategory(ctx context.Context, req *RemoveDeviceCategoryReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceCategory not implemented")
}

func RegisterDeviceCategoryServiceServer(s *grpc.Server, srv DeviceCategoryServiceServer) {
	s.RegisterService(&_DeviceCategoryService_serviceDesc, srv)
}

func _DeviceCategoryService_ListDeviceCategoryKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceCategoryKindsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCategoryServiceServer).ListDeviceCategoryKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.DeviceCategoryService/ListDeviceCategoryKinds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCategoryServiceServer).ListDeviceCategoryKinds(ctx, req.(*ListDeviceCategoryKindsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCategoryService_ListDeviceCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCategoryServiceServer).ListDeviceCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.DeviceCategoryService/ListDeviceCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCategoryServiceServer).ListDeviceCategories(ctx, req.(*ListDeviceCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCategoryService_GetDeviceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCategoryServiceServer).GetDeviceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.DeviceCategoryService/GetDeviceCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCategoryServiceServer).GetDeviceCategory(ctx, req.(*GetDeviceCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCategoryService_CreateDeviceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCategoryServiceServer).CreateDeviceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.DeviceCategoryService/CreateDeviceCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCategoryServiceServer).CreateDeviceCategory(ctx, req.(*CreateDeviceCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCategoryService_UpdateDeviceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCategoryServiceServer).UpdateDeviceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.DeviceCategoryService/UpdateDeviceCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCategoryServiceServer).UpdateDeviceCategory(ctx, req.(*UpdateDeviceCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCategoryService_RemoveDeviceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCategoryServiceServer).RemoveDeviceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.DeviceCategoryService/RemoveDeviceCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCategoryServiceServer).RemoveDeviceCategory(ctx, req.(*RemoveDeviceCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceCategoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.v2.DeviceCategoryService",
	HandlerType: (*DeviceCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeviceCategoryKinds",
			Handler:    _DeviceCategoryService_ListDeviceCategoryKinds_Handler,
		},
		{
			MethodName: "ListDeviceCategories",
			Handler:    _DeviceCategoryService_ListDeviceCategories_Handler,
		},
		{
			MethodName: "GetDeviceCategory",
			Handler:    _DeviceCategoryService_GetDeviceCategory_Handler,
		},
		{
			MethodName: "CreateDeviceCategory",
			Handler:    _DeviceCategoryService_CreateDeviceCategory_Handler,
		},
		{
			MethodName: "UpdateDeviceCategory",
			Handler:    _DeviceCategoryService_UpdateDeviceCategory_Handler,
		},
		{
			MethodName: "RemoveDeviceCategory",
			Handler:    _DeviceCategoryService_RemoveDeviceCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
