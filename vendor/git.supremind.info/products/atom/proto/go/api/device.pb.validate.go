// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: device.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _device_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DeviceCategory with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeviceCategory) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DeviceCategoryValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DeviceCategoryValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// DeviceCategoryValidationError is the validation error returned by
// DeviceCategory.Validate if the designated constraints aren't met.
type DeviceCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceCategoryValidationError) ErrorName() string { return "DeviceCategoryValidationError" }

// Error satisfies the builtin error interface
func (e DeviceCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceCategoryValidationError{}

// Validate checks the field values on DeviceCategorySpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeviceCategorySpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Class

	if _, ok := SpecVersion_name[int32(m.GetSpecVersion())]; !ok {
		return DeviceCategorySpecValidationError{
			field:  "SpecVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// DeviceCategorySpecValidationError is the validation error returned by
// DeviceCategorySpec.Validate if the designated constraints aren't met.
type DeviceCategorySpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceCategorySpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceCategorySpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceCategorySpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceCategorySpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceCategorySpecValidationError) ErrorName() string {
	return "DeviceCategorySpecValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceCategorySpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceCategorySpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceCategorySpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceCategorySpecValidationError{}

// Validate checks the field values on DeviceCategoryStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeviceCategoryStatus) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeviceCategoryStatusValidationError is the validation error returned by
// DeviceCategoryStatus.Validate if the designated constraints aren't met.
type DeviceCategoryStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceCategoryStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceCategoryStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceCategoryStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceCategoryStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceCategoryStatusValidationError) ErrorName() string {
	return "DeviceCategoryStatusValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceCategoryStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceCategoryStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceCategoryStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceCategoryStatusValidationError{}

// Validate checks the field values on ListDeviceCategoryKindsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceCategoryKindsReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListDeviceCategoryKindsReqValidationError is the validation error returned
// by ListDeviceCategoryKindsReq.Validate if the designated constraints aren't met.
type ListDeviceCategoryKindsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceCategoryKindsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceCategoryKindsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceCategoryKindsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceCategoryKindsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceCategoryKindsReqValidationError) ErrorName() string {
	return "ListDeviceCategoryKindsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceCategoryKindsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceCategoryKindsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceCategoryKindsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceCategoryKindsReqValidationError{}

// Validate checks the field values on ListDeviceCategoryKindsRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceCategoryKindsRes) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListDeviceCategoryKindsResValidationError is the validation error returned
// by ListDeviceCategoryKindsRes.Validate if the designated constraints aren't met.
type ListDeviceCategoryKindsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceCategoryKindsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceCategoryKindsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceCategoryKindsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceCategoryKindsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceCategoryKindsResValidationError) ErrorName() string {
	return "ListDeviceCategoryKindsResValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceCategoryKindsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceCategoryKindsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceCategoryKindsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceCategoryKindsResValidationError{}

// Validate checks the field values on ListDeviceCategoriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceCategoriesReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Class

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListDeviceCategoriesReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListDeviceCategoriesReqValidationError is the validation error returned by
// ListDeviceCategoriesReq.Validate if the designated constraints aren't met.
type ListDeviceCategoriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceCategoriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceCategoriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceCategoriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceCategoriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceCategoriesReqValidationError) ErrorName() string {
	return "ListDeviceCategoriesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceCategoriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceCategoriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceCategoriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceCategoriesReqValidationError{}

// Validate checks the field values on ListDeviceCategoriesRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceCategoriesRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDeviceCategories() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListDeviceCategoriesResValidationError{
						field:  fmt.Sprintf("DeviceCategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListDeviceCategoriesResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListDeviceCategoriesResValidationError is the validation error returned by
// ListDeviceCategoriesRes.Validate if the designated constraints aren't met.
type ListDeviceCategoriesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceCategoriesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceCategoriesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceCategoriesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceCategoriesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceCategoriesResValidationError) ErrorName() string {
	return "ListDeviceCategoriesResValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceCategoriesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceCategoriesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceCategoriesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceCategoriesResValidationError{}

// Validate checks the field values on GetDeviceCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeviceCategoryReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Name

	return nil
}

// GetDeviceCategoryReqValidationError is the validation error returned by
// GetDeviceCategoryReq.Validate if the designated constraints aren't met.
type GetDeviceCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceCategoryReqValidationError) ErrorName() string {
	return "GetDeviceCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceCategoryReqValidationError{}

// Validate checks the field values on CreateDeviceCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDeviceCategoryReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetDeviceCategory()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateDeviceCategoryReqValidationError{
					field:  "DeviceCategory",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateDeviceCategoryReqValidationError is the validation error returned by
// CreateDeviceCategoryReq.Validate if the designated constraints aren't met.
type CreateDeviceCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceCategoryReqValidationError) ErrorName() string {
	return "CreateDeviceCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceCategoryReqValidationError{}

// Validate checks the field values on UpdateDeviceCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDeviceCategoryReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetDeviceCategory()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UpdateDeviceCategoryReqValidationError{
					field:  "DeviceCategory",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// UpdateDeviceCategoryReqValidationError is the validation error returned by
// UpdateDeviceCategoryReq.Validate if the designated constraints aren't met.
type UpdateDeviceCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceCategoryReqValidationError) ErrorName() string {
	return "UpdateDeviceCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceCategoryReqValidationError{}

// Validate checks the field values on RemoveDeviceCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveDeviceCategoryReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Name

	return nil
}

// RemoveDeviceCategoryReqValidationError is the validation error returned by
// RemoveDeviceCategoryReq.Validate if the designated constraints aren't met.
type RemoveDeviceCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDeviceCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDeviceCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDeviceCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDeviceCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDeviceCategoryReqValidationError) ErrorName() string {
	return "RemoveDeviceCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDeviceCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDeviceCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDeviceCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDeviceCategoryReqValidationError{}
