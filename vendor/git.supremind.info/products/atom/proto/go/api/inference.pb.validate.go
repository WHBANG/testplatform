// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inference.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _inference_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AnalyzerInferenceSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AnalyzerInferenceSpec) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return AnalyzerInferenceSpecValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return AnalyzerInferenceSpecValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for AnalyzerConfig

	return nil
}

// AnalyzerInferenceSpecValidationError is the validation error returned by
// AnalyzerInferenceSpec.Validate if the designated constraints aren't met.
type AnalyzerInferenceSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyzerInferenceSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyzerInferenceSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyzerInferenceSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyzerInferenceSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyzerInferenceSpecValidationError) ErrorName() string {
	return "AnalyzerInferenceSpecValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyzerInferenceSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyzerInferenceSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyzerInferenceSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyzerInferenceSpecValidationError{}

// Validate checks the field values on VideoAnalyzerInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VideoAnalyzerInput) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVideo()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return VideoAnalyzerInputValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Violation

	return nil
}

// VideoAnalyzerInputValidationError is the validation error returned by
// VideoAnalyzerInput.Validate if the designated constraints aren't met.
type VideoAnalyzerInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoAnalyzerInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoAnalyzerInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoAnalyzerInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoAnalyzerInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoAnalyzerInputValidationError) ErrorName() string {
	return "VideoAnalyzerInputValidationError"
}

// Error satisfies the builtin error interface
func (e VideoAnalyzerInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoAnalyzerInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoAnalyzerInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoAnalyzerInputValidationError{}

// Validate checks the field values on AnalyzerInferenceStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AnalyzerInferenceStatus) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetOutput()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return AnalyzerInferenceStatusValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// AnalyzerInferenceStatusValidationError is the validation error returned by
// AnalyzerInferenceStatus.Validate if the designated constraints aren't met.
type AnalyzerInferenceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyzerInferenceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyzerInferenceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyzerInferenceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyzerInferenceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyzerInferenceStatusValidationError) ErrorName() string {
	return "AnalyzerInferenceStatusValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyzerInferenceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyzerInferenceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyzerInferenceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyzerInferenceStatusValidationError{}

// Validate checks the field values on VideoAnalyzerOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VideoAnalyzerOutput) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return VideoAnalyzerOutputValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return VideoAnalyzerOutputValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// VideoAnalyzerOutputValidationError is the validation error returned by
// VideoAnalyzerOutput.Validate if the designated constraints aren't met.
type VideoAnalyzerOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoAnalyzerOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoAnalyzerOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoAnalyzerOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoAnalyzerOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoAnalyzerOutputValidationError) ErrorName() string {
	return "VideoAnalyzerOutputValidationError"
}

// Error satisfies the builtin error interface
func (e VideoAnalyzerOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoAnalyzerOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoAnalyzerOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoAnalyzerOutputValidationError{}

// Validate checks the field values on AnalyzerOutputVideo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AnalyzerOutputVideo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// AnalyzerOutputVideoValidationError is the validation error returned by
// AnalyzerOutputVideo.Validate if the designated constraints aren't met.
type AnalyzerOutputVideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyzerOutputVideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyzerOutputVideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyzerOutputVideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyzerOutputVideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyzerOutputVideoValidationError) ErrorName() string {
	return "AnalyzerOutputVideoValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyzerOutputVideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyzerOutputVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyzerOutputVideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyzerOutputVideoValidationError{}

// Validate checks the field values on AnalyzerOutputEvents with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AnalyzerOutputEvents) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// AnalyzerOutputEventsValidationError is the validation error returned by
// AnalyzerOutputEvents.Validate if the designated constraints aren't met.
type AnalyzerOutputEventsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyzerOutputEventsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyzerOutputEventsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyzerOutputEventsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyzerOutputEventsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyzerOutputEventsValidationError) ErrorName() string {
	return "AnalyzerOutputEventsValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyzerOutputEventsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyzerOutputEvents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyzerOutputEventsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyzerOutputEventsValidationError{}
