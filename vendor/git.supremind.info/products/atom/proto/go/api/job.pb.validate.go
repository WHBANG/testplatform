// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: job.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _job_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Job with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Job) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// JobValidationError is the validation error returned by Job.Validate if the
// designated constraints aren't met.
type JobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobValidationError) ErrorName() string { return "JobValidationError" }

// Error satisfies the builtin error interface
func (e JobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobValidationError{}

// Validate checks the field values on JobSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JobSpec) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := JobKind_name[int32(m.GetKind())]; !ok {
		return JobSpecValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
	}

	// skipping validation for instruction

	// skipping validation for common

	return nil
}

// JobSpecValidationError is the validation error returned by JobSpec.Validate
// if the designated constraints aren't met.
type JobSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobSpecValidationError) ErrorName() string { return "JobSpecValidationError" }

// Error satisfies the builtin error interface
func (e JobSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobSpecValidationError{}

// Validate checks the field values on JobInstruction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JobInstruction) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetDataflow()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobInstructionValidationError{
					field:  "Dataflow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTraining()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobInstructionValidationError{
					field:  "Training",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAnalyzerInference()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobInstructionValidationError{
					field:  "AnalyzerInference",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetDistributed()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobInstructionValidationError{
					field:  "Distributed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// JobInstructionValidationError is the validation error returned by
// JobInstruction.Validate if the designated constraints aren't met.
type JobInstructionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobInstructionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobInstructionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobInstructionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobInstructionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobInstructionValidationError) ErrorName() string { return "JobInstructionValidationError" }

// Error satisfies the builtin error interface
func (e JobInstructionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobInstruction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobInstructionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobInstructionValidationError{}

// Validate checks the field values on JobCommon with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JobCommon) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Image

	// no validation rules for Config

	// no validation rules for Env

	{
		tmp := m.GetPackage()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobCommonValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetMounting()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobCommonValidationError{
					field:  "Mounting",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// JobCommonValidationError is the validation error returned by
// JobCommon.Validate if the designated constraints aren't met.
type JobCommonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobCommonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobCommonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobCommonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobCommonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobCommonValidationError) ErrorName() string { return "JobCommonValidationError" }

// Error satisfies the builtin error interface
func (e JobCommonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobCommon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobCommonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobCommonValidationError{}

// Validate checks the field values on JobMounting with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JobMounting) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return JobMountingValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetDatasets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return JobMountingValidationError{
						field:  fmt.Sprintf("Datasets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return JobMountingValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetStorages() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return JobMountingValidationError{
						field:  fmt.Sprintf("Storages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// JobMountingValidationError is the validation error returned by
// JobMounting.Validate if the designated constraints aren't met.
type JobMountingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobMountingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobMountingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobMountingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobMountingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobMountingValidationError) ErrorName() string { return "JobMountingValidationError" }

// Error satisfies the builtin error interface
func (e JobMountingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobMounting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobMountingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobMountingValidationError{}

// Validate checks the field values on VolumeMounting with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VolumeMounting) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVolume()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return VolumeMountingValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for ReadOnly

	return nil
}

// VolumeMountingValidationError is the validation error returned by
// VolumeMounting.Validate if the designated constraints aren't met.
type VolumeMountingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeMountingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeMountingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeMountingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeMountingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeMountingValidationError) ErrorName() string { return "VolumeMountingValidationError" }

// Error satisfies the builtin error interface
func (e VolumeMountingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeMounting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeMountingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeMountingValidationError{}

// Validate checks the field values on StorageMounting with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StorageMounting) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetStorage()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return StorageMountingValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for ReadOnly

	return nil
}

// StorageMountingValidationError is the validation error returned by
// StorageMounting.Validate if the designated constraints aren't met.
type StorageMountingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageMountingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageMountingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageMountingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageMountingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageMountingValidationError) ErrorName() string { return "StorageMountingValidationError" }

// Error satisfies the builtin error interface
func (e StorageMountingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageMounting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageMountingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageMountingValidationError{}

// Validate checks the field values on JobStatus with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JobStatus) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := JobPhase_name[int32(m.GetPhase())]; !ok {
		return JobStatusValidationError{
			field:  "Phase",
			reason: "value must be one of the defined enum values",
		}
	}

	{
		tmp := m.GetProgress()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobStatusValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetResult()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobStatusValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTraining()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobStatusValidationError{
					field:  "Training",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetResource()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobStatusValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAnalyzerInference()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobStatusValidationError{
					field:  "AnalyzerInference",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetDistributed()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobStatusValidationError{
					field:  "Distributed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// JobStatusValidationError is the validation error returned by
// JobStatus.Validate if the designated constraints aren't met.
type JobStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobStatusValidationError) ErrorName() string { return "JobStatusValidationError" }

// Error satisfies the builtin error interface
func (e JobStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobStatusValidationError{}

// Validate checks the field values on JobProgress with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JobProgress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for Done

	// no validation rules for Skipped

	// no validation rules for Failed

	return nil
}

// JobProgressValidationError is the validation error returned by
// JobProgress.Validate if the designated constraints aren't met.
type JobProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobProgressValidationError) ErrorName() string { return "JobProgressValidationError" }

// Error satisfies the builtin error interface
func (e JobProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobProgressValidationError{}

// Validate checks the field values on JobResult with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JobResult) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobResultValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetResponse()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return JobResultValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// JobResultValidationError is the validation error returned by
// JobResult.Validate if the designated constraints aren't met.
type JobResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobResultValidationError) ErrorName() string { return "JobResultValidationError" }

// Error satisfies the builtin error interface
func (e JobResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobResultValidationError{}

// Validate checks the field values on CreateJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateJobReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetJob()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateJobReqValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateJobReqValidationError is the validation error returned by
// CreateJobReq.Validate if the designated constraints aren't met.
type CreateJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobReqValidationError) ErrorName() string { return "CreateJobReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobReqValidationError{}

// Validate checks the field values on GetJobReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetJobReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Creator

	return nil
}

// GetJobReqValidationError is the validation error returned by
// GetJobReq.Validate if the designated constraints aren't met.
type GetJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobReqValidationError) ErrorName() string { return "GetJobReqValidationError" }

// Error satisfies the builtin error interface
func (e GetJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobReqValidationError{}

// Validate checks the field values on ListJobsReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListJobsReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetOwner()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListJobsReqValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Creator

	// no validation rules for Kind

	// no validation rules for Phase

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListJobsReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListJobsReqValidationError is the validation error returned by
// ListJobsReq.Validate if the designated constraints aren't met.
type ListJobsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJobsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJobsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJobsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJobsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJobsReqValidationError) ErrorName() string { return "ListJobsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListJobsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJobsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJobsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJobsReqValidationError{}

// Validate checks the field values on ListJobsRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListJobsRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListJobsResValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListJobsResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListJobsResValidationError is the validation error returned by
// ListJobsRes.Validate if the designated constraints aren't met.
type ListJobsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJobsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJobsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJobsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJobsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJobsResValidationError) ErrorName() string { return "ListJobsResValidationError" }

// Error satisfies the builtin error interface
func (e ListJobsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJobsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJobsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJobsResValidationError{}

// Validate checks the field values on UpdateJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateJobReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetJob()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UpdateJobReqValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// skipping validation for fieldMask

	return nil
}

// UpdateJobReqValidationError is the validation error returned by
// UpdateJobReq.Validate if the designated constraints aren't met.
type UpdateJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobReqValidationError) ErrorName() string { return "UpdateJobReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobReqValidationError{}

// Validate checks the field values on StartJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StartJobReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Creator

	return nil
}

// StartJobReqValidationError is the validation error returned by
// StartJobReq.Validate if the designated constraints aren't met.
type StartJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartJobReqValidationError) ErrorName() string { return "StartJobReqValidationError" }

// Error satisfies the builtin error interface
func (e StartJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartJobReqValidationError{}

// Validate checks the field values on StopJobReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *StopJobReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Creator

	return nil
}

// StopJobReqValidationError is the validation error returned by
// StopJobReq.Validate if the designated constraints aren't met.
type StopJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopJobReqValidationError) ErrorName() string { return "StopJobReqValidationError" }

// Error satisfies the builtin error interface
func (e StopJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopJobReqValidationError{}

// Validate checks the field values on RemoveJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RemoveJobReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Creator

	return nil
}

// RemoveJobReqValidationError is the validation error returned by
// RemoveJobReq.Validate if the designated constraints aren't met.
type RemoveJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveJobReqValidationError) ErrorName() string { return "RemoveJobReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveJobReqValidationError{}

// Validate checks the field values on ReportProgressReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReportProgressReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Creator

	{
		tmp := m.GetProgress()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ReportProgressReqValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ReportProgressReqValidationError is the validation error returned by
// ReportProgressReq.Validate if the designated constraints aren't met.
type ReportProgressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportProgressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportProgressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportProgressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportProgressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportProgressReqValidationError) ErrorName() string {
	return "ReportProgressReqValidationError"
}

// Error satisfies the builtin error interface
func (e ReportProgressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportProgressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportProgressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportProgressReqValidationError{}
