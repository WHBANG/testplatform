// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: meta.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _meta_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ResourceReference with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResourceReference) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := SpecVersion_name[int32(m.GetSpecVersion())]; !ok {
		return ResourceReferenceValidationError{
			field:  "SpecVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := ResourceKind_name[int32(m.GetKind())]; !ok {
		return ResourceReferenceValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
	}

	if !_ResourceReference_Name_Pattern.MatchString(m.GetName()) {
		return ResourceReferenceValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-_.]{2,63}$\"",
		}
	}

	if !_ResourceReference_Creator_Pattern.MatchString(m.GetCreator()) {
		return ResourceReferenceValidationError{
			field:  "Creator",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-_.]{2,63}$\"",
		}
	}

	return nil
}

// ResourceReferenceValidationError is the validation error returned by
// ResourceReference.Validate if the designated constraints aren't met.
type ResourceReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceReferenceValidationError) ErrorName() string {
	return "ResourceReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceReferenceValidationError{}

var _ResourceReference_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9-_.]{2,63}$")

var _ResourceReference_Creator_Pattern = regexp.MustCompile("^[a-zA-Z0-9-_.]{2,63}$")

// Validate checks the field values on ID with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *ID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hex

	return nil
}

// IDValidationError is the validation error returned by ID.Validate if the
// designated constraints aren't met.
type IDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDValidationError) ErrorName() string { return "IDValidationError" }

// Error satisfies the builtin error interface
func (e IDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := SpecVersion_name[int32(m.GetSpecVersion())]; !ok {
		return MetadataValidationError{
			field:  "SpecVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := ResourceKind_name[int32(m.GetKind())]; !ok {
		return MetadataValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
	}

	if !_Metadata_Name_Pattern.MatchString(m.GetName()) {
		return MetadataValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-_.]{2,63}$\"",
		}
	}

	// no validation rules for Desc

	// no validation rules for Creator

	{
		tmp := m.GetOwnerRef()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "OwnerRef",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetCreateTime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetUpdateTime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Tags

	{
		tmp := m.GetId()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

var _Metadata_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9-_.]{2,63}$")

// Validate checks the field values on PagerReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PagerReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Marker

	// no validation rules for Limit

	return nil
}

// PagerReqValidationError is the validation error returned by
// PagerReq.Validate if the designated constraints aren't met.
type PagerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagerReqValidationError) ErrorName() string { return "PagerReqValidationError" }

// Error satisfies the builtin error interface
func (e PagerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagerReqValidationError{}

// Validate checks the field values on PagerRes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PagerRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for Marker

	// no validation rules for PageSize

	return nil
}

// PagerResValidationError is the validation error returned by
// PagerRes.Validate if the designated constraints aren't met.
type PagerResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagerResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagerResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagerResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagerResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagerResValidationError) ErrorName() string { return "PagerResValidationError" }

// Error satisfies the builtin error interface
func (e PagerResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagerRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagerResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagerResValidationError{}
