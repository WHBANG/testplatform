// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ore.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ore struct {
	*Metadata `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta,omitempty"`
	Spec      *OreSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Ore) Reset()         { *m = Ore{} }
func (m *Ore) String() string { return proto.CompactTextString(m) }
func (*Ore) ProtoMessage()    {}
func (*Ore) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{0}
}
func (m *Ore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ore.Unmarshal(m, b)
}
func (m *Ore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ore.Marshal(b, m, deterministic)
}
func (m *Ore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ore.Merge(m, src)
}
func (m *Ore) XXX_Size() int {
	return xxx_messageInfo_Ore.Size(m)
}
func (m *Ore) XXX_DiscardUnknown() {
	xxx_messageInfo_Ore.DiscardUnknown(m)
}

var xxx_messageInfo_Ore proto.InternalMessageInfo

func (m *Ore) GetSpec() *OreSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// to keep backward compatible, do not add bson tags for ore
type OreSpec struct {
	UserData *types.Struct `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
	RawInfo  *RawInfo      `protobuf:"bytes,2,opt,name=rawInfo,proto3" json:"rawInfo,omitempty"`
}

func (m *OreSpec) Reset()         { *m = OreSpec{} }
func (m *OreSpec) String() string { return proto.CompactTextString(m) }
func (*OreSpec) ProtoMessage()    {}
func (*OreSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{1}
}
func (m *OreSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OreSpec.Unmarshal(m, b)
}
func (m *OreSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OreSpec.Marshal(b, m, deterministic)
}
func (m *OreSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OreSpec.Merge(m, src)
}
func (m *OreSpec) XXX_Size() int {
	return xxx_messageInfo_OreSpec.Size(m)
}
func (m *OreSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_OreSpec.DiscardUnknown(m)
}

var xxx_messageInfo_OreSpec proto.InternalMessageInfo

func (m *OreSpec) GetUserData() *types.Struct {
	if m != nil {
		return m.UserData
	}
	return nil
}

func (m *OreSpec) GetRawInfo() *RawInfo {
	if m != nil {
		return m.RawInfo
	}
	return nil
}

type RawInfo struct {
	RawItemInfos []*RawItemInfo     `protobuf:"bytes,1,rep,name=rawItemInfos,proto3" json:"rawItemInfos,omitempty"`
	VolumeRef    *ResourceReference `protobuf:"bytes,2,opt,name=volumeRef,proto3" json:"volumeRef,omitempty"`
}

func (m *RawInfo) Reset()         { *m = RawInfo{} }
func (m *RawInfo) String() string { return proto.CompactTextString(m) }
func (*RawInfo) ProtoMessage()    {}
func (*RawInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{2}
}
func (m *RawInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawInfo.Unmarshal(m, b)
}
func (m *RawInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawInfo.Marshal(b, m, deterministic)
}
func (m *RawInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawInfo.Merge(m, src)
}
func (m *RawInfo) XXX_Size() int {
	return xxx_messageInfo_RawInfo.Size(m)
}
func (m *RawInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RawInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RawInfo proto.InternalMessageInfo

func (m *RawInfo) GetRawItemInfos() []*RawItemInfo {
	if m != nil {
		return m.RawItemInfos
	}
	return nil
}

func (m *RawInfo) GetVolumeRef() *ResourceReference {
	if m != nil {
		return m.VolumeRef
	}
	return nil
}

type RawItemInfo struct {
	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	FileSize int64  `protobuf:"varint,2,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
}

func (m *RawItemInfo) Reset()         { *m = RawItemInfo{} }
func (m *RawItemInfo) String() string { return proto.CompactTextString(m) }
func (*RawItemInfo) ProtoMessage()    {}
func (*RawItemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{3}
}
func (m *RawItemInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawItemInfo.Unmarshal(m, b)
}
func (m *RawItemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawItemInfo.Marshal(b, m, deterministic)
}
func (m *RawItemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawItemInfo.Merge(m, src)
}
func (m *RawItemInfo) XXX_Size() int {
	return xxx_messageInfo_RawItemInfo.Size(m)
}
func (m *RawItemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RawItemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RawItemInfo proto.InternalMessageInfo

func (m *RawItemInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RawItemInfo) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type CreateOreReq struct {
	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Spec      *OreSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Overwrite bool     `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (m *CreateOreReq) Reset()         { *m = CreateOreReq{} }
func (m *CreateOreReq) String() string { return proto.CompactTextString(m) }
func (*CreateOreReq) ProtoMessage()    {}
func (*CreateOreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{4}
}
func (m *CreateOreReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOreReq.Unmarshal(m, b)
}
func (m *CreateOreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOreReq.Marshal(b, m, deterministic)
}
func (m *CreateOreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOreReq.Merge(m, src)
}
func (m *CreateOreReq) XXX_Size() int {
	return xxx_messageInfo_CreateOreReq.Size(m)
}
func (m *CreateOreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOreReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOreReq proto.InternalMessageInfo

func (m *CreateOreReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateOreReq) GetSpec() *OreSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateOreReq) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

type GetOreReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetOreReq) Reset()         { *m = GetOreReq{} }
func (m *GetOreReq) String() string { return proto.CompactTextString(m) }
func (*GetOreReq) ProtoMessage()    {}
func (*GetOreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{5}
}
func (m *GetOreReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOreReq.Unmarshal(m, b)
}
func (m *GetOreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOreReq.Marshal(b, m, deterministic)
}
func (m *GetOreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOreReq.Merge(m, src)
}
func (m *GetOreReq) XXX_Size() int {
	return xxx_messageInfo_GetOreReq.Size(m)
}
func (m *GetOreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOreReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOreReq proto.InternalMessageInfo

func (m *GetOreReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateOreReq struct {
	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Spec *OreSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *UpdateOreReq) Reset()         { *m = UpdateOreReq{} }
func (m *UpdateOreReq) String() string { return proto.CompactTextString(m) }
func (*UpdateOreReq) ProtoMessage()    {}
func (*UpdateOreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{6}
}
func (m *UpdateOreReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOreReq.Unmarshal(m, b)
}
func (m *UpdateOreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOreReq.Marshal(b, m, deterministic)
}
func (m *UpdateOreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOreReq.Merge(m, src)
}
func (m *UpdateOreReq) XXX_Size() int {
	return xxx_messageInfo_UpdateOreReq.Size(m)
}
func (m *UpdateOreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOreReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOreReq proto.InternalMessageInfo

func (m *UpdateOreReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOreReq) GetSpec() *OreSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type RemoveOreReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemoveOreReq) Reset()         { *m = RemoveOreReq{} }
func (m *RemoveOreReq) String() string { return proto.CompactTextString(m) }
func (*RemoveOreReq) ProtoMessage()    {}
func (*RemoveOreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34de32dc20aad561, []int{7}
}
func (m *RemoveOreReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveOreReq.Unmarshal(m, b)
}
func (m *RemoveOreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveOreReq.Marshal(b, m, deterministic)
}
func (m *RemoveOreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveOreReq.Merge(m, src)
}
func (m *RemoveOreReq) XXX_Size() int {
	return xxx_messageInfo_RemoveOreReq.Size(m)
}
func (m *RemoveOreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveOreReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveOreReq proto.InternalMessageInfo

func (m *RemoveOreReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Ore)(nil), "apiserver.v2.Ore")
	proto.RegisterType((*OreSpec)(nil), "apiserver.v2.OreSpec")
	proto.RegisterType((*RawInfo)(nil), "apiserver.v2.RawInfo")
	proto.RegisterType((*RawItemInfo)(nil), "apiserver.v2.RawItemInfo")
	proto.RegisterType((*CreateOreReq)(nil), "apiserver.v2.CreateOreReq")
	proto.RegisterType((*GetOreReq)(nil), "apiserver.v2.GetOreReq")
	proto.RegisterType((*UpdateOreReq)(nil), "apiserver.v2.UpdateOreReq")
	proto.RegisterType((*RemoveOreReq)(nil), "apiserver.v2.RemoveOreReq")
}

func init() { proto.RegisterFile("ore.proto", fileDescriptor_34de32dc20aad561) }

var fileDescriptor_34de32dc20aad561 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0x36, 0xb5, 0xc9, 0xbe, 0xe6, 0xa0, 0x03, 0xb6, 0x31, 0x96, 0xb4, 0x2c, 0x45, 0x12,
	0x4a, 0x76, 0x21, 0xf5, 0x20, 0x95, 0x12, 0x9a, 0x2a, 0xa2, 0x50, 0x0a, 0x53, 0xbc, 0x54, 0x2c,
	0x4c, 0x37, 0x2f, 0x71, 0x35, 0xbb, 0xb3, 0xce, 0xce, 0x6e, 0x9b, 0xd2, 0xbb, 0xe0, 0xc9, 0x93,
	0x9f, 0xc1, 0x8f, 0xd3, 0xa3, 0x27, 0x41, 0x7b, 0xf1, 0x33, 0xd4, 0x8b, 0xec, 0xec, 0x76, 0xbb,
	0xf9, 0x73, 0x11, 0x0a, 0xde, 0xde, 0x9f, 0xdf, 0xef, 0xfd, 0xde, 0x7b, 0xc3, 0x3c, 0xd0, 0xb9,
	0x40, 0xd3, 0x17, 0x5c, 0x72, 0x52, 0x61, 0xbe, 0x13, 0xa0, 0x88, 0x50, 0x98, 0x51, 0xbb, 0xd6,
	0x1a, 0x38, 0xf2, 0x5d, 0x78, 0x6c, 0xda, 0xdc, 0xb5, 0x06, 0x7c, 0xc0, 0x2d, 0x05, 0x3a, 0x0e,
	0xfb, 0xca, 0x53, 0x8e, 0xb2, 0x12, 0x72, 0x6d, 0x27, 0x07, 0x47, 0x2f, 0xe2, 0x23, 0x5f, 0xf0,
	0xd3, 0x51, 0x42, 0xb2, 0x5b, 0x03, 0xf4, 0x5a, 0x11, 0x1b, 0x3a, 0x3d, 0x26, 0xd1, 0x9a, 0x32,
	0xd2, 0x12, 0x2b, 0x03, 0xce, 0x07, 0x43, 0xbc, 0x11, 0x0a, 0xa4, 0x08, 0x6d, 0x99, 0x66, 0x1f,
	0x4e, 0x66, 0xd1, 0xf5, 0xe5, 0x28, 0x4d, 0x82, 0x8b, 0x92, 0x25, 0xb6, 0xf1, 0x1e, 0x8a, 0xfb,
	0x02, 0xc9, 0x13, 0x98, 0x8f, 0x83, 0x55, 0x6d, 0x4d, 0x6b, 0x2c, 0xb6, 0x97, 0xcc, 0xfc, 0x70,
	0xe6, 0x1e, 0x4a, 0xd6, 0x63, 0x92, 0x75, 0x2b, 0x57, 0xdd, 0x3b, 0x9f, 0xb5, 0xb9, 0xb2, 0x76,
	0xf1, 0x63, 0x55, 0xa3, 0x8a, 0x41, 0x9a, 0x30, 0x1f, 0xf8, 0x68, 0x57, 0xe7, 0x14, 0xf3, 0xfe,
	0x38, 0x73, 0x5f, 0xe0, 0x81, 0x8f, 0x36, 0x55, 0x10, 0x83, 0x43, 0x29, 0x0d, 0x90, 0x4d, 0x28,
	0x87, 0x01, 0x8a, 0x67, 0x2c, 0xd3, 0x5c, 0x36, 0x93, 0x96, 0xcd, 0xeb, 0x96, 0xcd, 0x03, 0x35,
	0x10, 0xcd, 0x80, 0xc4, 0x82, 0x92, 0x60, 0x27, 0x2f, 0xbd, 0x3e, 0x9f, 0xad, 0x46, 0x93, 0x24,
	0xbd, 0x46, 0x19, 0x9f, 0x34, 0x28, 0xa5, 0x41, 0xb2, 0x0d, 0x95, 0x38, 0x2c, 0xd1, 0x8d, 0xdd,
	0xa0, 0xaa, 0xad, 0x15, 0x1b, 0x8b, 0xed, 0x07, 0xd3, 0x15, 0x52, 0x04, 0x1d, 0x83, 0x93, 0x6d,
	0xd0, 0x23, 0x3e, 0x0c, 0x5d, 0xa4, 0xd8, 0x4f, 0xd5, 0x57, 0x27, 0xb8, 0x18, 0xf0, 0x50, 0xd8,
	0x31, 0x00, 0x05, 0x7a, 0x36, 0xd2, 0x1b, 0x86, 0xf1, 0x14, 0x16, 0x73, 0xb5, 0xc9, 0x5d, 0x28,
	0x7e, 0xc0, 0x91, 0x9a, 0x5c, 0xa7, 0xb1, 0x49, 0x6a, 0x50, 0xee, 0x3b, 0x43, 0x3c, 0x70, 0xce,
	0x50, 0x95, 0x2f, 0xd2, 0xcc, 0x37, 0xbe, 0x6a, 0x50, 0xd9, 0x15, 0xc8, 0x24, 0xee, 0x0b, 0xa4,
	0xf8, 0x91, 0x6c, 0xc3, 0xbc, 0xc7, 0x5c, 0x4c, 0xf8, 0xdd, 0xe6, 0x55, 0xf7, 0x91, 0x58, 0xaf,
	0xfe, 0x2e, 0xb5, 0x57, 0x1b, 0x47, 0x96, 0x65, 0x9e, 0x1f, 0x59, 0xe7, 0x47, 0x6f, 0x58, 0xeb,
	0x6c, 0xa7, 0x75, 0xf8, 0x76, 0xa3, 0xd9, 0xd9, 0xea, 0x58, 0xe6, 0x46, 0xc3, 0x5a, 0x6f, 0x76,
	0xa8, 0xa2, 0xfd, 0xc3, 0x93, 0x91, 0x15, 0xd0, 0x79, 0x84, 0xe2, 0x44, 0x38, 0x12, 0xab, 0xc5,
	0x35, 0xad, 0x51, 0xa6, 0x37, 0x01, 0xe3, 0x15, 0xe8, 0x2f, 0x50, 0xde, 0x4a, 0x53, 0xc6, 0x29,
	0x54, 0x5e, 0xfb, 0xbd, 0xff, 0x30, 0xa3, 0xb1, 0x07, 0x15, 0x8a, 0x2e, 0x8f, 0x6e, 0x47, 0xb9,
	0xfd, 0x47, 0x03, 0x88, 0x05, 0x50, 0x44, 0x8e, 0x8d, 0x64, 0x0b, 0xf4, 0xec, 0xed, 0x48, 0x6d,
	0xbc, 0x8f, 0xfc, 0xa3, 0xd6, 0xee, 0x4d, 0xf5, 0x48, 0x1e, 0xc3, 0x42, 0xb2, 0x5f, 0xb2, 0x3c,
	0x9e, 0xcc, 0xb6, 0x3e, 0x8b, 0xb5, 0x05, 0x7a, 0xb6, 0xc9, 0x49, 0xc5, 0xfc, 0x8a, 0x67, 0x71,
	0x3b, 0xa0, 0x67, 0xbb, 0x98, 0xe4, 0xe6, 0x97, 0x54, 0x5b, 0x9a, 0xfa, 0xae, 0xcf, 0xe3, 0x0b,
	0xd3, 0xdd, 0xbd, 0xf8, 0x59, 0x2f, 0x7c, 0xfb, 0x55, 0xd7, 0xbe, 0x5c, 0xd6, 0x0b, 0x17, 0x97,
	0xf5, 0xc2, 0xf7, 0xcb, 0x7a, 0xe1, 0x30, 0x3e, 0x8f, 0x66, 0x10, 0xfa, 0x02, 0x5d, 0xc7, 0xeb,
	0x99, 0x8e, 0xd7, 0x57, 0x17, 0xb2, 0x17, 0xda, 0x32, 0xb0, 0x98, 0xe4, 0xae, 0x75, 0x7d, 0x22,
	0x2d, 0xe6, 0x3b, 0xc7, 0x0b, 0xca, 0xdb, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x54, 0x7b,
	0xcf, 0x6f, 0x05, 0x00, 0x00,
}

func (this *Ore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ore)
	if !ok {
		that2, ok := that.(Ore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *OreSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OreSpec)
	if !ok {
		that2, ok := that.(OreSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserData.Equal(that1.UserData) {
		return false
	}
	if !this.RawInfo.Equal(that1.RawInfo) {
		return false
	}
	return true
}
func (this *RawInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RawInfo)
	if !ok {
		that2, ok := that.(RawInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RawItemInfos) != len(that1.RawItemInfos) {
		return false
	}
	for i := range this.RawItemInfos {
		if !this.RawItemInfos[i].Equal(that1.RawItemInfos[i]) {
			return false
		}
	}
	if !this.VolumeRef.Equal(that1.VolumeRef) {
		return false
	}
	return true
}
func (this *RawItemInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RawItemInfo)
	if !ok {
		that2, ok := that.(RawItemInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.FileSize != that1.FileSize {
		return false
	}
	return true
}
func (this *CreateOreReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOreReq)
	if !ok {
		that2, ok := that.(CreateOreReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.Overwrite != that1.Overwrite {
		return false
	}
	return true
}
func (this *GetOreReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOreReq)
	if !ok {
		that2, ok := that.(GetOreReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *UpdateOreReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOreReq)
	if !ok {
		that2, ok := that.(UpdateOreReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *RemoveOreReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveOreReq)
	if !ok {
		that2, ok := that.(RemoveOreReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OreServiceClient is the client API for OreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OreServiceClient interface {
	CreateOre(ctx context.Context, in *CreateOreReq, opts ...grpc.CallOption) (*Ore, error)
	GetOre(ctx context.Context, in *GetOreReq, opts ...grpc.CallOption) (*Ore, error)
	UpdateOre(ctx context.Context, in *UpdateOreReq, opts ...grpc.CallOption) (*Ore, error)
	RemoveOre(ctx context.Context, in *RemoveOreReq, opts ...grpc.CallOption) (*types.Empty, error)
}

type oreServiceClient struct {
	cc *grpc.ClientConn
}

func NewOreServiceClient(cc *grpc.ClientConn) OreServiceClient {
	return &oreServiceClient{cc}
}

func (c *oreServiceClient) CreateOre(ctx context.Context, in *CreateOreReq, opts ...grpc.CallOption) (*Ore, error) {
	out := new(Ore)
	err := c.cc.Invoke(ctx, "/apiserver.v2.OreService/CreateOre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oreServiceClient) GetOre(ctx context.Context, in *GetOreReq, opts ...grpc.CallOption) (*Ore, error) {
	out := new(Ore)
	err := c.cc.Invoke(ctx, "/apiserver.v2.OreService/GetOre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oreServiceClient) UpdateOre(ctx context.Context, in *UpdateOreReq, opts ...grpc.CallOption) (*Ore, error) {
	out := new(Ore)
	err := c.cc.Invoke(ctx, "/apiserver.v2.OreService/UpdateOre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oreServiceClient) RemoveOre(ctx context.Context, in *RemoveOreReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/apiserver.v2.OreService/RemoveOre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OreServiceServer is the server API for OreService service.
type OreServiceServer interface {
	CreateOre(context.Context, *CreateOreReq) (*Ore, error)
	GetOre(context.Context, *GetOreReq) (*Ore, error)
	UpdateOre(context.Context, *UpdateOreReq) (*Ore, error)
	RemoveOre(context.Context, *RemoveOreReq) (*types.Empty, error)
}

// UnimplementedOreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOreServiceServer struct {
}

func (*UnimplementedOreServiceServer) CreateOre(ctx context.Context, req *CreateOreReq) (*Ore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOre not implemented")
}
func (*UnimplementedOreServiceServer) GetOre(ctx context.Context, req *GetOreReq) (*Ore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOre not implemented")
}
func (*UnimplementedOreServiceServer) UpdateOre(ctx context.Context, req *UpdateOreReq) (*Ore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOre not implemented")
}
func (*UnimplementedOreServiceServer) RemoveOre(ctx context.Context, req *RemoveOreReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOre not implemented")
}

func RegisterOreServiceServer(s *grpc.Server, srv OreServiceServer) {
	s.RegisterService(&_OreService_serviceDesc, srv)
}

func _OreService_CreateOre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OreServiceServer).CreateOre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.OreService/CreateOre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OreServiceServer).CreateOre(ctx, req.(*CreateOreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OreService_GetOre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OreServiceServer).GetOre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.OreService/GetOre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OreServiceServer).GetOre(ctx, req.(*GetOreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OreService_UpdateOre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OreServiceServer).UpdateOre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.OreService/UpdateOre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OreServiceServer).UpdateOre(ctx, req.(*UpdateOreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OreService_RemoveOre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OreServiceServer).RemoveOre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.OreService/RemoveOre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OreServiceServer).RemoveOre(ctx, req.(*RemoveOreReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.v2.OreService",
	HandlerType: (*OreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOre",
			Handler:    _OreService_CreateOre_Handler,
		},
		{
			MethodName: "GetOre",
			Handler:    _OreService_GetOre_Handler,
		},
		{
			MethodName: "UpdateOre",
			Handler:    _OreService_UpdateOre_Handler,
		},
		{
			MethodName: "RemoveOre",
			Handler:    _OreService_RemoveOre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ore.proto",
}
