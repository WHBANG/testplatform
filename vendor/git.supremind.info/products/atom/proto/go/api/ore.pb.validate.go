// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ore.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _ore_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Ore with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Ore) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return OreValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// OreValidationError is the validation error returned by Ore.Validate if the
// designated constraints aren't met.
type OreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OreValidationError) ErrorName() string { return "OreValidationError" }

// Error satisfies the builtin error interface
func (e OreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOre.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OreValidationError{}

// Validate checks the field values on OreSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OreSpec) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetUserData()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return OreSpecValidationError{
					field:  "UserData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetRawInfo()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return OreSpecValidationError{
					field:  "RawInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// OreSpecValidationError is the validation error returned by OreSpec.Validate
// if the designated constraints aren't met.
type OreSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OreSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OreSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OreSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OreSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OreSpecValidationError) ErrorName() string { return "OreSpecValidationError" }

// Error satisfies the builtin error interface
func (e OreSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOreSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OreSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OreSpecValidationError{}

// Validate checks the field values on RawInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RawInfo) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRawItemInfos() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RawInfoValidationError{
						field:  fmt.Sprintf("RawItemInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetVolumeRef()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RawInfoValidationError{
					field:  "VolumeRef",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// RawInfoValidationError is the validation error returned by RawInfo.Validate
// if the designated constraints aren't met.
type RawInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawInfoValidationError) ErrorName() string { return "RawInfoValidationError" }

// Error satisfies the builtin error interface
func (e RawInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawInfoValidationError{}

// Validate checks the field values on RawItemInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RawItemInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for FileSize

	return nil
}

// RawItemInfoValidationError is the validation error returned by
// RawItemInfo.Validate if the designated constraints aren't met.
type RawItemInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawItemInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawItemInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawItemInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawItemInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawItemInfoValidationError) ErrorName() string { return "RawItemInfoValidationError" }

// Error satisfies the builtin error interface
func (e RawItemInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawItemInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawItemInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawItemInfoValidationError{}

// Validate checks the field values on CreateOreReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateOreReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 1000 {
		return CreateOreReqValidationError{
			field:  "Name",
			reason: "value length must be at most 1000 runes",
		}
	}

	if !_CreateOreReq_Name_Pattern.MatchString(m.GetName()) {
		return CreateOreReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?\"",
		}
	}

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateOreReqValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Overwrite

	return nil
}

// CreateOreReqValidationError is the validation error returned by
// CreateOreReq.Validate if the designated constraints aren't met.
type CreateOreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOreReqValidationError) ErrorName() string { return "CreateOreReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateOreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOreReqValidationError{}

var _CreateOreReq_Name_Pattern = regexp.MustCompile("(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?")

// Validate checks the field values on GetOreReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetOreReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 1000 {
		return GetOreReqValidationError{
			field:  "Name",
			reason: "value length must be at most 1000 runes",
		}
	}

	if !_GetOreReq_Name_Pattern.MatchString(m.GetName()) {
		return GetOreReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?\"",
		}
	}

	return nil
}

// GetOreReqValidationError is the validation error returned by
// GetOreReq.Validate if the designated constraints aren't met.
type GetOreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOreReqValidationError) ErrorName() string { return "GetOreReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOreReqValidationError{}

var _GetOreReq_Name_Pattern = regexp.MustCompile("(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?")

// Validate checks the field values on UpdateOreReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateOreReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 1000 {
		return UpdateOreReqValidationError{
			field:  "Name",
			reason: "value length must be at most 1000 runes",
		}
	}

	if !_UpdateOreReq_Name_Pattern.MatchString(m.GetName()) {
		return UpdateOreReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?\"",
		}
	}

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UpdateOreReqValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// UpdateOreReqValidationError is the validation error returned by
// UpdateOreReq.Validate if the designated constraints aren't met.
type UpdateOreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOreReqValidationError) ErrorName() string { return "UpdateOreReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateOreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOreReqValidationError{}

var _UpdateOreReq_Name_Pattern = regexp.MustCompile("(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?")

// Validate checks the field values on RemoveOreReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RemoveOreReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 1000 {
		return RemoveOreReqValidationError{
			field:  "Name",
			reason: "value length must be at most 1000 runes",
		}
	}

	if !_RemoveOreReq_Name_Pattern.MatchString(m.GetName()) {
		return RemoveOreReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?\"",
		}
	}

	return nil
}

// RemoveOreReqValidationError is the validation error returned by
// RemoveOreReq.Validate if the designated constraints aren't met.
type RemoveOreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOreReqValidationError) ErrorName() string { return "RemoveOreReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveOreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOreReqValidationError{}

var _RemoveOreReq_Name_Pattern = regexp.MustCompile("(^//.|^/|^[a-zA-Z]+)?:?/.+(/$)?")
