// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: package.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Package struct {
	*Metadata `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta,omitempty" bson:",inline"`
	Spec      *PackageSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty" bson:"spec"`
	Status    *PackageStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" bson:"status,omitempty"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}
func (*Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{0}
}
func (m *Package) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Package.Unmarshal(m, b)
}
func (m *Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Package.Marshal(b, m, deterministic)
}
func (m *Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Package.Merge(m, src)
}
func (m *Package) XXX_Size() int {
	return xxx_messageInfo_Package.Size(m)
}
func (m *Package) XXX_DiscardUnknown() {
	xxx_messageInfo_Package.DiscardUnknown(m)
}

var xxx_messageInfo_Package proto.InternalMessageInfo

func (m *Package) GetSpec() *PackageSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Package) GetStatus() *PackageStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type PackageSpec struct {
	CpuCores  int32    `protobuf:"varint,1,opt,name=cpuCores,proto3" json:"cpuCores,omitempty" bson:"cpuCores,omitempty"`
	Memory    int64    `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Gpus      int32    `protobuf:"varint,3,opt,name=gpus,proto3" json:"gpus,omitempty"`
	GpuModels []string `protobuf:"bytes,4,rep,name=gpuModels,proto3" json:"gpuModels,omitempty" bson:"gpuModels,omitempty"`
	Rdma      bool     `protobuf:"varint,5,opt,name=rdma,proto3" json:"rdma,omitempty"`
}

func (m *PackageSpec) Reset()         { *m = PackageSpec{} }
func (m *PackageSpec) String() string { return proto.CompactTextString(m) }
func (*PackageSpec) ProtoMessage()    {}
func (*PackageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{1}
}
func (m *PackageSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageSpec.Unmarshal(m, b)
}
func (m *PackageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageSpec.Marshal(b, m, deterministic)
}
func (m *PackageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageSpec.Merge(m, src)
}
func (m *PackageSpec) XXX_Size() int {
	return xxx_messageInfo_PackageSpec.Size(m)
}
func (m *PackageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PackageSpec proto.InternalMessageInfo

func (m *PackageSpec) GetCpuCores() int32 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *PackageSpec) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *PackageSpec) GetGpus() int32 {
	if m != nil {
		return m.Gpus
	}
	return 0
}

func (m *PackageSpec) GetGpuModels() []string {
	if m != nil {
		return m.GpuModels
	}
	return nil
}

func (m *PackageSpec) GetRdma() bool {
	if m != nil {
		return m.Rdma
	}
	return false
}

type PackageStatus struct {
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty" bson:"available"`
}

func (m *PackageStatus) Reset()         { *m = PackageStatus{} }
func (m *PackageStatus) String() string { return proto.CompactTextString(m) }
func (*PackageStatus) ProtoMessage()    {}
func (*PackageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{2}
}
func (m *PackageStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageStatus.Unmarshal(m, b)
}
func (m *PackageStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageStatus.Marshal(b, m, deterministic)
}
func (m *PackageStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageStatus.Merge(m, src)
}
func (m *PackageStatus) XXX_Size() int {
	return xxx_messageInfo_PackageStatus.Size(m)
}
func (m *PackageStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PackageStatus proto.InternalMessageInfo

func (m *PackageStatus) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

type ListPackagesReq struct {
	Pager *PagerReq `protobuf:"bytes,1,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListPackagesReq) Reset()         { *m = ListPackagesReq{} }
func (m *ListPackagesReq) String() string { return proto.CompactTextString(m) }
func (*ListPackagesReq) ProtoMessage()    {}
func (*ListPackagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{3}
}
func (m *ListPackagesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPackagesReq.Unmarshal(m, b)
}
func (m *ListPackagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPackagesReq.Marshal(b, m, deterministic)
}
func (m *ListPackagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPackagesReq.Merge(m, src)
}
func (m *ListPackagesReq) XXX_Size() int {
	return xxx_messageInfo_ListPackagesReq.Size(m)
}
func (m *ListPackagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPackagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListPackagesReq proto.InternalMessageInfo

func (m *ListPackagesReq) GetPager() *PagerReq {
	if m != nil {
		return m.Pager
	}
	return nil
}

type ListPackagesRes struct {
	Packages []*Package `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
	Pager    *PagerRes  `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListPackagesRes) Reset()         { *m = ListPackagesRes{} }
func (m *ListPackagesRes) String() string { return proto.CompactTextString(m) }
func (*ListPackagesRes) ProtoMessage()    {}
func (*ListPackagesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{4}
}
func (m *ListPackagesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPackagesRes.Unmarshal(m, b)
}
func (m *ListPackagesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPackagesRes.Marshal(b, m, deterministic)
}
func (m *ListPackagesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPackagesRes.Merge(m, src)
}
func (m *ListPackagesRes) XXX_Size() int {
	return xxx_messageInfo_ListPackagesRes.Size(m)
}
func (m *ListPackagesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPackagesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListPackagesRes proto.InternalMessageInfo

func (m *ListPackagesRes) GetPackages() []*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *ListPackagesRes) GetPager() *PagerRes {
	if m != nil {
		return m.Pager
	}
	return nil
}

type GetPackageReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetPackageReq) Reset()         { *m = GetPackageReq{} }
func (m *GetPackageReq) String() string { return proto.CompactTextString(m) }
func (*GetPackageReq) ProtoMessage()    {}
func (*GetPackageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{5}
}
func (m *GetPackageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPackageReq.Unmarshal(m, b)
}
func (m *GetPackageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPackageReq.Marshal(b, m, deterministic)
}
func (m *GetPackageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPackageReq.Merge(m, src)
}
func (m *GetPackageReq) XXX_Size() int {
	return xxx_messageInfo_GetPackageReq.Size(m)
}
func (m *GetPackageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPackageReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPackageReq proto.InternalMessageInfo

func (m *GetPackageReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreatePackageReq struct {
	Package *Package `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
}

func (m *CreatePackageReq) Reset()         { *m = CreatePackageReq{} }
func (m *CreatePackageReq) String() string { return proto.CompactTextString(m) }
func (*CreatePackageReq) ProtoMessage()    {}
func (*CreatePackageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{6}
}
func (m *CreatePackageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePackageReq.Unmarshal(m, b)
}
func (m *CreatePackageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePackageReq.Marshal(b, m, deterministic)
}
func (m *CreatePackageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePackageReq.Merge(m, src)
}
func (m *CreatePackageReq) XXX_Size() int {
	return xxx_messageInfo_CreatePackageReq.Size(m)
}
func (m *CreatePackageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePackageReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePackageReq proto.InternalMessageInfo

func (m *CreatePackageReq) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type UpdatePackageReq struct {
	Package *Package `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
}

func (m *UpdatePackageReq) Reset()         { *m = UpdatePackageReq{} }
func (m *UpdatePackageReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePackageReq) ProtoMessage()    {}
func (*UpdatePackageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{7}
}
func (m *UpdatePackageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePackageReq.Unmarshal(m, b)
}
func (m *UpdatePackageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePackageReq.Marshal(b, m, deterministic)
}
func (m *UpdatePackageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePackageReq.Merge(m, src)
}
func (m *UpdatePackageReq) XXX_Size() int {
	return xxx_messageInfo_UpdatePackageReq.Size(m)
}
func (m *UpdatePackageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePackageReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePackageReq proto.InternalMessageInfo

func (m *UpdatePackageReq) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type RemovePackageReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RemovePackageReq) Reset()         { *m = RemovePackageReq{} }
func (m *RemovePackageReq) String() string { return proto.CompactTextString(m) }
func (*RemovePackageReq) ProtoMessage()    {}
func (*RemovePackageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{8}
}
func (m *RemovePackageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePackageReq.Unmarshal(m, b)
}
func (m *RemovePackageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePackageReq.Marshal(b, m, deterministic)
}
func (m *RemovePackageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePackageReq.Merge(m, src)
}
func (m *RemovePackageReq) XXX_Size() int {
	return xxx_messageInfo_RemovePackageReq.Size(m)
}
func (m *RemovePackageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePackageReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePackageReq proto.InternalMessageInfo

func (m *RemovePackageReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Package)(nil), "apiserver.v2.Package")
	proto.RegisterType((*PackageSpec)(nil), "apiserver.v2.PackageSpec")
	proto.RegisterType((*PackageStatus)(nil), "apiserver.v2.PackageStatus")
	proto.RegisterType((*ListPackagesReq)(nil), "apiserver.v2.ListPackagesReq")
	proto.RegisterType((*ListPackagesRes)(nil), "apiserver.v2.ListPackagesRes")
	proto.RegisterType((*GetPackageReq)(nil), "apiserver.v2.GetPackageReq")
	proto.RegisterType((*CreatePackageReq)(nil), "apiserver.v2.CreatePackageReq")
	proto.RegisterType((*UpdatePackageReq)(nil), "apiserver.v2.UpdatePackageReq")
	proto.RegisterType((*RemovePackageReq)(nil), "apiserver.v2.RemovePackageReq")
}

func init() { proto.RegisterFile("package.proto", fileDescriptor_ae8103ff0e06fb71) }

var fileDescriptor_ae8103ff0e06fb71 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0x7c, 0xb4, 0xc9, 0xa6, 0x69, 0xa3, 0x15, 0x94, 0x34, 0x51, 0x9d, 0xca, 0xa7,
	0x1c, 0x52, 0x5b, 0x84, 0x13, 0x08, 0xf1, 0xe1, 0x08, 0x2a, 0xa1, 0x56, 0xaa, 0x8c, 0xb8, 0x70,
	0xdb, 0x38, 0x53, 0x63, 0x11, 0x7b, 0xb7, 0xde, 0x4d, 0x44, 0x5e, 0x81, 0x13, 0x8f, 0xc1, 0x93,
	0x70, 0xee, 0x91, 0x53, 0x24, 0xe8, 0x81, 0x7b, 0x6e, 0xf4, 0x84, 0xbc, 0xb6, 0x13, 0xdb, 0xa4,
	0x15, 0x12, 0xb7, 0x59, 0xcf, 0xcc, 0xef, 0x3f, 0x1f, 0xf2, 0xa0, 0x06, 0x23, 0xf6, 0x47, 0xe2,
	0x80, 0xce, 0x02, 0x2a, 0x28, 0xde, 0x21, 0xcc, 0xe5, 0x10, 0xcc, 0x20, 0xd0, 0x67, 0x83, 0xf6,
	0xb1, 0xe3, 0x8a, 0x0f, 0xd3, 0x91, 0x6e, 0x53, 0xcf, 0x70, 0xa8, 0x43, 0x0d, 0x19, 0x34, 0x9a,
	0x5e, 0xc8, 0x97, 0x7c, 0x48, 0x2b, 0x4a, 0x6e, 0xbf, 0x4c, 0x85, 0x83, 0x3f, 0xa3, 0x73, 0x16,
	0xd0, 0x4f, 0xf3, 0x28, 0xc9, 0x3e, 0x76, 0xc0, 0x3f, 0x9e, 0x91, 0x89, 0x3b, 0x26, 0x02, 0x8c,
	0xbf, 0x8c, 0x18, 0xd1, 0x71, 0x28, 0x75, 0x26, 0xb0, 0x16, 0x02, 0x8f, 0x89, 0x79, 0xec, 0x44,
	0x1e, 0x08, 0x12, 0xd9, 0xda, 0x2f, 0x05, 0x6d, 0x9f, 0x47, 0xa5, 0xe3, 0x37, 0xa8, 0x1c, 0x7a,
	0x5a, 0xca, 0x91, 0xd2, 0xab, 0x0f, 0xf6, 0xf5, 0x74, 0x0f, 0xfa, 0x19, 0x08, 0x32, 0x26, 0x82,
	0x98, 0xea, 0x8d, 0x59, 0xf9, 0xac, 0x14, 0xab, 0xca, 0xd5, 0xa2, 0xab, 0x2c, 0x17, 0xdd, 0xdd,
	0x11, 0xa7, 0xfe, 0x13, 0xad, 0xef, 0xfa, 0x13, 0xd7, 0x07, 0xcd, 0x92, 0x0c, 0xfc, 0x0c, 0x95,
	0x39, 0x03, 0xbb, 0x55, 0x94, 0xac, 0x83, 0x2c, 0x2b, 0x16, 0x7c, 0xcb, 0xc0, 0x36, 0xf7, 0x96,
	0x8b, 0x6e, 0x3d, 0x42, 0x84, 0x09, 0x9a, 0x25, 0xf3, 0xf0, 0x39, 0xda, 0xe2, 0x82, 0x88, 0x29,
	0x6f, 0x95, 0x24, 0xa1, 0xb3, 0x99, 0x20, 0x43, 0xcc, 0xce, 0x72, 0xd1, 0x7d, 0x10, 0x33, 0xe4,
	0x97, 0x3e, 0xf5, 0x5c, 0x21, 0x5b, 0xd6, 0xac, 0x98, 0xa3, 0x7d, 0x53, 0x50, 0x3d, 0x25, 0x8c,
	0x1f, 0xa3, 0xaa, 0xcd, 0xa6, 0x43, 0x1a, 0x00, 0x97, 0x1d, 0x57, 0xcc, 0xc3, 0xe5, 0xa2, 0x7b,
	0x10, 0x61, 0x12, 0x4f, 0x1a, 0xb4, 0x0a, 0xc7, 0xfb, 0x68, 0xcb, 0x03, 0x8f, 0x06, 0x73, 0xd9,
	0x5e, 0xc9, 0x8a, 0x5f, 0x18, 0xa3, 0xb2, 0xc3, 0xe2, 0x92, 0x2b, 0x96, 0xb4, 0xf1, 0x53, 0x54,
	0x73, 0xd8, 0xf4, 0x8c, 0x8e, 0x61, 0xc2, 0x5b, 0xe5, 0xa3, 0x52, 0xaf, 0x66, 0xaa, 0xcb, 0x45,
	0xb7, 0x1d, 0xe9, 0xac, 0x5c, 0x69, 0xa1, 0x75, 0x42, 0x48, 0x0c, 0xc6, 0x1e, 0x69, 0x55, 0x8e,
	0x94, 0x5e, 0xd5, 0x92, 0xb6, 0x36, 0x44, 0x8d, 0x4c, 0xfb, 0x78, 0x80, 0x6a, 0x64, 0x46, 0xdc,
	0x09, 0x19, 0x4d, 0x40, 0xb6, 0x52, 0x35, 0xef, 0x2d, 0x17, 0xdd, 0x66, 0x24, 0xb1, 0x72, 0x69,
	0xd6, 0x3a, 0x4c, 0x7b, 0x8e, 0xf6, 0x4e, 0x5d, 0x2e, 0x62, 0x10, 0xb7, 0xe0, 0x12, 0xf7, 0x51,
	0x85, 0x11, 0x07, 0x82, 0xcd, 0xfb, 0x3f, 0x0f, 0x5d, 0x16, 0x5c, 0x5a, 0x51, 0x90, 0x16, 0xe4,
	0x01, 0x1c, 0x3f, 0x44, 0xd5, 0xf8, 0x2f, 0x08, 0x27, 0x5a, 0xea, 0xd5, 0x07, 0xf7, 0x37, 0x6e,
	0xcd, 0x5a, 0x85, 0xad, 0x35, 0x8b, 0x77, 0x68, 0xf2, 0x44, 0xb3, 0x8f, 0x1a, 0x27, 0x90, 0x48,
	0x86, 0x25, 0x77, 0x50, 0xd9, 0x27, 0x5e, 0xd4, 0x74, 0xcd, 0xdc, 0xbe, 0x31, 0xcb, 0x41, 0xb1,
	0xa9, 0x58, 0xf2, 0xa3, 0x36, 0x44, 0xcd, 0x61, 0x00, 0x44, 0x40, 0x2a, 0xc1, 0x40, 0xdb, 0xb1,
	0x76, 0xdc, 0xe5, 0x2d, 0x15, 0x26, 0x51, 0x21, 0xe4, 0x1d, 0x1b, 0xff, 0x27, 0xc4, 0x40, 0x4d,
	0x0b, 0x3c, 0x3a, 0x83, 0x7f, 0x2c, 0x7d, 0xf0, 0xbb, 0x88, 0x76, 0x93, 0x1d, 0x43, 0x30, 0x73,
	0x6d, 0xc0, 0xa7, 0x68, 0x27, 0x3d, 0x6f, 0x7c, 0x98, 0xd5, 0xcc, 0x2d, 0xb3, 0x7d, 0xa7, 0x9b,
	0xe3, 0x17, 0x08, 0xad, 0x27, 0x89, 0x73, 0x3f, 0x57, 0x66, 0xc6, 0xed, 0xcd, 0xcd, 0xe1, 0xd7,
	0xa8, 0x91, 0x99, 0x2e, 0x56, 0xb3, 0x71, 0xf9, 0xd1, 0xdf, 0xc1, 0xc9, 0x0c, 0x38, 0xcf, 0xc9,
	0x4f, 0xff, 0x36, 0xce, 0x09, 0x6a, 0x64, 0x66, 0x9c, 0xe7, 0xe4, 0x17, 0xd0, 0xde, 0xd7, 0xa3,
	0x1b, 0xa9, 0x27, 0x37, 0x52, 0x7f, 0x15, 0xfe, 0x7e, 0xe6, 0xf0, 0xea, 0x87, 0x5a, 0xf8, 0xfa,
	0x53, 0x55, 0xbe, 0x5c, 0xab, 0x85, 0xab, 0x6b, 0xb5, 0xf0, 0xfd, 0x5a, 0x2d, 0xbc, 0x0f, 0x4f,
	0xb8, 0xce, 0xa7, 0x2c, 0x00, 0xcf, 0xf5, 0xc7, 0xba, 0xeb, 0x5f, 0xc8, 0x2b, 0x3e, 0x9e, 0xda,
	0x82, 0x1b, 0x44, 0x50, 0xcf, 0x48, 0xce, 0xb8, 0x41, 0x98, 0x3b, 0xda, 0x92, 0xaf, 0x47, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xe5, 0xa7, 0x6f, 0x17, 0x06, 0x00, 0x00,
}

func (this *Package) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Package)
	if !ok {
		that2, ok := that.(Package)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *PackageSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PackageSpec)
	if !ok {
		that2, ok := that.(PackageSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CpuCores != that1.CpuCores {
		return false
	}
	if this.Memory != that1.Memory {
		return false
	}
	if this.Gpus != that1.Gpus {
		return false
	}
	if len(this.GpuModels) != len(that1.GpuModels) {
		return false
	}
	for i := range this.GpuModels {
		if this.GpuModels[i] != that1.GpuModels[i] {
			return false
		}
	}
	if this.Rdma != that1.Rdma {
		return false
	}
	return true
}
func (this *PackageStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PackageStatus)
	if !ok {
		that2, ok := that.(PackageStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Available != that1.Available {
		return false
	}
	return true
}
func (this *ListPackagesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPackagesReq)
	if !ok {
		that2, ok := that.(ListPackagesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *ListPackagesRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListPackagesRes)
	if !ok {
		that2, ok := that.(ListPackagesRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Packages) != len(that1.Packages) {
		return false
	}
	for i := range this.Packages {
		if !this.Packages[i].Equal(that1.Packages[i]) {
			return false
		}
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *GetPackageReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPackageReq)
	if !ok {
		that2, ok := that.(GetPackageReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreatePackageReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePackageReq)
	if !ok {
		that2, ok := that.(CreatePackageReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Package.Equal(that1.Package) {
		return false
	}
	return true
}
func (this *UpdatePackageReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePackageReq)
	if !ok {
		that2, ok := that.(UpdatePackageReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Package.Equal(that1.Package) {
		return false
	}
	return true
}
func (this *RemovePackageReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemovePackageReq)
	if !ok {
		that2, ok := that.(RemovePackageReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PackageServiceClient is the client API for PackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PackageServiceClient interface {
	ListPackages(ctx context.Context, in *ListPackagesReq, opts ...grpc.CallOption) (*ListPackagesRes, error)
	GetPackage(ctx context.Context, in *GetPackageReq, opts ...grpc.CallOption) (*Package, error)
	CreatePackage(ctx context.Context, in *CreatePackageReq, opts ...grpc.CallOption) (*Package, error)
	UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*Package, error)
	RemovePackage(ctx context.Context, in *RemovePackageReq, opts ...grpc.CallOption) (*types.Empty, error)
}

type packageServiceClient struct {
	cc *grpc.ClientConn
}

func NewPackageServiceClient(cc *grpc.ClientConn) PackageServiceClient {
	return &packageServiceClient{cc}
}

func (c *packageServiceClient) ListPackages(ctx context.Context, in *ListPackagesReq, opts ...grpc.CallOption) (*ListPackagesRes, error) {
	out := new(ListPackagesRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.PackageService/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetPackage(ctx context.Context, in *GetPackageReq, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/apiserver.v2.PackageService/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) CreatePackage(ctx context.Context, in *CreatePackageReq, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/apiserver.v2.PackageService/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/apiserver.v2.PackageService/UpdatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) RemovePackage(ctx context.Context, in *RemovePackageReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/apiserver.v2.PackageService/RemovePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServiceServer is the server API for PackageService service.
type PackageServiceServer interface {
	ListPackages(context.Context, *ListPackagesReq) (*ListPackagesRes, error)
	GetPackage(context.Context, *GetPackageReq) (*Package, error)
	CreatePackage(context.Context, *CreatePackageReq) (*Package, error)
	UpdatePackage(context.Context, *UpdatePackageReq) (*Package, error)
	RemovePackage(context.Context, *RemovePackageReq) (*types.Empty, error)
}

// UnimplementedPackageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPackageServiceServer struct {
}

func (*UnimplementedPackageServiceServer) ListPackages(ctx context.Context, req *ListPackagesReq) (*ListPackagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (*UnimplementedPackageServiceServer) GetPackage(ctx context.Context, req *GetPackageReq) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (*UnimplementedPackageServiceServer) CreatePackage(ctx context.Context, req *CreatePackageReq) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (*UnimplementedPackageServiceServer) UpdatePackage(ctx context.Context, req *UpdatePackageReq) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (*UnimplementedPackageServiceServer) RemovePackage(ctx context.Context, req *RemovePackageReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePackage not implemented")
}

func RegisterPackageServiceServer(s *grpc.Server, srv PackageServiceServer) {
	s.RegisterService(&_PackageService_serviceDesc, srv)
}

func _PackageService_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.PackageService/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ListPackages(ctx, req.(*ListPackagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.PackageService/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackage(ctx, req.(*GetPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.PackageService/CreatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).CreatePackage(ctx, req.(*CreatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.PackageService/UpdatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).UpdatePackage(ctx, req.(*UpdatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_RemovePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).RemovePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.PackageService/RemovePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).RemovePackage(ctx, req.(*RemovePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PackageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.v2.PackageService",
	HandlerType: (*PackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPackages",
			Handler:    _PackageService_ListPackages_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _PackageService_GetPackage_Handler,
		},
		{
			MethodName: "CreatePackage",
			Handler:    _PackageService_CreatePackage_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _PackageService_UpdatePackage_Handler,
		},
		{
			MethodName: "RemovePackage",
			Handler:    _PackageService_RemovePackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "package.proto",
}
