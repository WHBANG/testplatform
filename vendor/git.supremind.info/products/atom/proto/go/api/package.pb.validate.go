// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: package.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _package_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Package) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return PackageValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return PackageValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}

// Validate checks the field values on PackageSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PackageSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CpuCores

	// no validation rules for Memory

	// no validation rules for Gpus

	// no validation rules for Rdma

	return nil
}

// PackageSpecValidationError is the validation error returned by
// PackageSpec.Validate if the designated constraints aren't met.
type PackageSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageSpecValidationError) ErrorName() string { return "PackageSpecValidationError" }

// Error satisfies the builtin error interface
func (e PackageSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackageSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageSpecValidationError{}

// Validate checks the field values on PackageStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PackageStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Available

	return nil
}

// PackageStatusValidationError is the validation error returned by
// PackageStatus.Validate if the designated constraints aren't met.
type PackageStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageStatusValidationError) ErrorName() string { return "PackageStatusValidationError" }

// Error satisfies the builtin error interface
func (e PackageStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackageStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageStatusValidationError{}

// Validate checks the field values on ListPackagesReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPackagesReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListPackagesReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListPackagesReqValidationError is the validation error returned by
// ListPackagesReq.Validate if the designated constraints aren't met.
type ListPackagesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackagesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackagesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackagesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackagesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackagesReqValidationError) ErrorName() string { return "ListPackagesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListPackagesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackagesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackagesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackagesReqValidationError{}

// Validate checks the field values on ListPackagesRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPackagesRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPackages() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListPackagesResValidationError{
						field:  fmt.Sprintf("Packages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListPackagesResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListPackagesResValidationError is the validation error returned by
// ListPackagesRes.Validate if the designated constraints aren't met.
type ListPackagesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackagesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackagesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackagesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackagesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackagesResValidationError) ErrorName() string { return "ListPackagesResValidationError" }

// Error satisfies the builtin error interface
func (e ListPackagesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackagesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackagesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackagesResValidationError{}

// Validate checks the field values on GetPackageReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetPackageReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return GetPackageReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetPackageReqValidationError is the validation error returned by
// GetPackageReq.Validate if the designated constraints aren't met.
type GetPackageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackageReqValidationError) ErrorName() string { return "GetPackageReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPackageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackageReqValidationError{}

// Validate checks the field values on CreatePackageReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatePackageReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetPackage()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreatePackageReqValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreatePackageReqValidationError is the validation error returned by
// CreatePackageReq.Validate if the designated constraints aren't met.
type CreatePackageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackageReqValidationError) ErrorName() string { return "CreatePackageReqValidationError" }

// Error satisfies the builtin error interface
func (e CreatePackageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackageReqValidationError{}

// Validate checks the field values on UpdatePackageReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdatePackageReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetPackage()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UpdatePackageReqValidationError{
					field:  "Package",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// UpdatePackageReqValidationError is the validation error returned by
// UpdatePackageReq.Validate if the designated constraints aren't met.
type UpdatePackageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackageReqValidationError) ErrorName() string { return "UpdatePackageReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePackageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackageReqValidationError{}

// Validate checks the field values on RemovePackageReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemovePackageReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RemovePackageReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RemovePackageReqValidationError is the validation error returned by
// RemovePackageReq.Validate if the designated constraints aren't met.
type RemovePackageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePackageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePackageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePackageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePackageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePackageReqValidationError) ErrorName() string { return "RemovePackageReqValidationError" }

// Error satisfies the builtin error interface
func (e RemovePackageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePackageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePackageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePackageReqValidationError{}
