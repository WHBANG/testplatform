// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: profile.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _profile_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserProfile) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UserProfileValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UserProfileValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on UserProfileSpec with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserProfileSpec) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UserProfileSpecValidationError is the validation error returned by
// UserProfileSpec.Validate if the designated constraints aren't met.
type UserProfileSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileSpecValidationError) ErrorName() string { return "UserProfileSpecValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfileSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileSpecValidationError{}

// Validate checks the field values on UserProfileStatus with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserProfileStatus) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UserProfileStatusValidationError is the validation error returned by
// UserProfileStatus.Validate if the designated constraints aren't met.
type UserProfileStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileStatusValidationError) ErrorName() string {
	return "UserProfileStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UserProfileStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfileStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileStatusValidationError{}

// Validate checks the field values on SetContainerRegistrySecretReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetContainerRegistrySecretReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SecretName

	return nil
}

// SetContainerRegistrySecretReqValidationError is the validation error
// returned by SetContainerRegistrySecretReq.Validate if the designated
// constraints aren't met.
type SetContainerRegistrySecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetContainerRegistrySecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetContainerRegistrySecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetContainerRegistrySecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetContainerRegistrySecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetContainerRegistrySecretReqValidationError) ErrorName() string {
	return "SetContainerRegistrySecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetContainerRegistrySecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetContainerRegistrySecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetContainerRegistrySecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetContainerRegistrySecretReqValidationError{}
