// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: quota.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _quota_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Quota) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return QuotaValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return QuotaValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// QuotaValidationError is the validation error returned by Quota.Validate if
// the designated constraints aren't met.
type QuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaValidationError) ErrorName() string { return "QuotaValidationError" }

// Error satisfies the builtin error interface
func (e QuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaValidationError{}

// Validate checks the field values on QuotaSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *QuotaSpec) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetQuota()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return QuotaSpecValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// QuotaSpecValidationError is the validation error returned by
// QuotaSpec.Validate if the designated constraints aren't met.
type QuotaSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaSpecValidationError) ErrorName() string { return "QuotaSpecValidationError" }

// Error satisfies the builtin error interface
func (e QuotaSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaSpecValidationError{}

// Validate checks the field values on QuotaStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuotaStatus) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetUsed()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return QuotaStatusValidationError{
					field:  "Used",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// QuotaStatusValidationError is the validation error returned by
// QuotaStatus.Validate if the designated constraints aren't met.
type QuotaStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaStatusValidationError) ErrorName() string { return "QuotaStatusValidationError" }

// Error satisfies the builtin error interface
func (e QuotaStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaStatusValidationError{}

// Validate checks the field values on QuotaInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *QuotaInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cpu

	// no validation rules for Gpu

	// no validation rules for Memory

	// no validation rules for Storage

	return nil
}

// QuotaInfoValidationError is the validation error returned by
// QuotaInfo.Validate if the designated constraints aren't met.
type QuotaInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaInfoValidationError) ErrorName() string { return "QuotaInfoValidationError" }

// Error satisfies the builtin error interface
func (e QuotaInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaInfoValidationError{}

// Validate checks the field values on ListQuotasReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListQuotasReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListQuotasReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListQuotasReqValidationError is the validation error returned by
// ListQuotasReq.Validate if the designated constraints aren't met.
type ListQuotasReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListQuotasReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListQuotasReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListQuotasReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListQuotasReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListQuotasReqValidationError) ErrorName() string { return "ListQuotasReqValidationError" }

// Error satisfies the builtin error interface
func (e ListQuotasReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListQuotasReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListQuotasReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListQuotasReqValidationError{}

// Validate checks the field values on ListQuotasRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListQuotasRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetQuotas() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListQuotasResValidationError{
						field:  fmt.Sprintf("Quotas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListQuotasResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListQuotasResValidationError is the validation error returned by
// ListQuotasRes.Validate if the designated constraints aren't met.
type ListQuotasResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListQuotasResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListQuotasResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListQuotasResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListQuotasResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListQuotasResValidationError) ErrorName() string { return "ListQuotasResValidationError" }

// Error satisfies the builtin error interface
func (e ListQuotasResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListQuotasRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListQuotasResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListQuotasResValidationError{}

// Validate checks the field values on CreateQuotaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetQuota()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateQuotaReqValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateQuotaReqValidationError is the validation error returned by
// CreateQuotaReq.Validate if the designated constraints aren't met.
type CreateQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuotaReqValidationError) ErrorName() string { return "CreateQuotaReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuotaReqValidationError{}

// Validate checks the field values on UpdateQuotaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetQuota()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return UpdateQuotaReqValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// UpdateQuotaReqValidationError is the validation error returned by
// UpdateQuotaReq.Validate if the designated constraints aren't met.
type UpdateQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuotaReqValidationError) ErrorName() string { return "UpdateQuotaReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuotaReqValidationError{}

// Validate checks the field values on RemoveQuotaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RemoveQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RemoveQuotaReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RemoveQuotaReqValidationError is the validation error returned by
// RemoveQuotaReq.Validate if the designated constraints aren't met.
type RemoveQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveQuotaReqValidationError) ErrorName() string { return "RemoveQuotaReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveQuotaReqValidationError{}

// Validate checks the field values on GetDefaultQuotaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultQuotaReqValidationError is the validation error returned by
// GetDefaultQuotaReq.Validate if the designated constraints aren't met.
type GetDefaultQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultQuotaReqValidationError) ErrorName() string {
	return "GetDefaultQuotaReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultQuotaReqValidationError{}

// Validate checks the field values on GetQuotaReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetQuotaReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// GetQuotaReqValidationError is the validation error returned by
// GetQuotaReq.Validate if the designated constraints aren't met.
type GetQuotaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaReqValidationError) ErrorName() string { return "GetQuotaReqValidationError" }

// Error satisfies the builtin error interface
func (e GetQuotaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaReqValidationError{}
