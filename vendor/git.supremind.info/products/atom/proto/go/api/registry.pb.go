// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegistryNamespace struct {
	Id         string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Public     bool       `protobuf:"varint,3,opt,name=public,proto3" json:"public,omitempty"`
	CreateTime *time.Time `protobuf:"bytes,4,opt,name=createTime,proto3,stdtime" json:"createTime,omitempty"`
}

func (m *RegistryNamespace) Reset()         { *m = RegistryNamespace{} }
func (m *RegistryNamespace) String() string { return proto.CompactTextString(m) }
func (*RegistryNamespace) ProtoMessage()    {}
func (*RegistryNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}
func (m *RegistryNamespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryNamespace.Unmarshal(m, b)
}
func (m *RegistryNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryNamespace.Marshal(b, m, deterministic)
}
func (m *RegistryNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryNamespace.Merge(m, src)
}
func (m *RegistryNamespace) XXX_Size() int {
	return xxx_messageInfo_RegistryNamespace.Size(m)
}
func (m *RegistryNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryNamespace proto.InternalMessageInfo

func (m *RegistryNamespace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegistryNamespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegistryNamespace) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *RegistryNamespace) GetCreateTime() *time.Time {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

type RegistryRepository struct {
	Id         string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreateTime *time.Time `protobuf:"bytes,3,opt,name=createTime,proto3,stdtime" json:"createTime,omitempty"`
}

func (m *RegistryRepository) Reset()         { *m = RegistryRepository{} }
func (m *RegistryRepository) String() string { return proto.CompactTextString(m) }
func (*RegistryRepository) ProtoMessage()    {}
func (*RegistryRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{1}
}
func (m *RegistryRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryRepository.Unmarshal(m, b)
}
func (m *RegistryRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryRepository.Marshal(b, m, deterministic)
}
func (m *RegistryRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryRepository.Merge(m, src)
}
func (m *RegistryRepository) XXX_Size() int {
	return xxx_messageInfo_RegistryRepository.Size(m)
}
func (m *RegistryRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryRepository.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryRepository proto.InternalMessageInfo

func (m *RegistryRepository) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegistryRepository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegistryRepository) GetCreateTime() *time.Time {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

type RegistryTag struct {
	Name          string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location      string     `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	ShortRevision string     `protobuf:"bytes,3,opt,name=shortRevision,proto3" json:"shortRevision,omitempty"`
	TotalSize     int64      `protobuf:"varint,4,opt,name=totalSize,proto3" json:"totalSize,omitempty"`
	CreateTime    *time.Time `protobuf:"bytes,5,opt,name=createTime,proto3,stdtime" json:"createTime,omitempty"`
}

func (m *RegistryTag) Reset()         { *m = RegistryTag{} }
func (m *RegistryTag) String() string { return proto.CompactTextString(m) }
func (*RegistryTag) ProtoMessage()    {}
func (*RegistryTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{2}
}
func (m *RegistryTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryTag.Unmarshal(m, b)
}
func (m *RegistryTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryTag.Marshal(b, m, deterministic)
}
func (m *RegistryTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryTag.Merge(m, src)
}
func (m *RegistryTag) XXX_Size() int {
	return xxx_messageInfo_RegistryTag.Size(m)
}
func (m *RegistryTag) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryTag.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryTag proto.InternalMessageInfo

func (m *RegistryTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegistryTag) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *RegistryTag) GetShortRevision() string {
	if m != nil {
		return m.ShortRevision
	}
	return ""
}

func (m *RegistryTag) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *RegistryTag) GetCreateTime() *time.Time {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

type ListNamespacesReq struct {
	PublicOnly bool `protobuf:"varint,1,opt,name=publicOnly,proto3" json:"publicOnly,omitempty"`
}

func (m *ListNamespacesReq) Reset()         { *m = ListNamespacesReq{} }
func (m *ListNamespacesReq) String() string { return proto.CompactTextString(m) }
func (*ListNamespacesReq) ProtoMessage()    {}
func (*ListNamespacesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{3}
}
func (m *ListNamespacesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNamespacesReq.Unmarshal(m, b)
}
func (m *ListNamespacesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNamespacesReq.Marshal(b, m, deterministic)
}
func (m *ListNamespacesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesReq.Merge(m, src)
}
func (m *ListNamespacesReq) XXX_Size() int {
	return xxx_messageInfo_ListNamespacesReq.Size(m)
}
func (m *ListNamespacesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesReq proto.InternalMessageInfo

func (m *ListNamespacesReq) GetPublicOnly() bool {
	if m != nil {
		return m.PublicOnly
	}
	return false
}

type ListNamespacesRes struct {
	Namespaces []*RegistryNamespace `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (m *ListNamespacesRes) Reset()         { *m = ListNamespacesRes{} }
func (m *ListNamespacesRes) String() string { return proto.CompactTextString(m) }
func (*ListNamespacesRes) ProtoMessage()    {}
func (*ListNamespacesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{4}
}
func (m *ListNamespacesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNamespacesRes.Unmarshal(m, b)
}
func (m *ListNamespacesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNamespacesRes.Marshal(b, m, deterministic)
}
func (m *ListNamespacesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesRes.Merge(m, src)
}
func (m *ListNamespacesRes) XXX_Size() int {
	return xxx_messageInfo_ListNamespacesRes.Size(m)
}
func (m *ListNamespacesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesRes proto.InternalMessageInfo

func (m *ListNamespacesRes) GetNamespaces() []*RegistryNamespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type ListRepositoriesReq struct {
	Namespace *RegistryNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Pager     *PagerReq          `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListRepositoriesReq) Reset()         { *m = ListRepositoriesReq{} }
func (m *ListRepositoriesReq) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesReq) ProtoMessage()    {}
func (*ListRepositoriesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{5}
}
func (m *ListRepositoriesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesReq.Unmarshal(m, b)
}
func (m *ListRepositoriesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesReq.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesReq.Merge(m, src)
}
func (m *ListRepositoriesReq) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesReq.Size(m)
}
func (m *ListRepositoriesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesReq proto.InternalMessageInfo

func (m *ListRepositoriesReq) GetNamespace() *RegistryNamespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *ListRepositoriesReq) GetPager() *PagerReq {
	if m != nil {
		return m.Pager
	}
	return nil
}

type ListRepositoriesRes struct {
	Repositories []*RegistryRepository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	Pager        *PagerRes             `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListRepositoriesRes) Reset()         { *m = ListRepositoriesRes{} }
func (m *ListRepositoriesRes) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesRes) ProtoMessage()    {}
func (*ListRepositoriesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{6}
}
func (m *ListRepositoriesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesRes.Unmarshal(m, b)
}
func (m *ListRepositoriesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesRes.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesRes.Merge(m, src)
}
func (m *ListRepositoriesRes) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesRes.Size(m)
}
func (m *ListRepositoriesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesRes proto.InternalMessageInfo

func (m *ListRepositoriesRes) GetRepositories() []*RegistryRepository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

func (m *ListRepositoriesRes) GetPager() *PagerRes {
	if m != nil {
		return m.Pager
	}
	return nil
}

type ListTagsReq struct {
	Namespace  *RegistryNamespace  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Repository *RegistryRepository `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	Pager      *PagerReq           `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListTagsReq) Reset()         { *m = ListTagsReq{} }
func (m *ListTagsReq) String() string { return proto.CompactTextString(m) }
func (*ListTagsReq) ProtoMessage()    {}
func (*ListTagsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{7}
}
func (m *ListTagsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTagsReq.Unmarshal(m, b)
}
func (m *ListTagsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTagsReq.Marshal(b, m, deterministic)
}
func (m *ListTagsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTagsReq.Merge(m, src)
}
func (m *ListTagsReq) XXX_Size() int {
	return xxx_messageInfo_ListTagsReq.Size(m)
}
func (m *ListTagsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTagsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTagsReq proto.InternalMessageInfo

func (m *ListTagsReq) GetNamespace() *RegistryNamespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *ListTagsReq) GetRepository() *RegistryRepository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ListTagsReq) GetPager() *PagerReq {
	if m != nil {
		return m.Pager
	}
	return nil
}

type ListTagsRes struct {
	Tags  []*RegistryTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Pager *PagerRes      `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListTagsRes) Reset()         { *m = ListTagsRes{} }
func (m *ListTagsRes) String() string { return proto.CompactTextString(m) }
func (*ListTagsRes) ProtoMessage()    {}
func (*ListTagsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{8}
}
func (m *ListTagsRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTagsRes.Unmarshal(m, b)
}
func (m *ListTagsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTagsRes.Marshal(b, m, deterministic)
}
func (m *ListTagsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTagsRes.Merge(m, src)
}
func (m *ListTagsRes) XXX_Size() int {
	return xxx_messageInfo_ListTagsRes.Size(m)
}
func (m *ListTagsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTagsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListTagsRes proto.InternalMessageInfo

func (m *ListTagsRes) GetTags() []*RegistryTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListTagsRes) GetPager() *PagerRes {
	if m != nil {
		return m.Pager
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistryNamespace)(nil), "apiserver.v2.RegistryNamespace")
	proto.RegisterType((*RegistryRepository)(nil), "apiserver.v2.RegistryRepository")
	proto.RegisterType((*RegistryTag)(nil), "apiserver.v2.RegistryTag")
	proto.RegisterType((*ListNamespacesReq)(nil), "apiserver.v2.ListNamespacesReq")
	proto.RegisterType((*ListNamespacesRes)(nil), "apiserver.v2.ListNamespacesRes")
	proto.RegisterType((*ListRepositoriesReq)(nil), "apiserver.v2.ListRepositoriesReq")
	proto.RegisterType((*ListRepositoriesRes)(nil), "apiserver.v2.ListRepositoriesRes")
	proto.RegisterType((*ListTagsReq)(nil), "apiserver.v2.ListTagsReq")
	proto.RegisterType((*ListTagsRes)(nil), "apiserver.v2.ListTagsRes")
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xeb, 0x24, 0xad, 0xd2, 0x49, 0x29, 0xd4, 0x48, 0x55, 0xba, 0x42, 0x69, 0x88, 0x38,
	0xe4, 0x40, 0x36, 0x52, 0x7a, 0x46, 0x2d, 0x15, 0x47, 0x04, 0xc8, 0xcd, 0x01, 0x71, 0x73, 0x36,
	0xae, 0x6b, 0x94, 0x5d, 0x6f, 0x6d, 0x67, 0xc5, 0xf6, 0x06, 0x37, 0x6e, 0xe5, 0x2d, 0x78, 0x08,
	0x6e, 0xbc, 0x00, 0x47, 0x6e, 0x48, 0xf4, 0x45, 0x50, 0xbc, 0x7f, 0xb2, 0xc9, 0x16, 0x25, 0x54,
	0xdc, 0x3c, 0xb3, 0xdf, 0xe7, 0xf9, 0xcd, 0x78, 0xa4, 0x85, 0x5d, 0xc5, 0xb8, 0xd0, 0x46, 0xc5,
	0x6e, 0xa8, 0xa4, 0x91, 0x78, 0x87, 0x86, 0x42, 0x33, 0x15, 0x31, 0xe5, 0x46, 0x03, 0xa7, 0xc7,
	0x85, 0xb9, 0x98, 0x8e, 0x5c, 0x4f, 0xfa, 0x7d, 0x2e, 0xb9, 0xec, 0x5b, 0xd1, 0x68, 0x7a, 0x6e,
	0x23, 0x1b, 0xd8, 0x53, 0x62, 0x76, 0x9e, 0x17, 0xe4, 0x2c, 0x88, 0x64, 0x1c, 0x2a, 0xf9, 0x21,
	0x4e, 0x4c, 0x5e, 0x8f, 0xb3, 0xa0, 0x17, 0xd1, 0x89, 0x18, 0x53, 0xc3, 0xfa, 0xa5, 0x43, 0x7a,
	0xc5, 0x21, 0x97, 0x92, 0x4f, 0xd8, 0xbc, 0x90, 0x11, 0x3e, 0xd3, 0x86, 0xfa, 0x61, 0x2a, 0x00,
	0x9f, 0x19, 0x9a, 0x9c, 0x3b, 0x5f, 0x10, 0xec, 0x91, 0x94, 0xff, 0x15, 0xf5, 0x99, 0x0e, 0xa9,
	0xc7, 0xf0, 0x2e, 0x54, 0xc4, 0xb8, 0x89, 0xda, 0xa8, 0xbb, 0x4d, 0x2a, 0x62, 0x8c, 0x31, 0xd4,
	0x02, 0xea, 0xb3, 0x66, 0xc5, 0x66, 0xec, 0x19, 0xef, 0xc3, 0x56, 0x38, 0x1d, 0x4d, 0x84, 0xd7,
	0xac, 0xb6, 0x51, 0xb7, 0x4e, 0xd2, 0x08, 0x9f, 0x00, 0x78, 0x8a, 0x51, 0xc3, 0x86, 0xc2, 0x67,
	0xcd, 0x5a, 0x1b, 0x75, 0x1b, 0x03, 0xc7, 0x4d, 0x98, 0xdc, 0x8c, 0xc9, 0x1d, 0x66, 0x4c, 0xa7,
	0xb5, 0xeb, 0x5f, 0x87, 0x88, 0x14, 0x3c, 0x9d, 0x2b, 0xc0, 0x19, 0x12, 0x61, 0xa1, 0xd4, 0xc2,
	0x48, 0x15, 0xaf, 0xc5, 0xb4, 0x58, 0xbb, 0x7a, 0x87, 0xda, 0xdf, 0x11, 0x34, 0xb2, 0xe2, 0x43,
	0xca, 0xf3, 0x2a, 0xa8, 0x50, 0xc5, 0x81, 0xfa, 0x44, 0x7a, 0xd4, 0x08, 0x19, 0xa4, 0xd5, 0xf3,
	0x18, 0x3f, 0x81, 0x7b, 0xfa, 0x42, 0x2a, 0x43, 0x58, 0x24, 0xf4, 0x4c, 0x50, 0xb5, 0x82, 0xc5,
	0x24, 0x7e, 0x04, 0xdb, 0x46, 0x1a, 0x3a, 0x39, 0x13, 0x57, 0xc9, 0x88, 0xaa, 0x64, 0x9e, 0x58,
	0xea, 0x62, 0xf3, 0x0e, 0x5d, 0x1c, 0xc1, 0xde, 0x4b, 0xa1, 0x4d, 0xfe, 0xa0, 0x9a, 0xb0, 0x4b,
	0xdc, 0x02, 0x48, 0x9e, 0xe8, 0x75, 0x30, 0x89, 0x6d, 0x43, 0x75, 0x52, 0xc8, 0x74, 0x86, 0x65,
	0x93, 0xc6, 0xc7, 0x00, 0x41, 0x9e, 0x68, 0xa2, 0x76, 0xb5, 0xdb, 0x18, 0x1c, 0xba, 0xc5, 0x0d,
	0x77, 0x4b, 0xeb, 0x43, 0x0a, 0x96, 0xce, 0x27, 0x04, 0x0f, 0x67, 0xd7, 0xe6, 0x2f, 0x29, 0x12,
	0x9a, 0x67, 0xb0, 0x9d, 0xab, 0x2c, 0xcc, 0x1a, 0xf7, 0xce, 0x1d, 0xf8, 0x29, 0x6c, 0x86, 0x94,
	0x33, 0x65, 0x1f, 0xa0, 0x31, 0xd8, 0x5f, 0xb4, 0xbe, 0x99, 0x7d, 0x22, 0xec, 0x92, 0x24, 0xa2,
	0xce, 0xe7, 0x5b, 0x21, 0x34, 0x7e, 0x01, 0x3b, 0xaa, 0x90, 0x4a, 0xfb, 0x6b, 0xdf, 0xce, 0x31,
	0xdf, 0x45, 0xb2, 0xe0, 0x5a, 0x8f, 0x45, 0x67, 0x2c, 0xdf, 0x10, 0x34, 0x66, 0x2c, 0x43, 0xca,
	0xff, 0xc7, 0x20, 0x4e, 0x00, 0x72, 0x98, 0x38, 0x25, 0x58, 0xdd, 0x40, 0xc1, 0x33, 0xc7, 0xaf,
	0xae, 0x33, 0xca, 0xf7, 0x45, 0x7a, 0x8d, 0x7b, 0x50, 0x33, 0x94, 0x67, 0x93, 0x3b, 0xb8, 0xbd,
	0xf0, 0x90, 0x72, 0x62, 0x65, 0xff, 0x36, 0xaa, 0xc1, 0xc7, 0x0a, 0xdc, 0xcf, 0xee, 0x38, 0x63,
	0x2a, 0x12, 0x1e, 0xc3, 0x04, 0x76, 0x17, 0xb7, 0x14, 0x2f, 0x4d, 0xab, 0xb4, 0xf8, 0xce, 0x0a,
	0x81, 0xc6, 0x6f, 0xe1, 0xc1, 0xf2, 0x76, 0xe0, 0xc7, 0x65, 0xd3, 0xd2, 0x0a, 0x3b, 0x2b, 0x25,
	0x1a, 0x9f, 0x40, 0x3d, 0x9b, 0x16, 0x3e, 0x28, 0xcb, 0xd3, 0x1d, 0x70, 0xfe, 0xfa, 0x49, 0x9f,
	0x1e, 0x7f, 0xfd, 0xdd, 0x42, 0xd7, 0x37, 0xad, 0x8d, 0x1f, 0x37, 0xad, 0x8d, 0x9f, 0x37, 0xad,
	0x8d, 0x77, 0xb3, 0x3f, 0x8a, 0xab, 0xa7, 0xa1, 0x62, 0xbe, 0x08, 0xc6, 0xae, 0x08, 0xce, 0xed,
	0x4f, 0x65, 0x3c, 0xf5, 0x8c, 0xee, 0x53, 0x23, 0xfd, 0x7e, 0xf6, 0x57, 0xe9, 0xd3, 0x50, 0x8c,
	0xb6, 0x6c, 0x74, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x8a, 0xe2, 0xce, 0xa7, 0x06, 0x00,
	0x00,
}

func (this *RegistryNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegistryNamespace)
	if !ok {
		that2, ok := that.(RegistryNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Public != that1.Public {
		return false
	}
	if that1.CreateTime == nil {
		if this.CreateTime != nil {
			return false
		}
	} else if !this.CreateTime.Equal(*that1.CreateTime) {
		return false
	}
	return true
}
func (this *RegistryRepository) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegistryRepository)
	if !ok {
		that2, ok := that.(RegistryRepository)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.CreateTime == nil {
		if this.CreateTime != nil {
			return false
		}
	} else if !this.CreateTime.Equal(*that1.CreateTime) {
		return false
	}
	return true
}
func (this *RegistryTag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegistryTag)
	if !ok {
		that2, ok := that.(RegistryTag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if this.ShortRevision != that1.ShortRevision {
		return false
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	if that1.CreateTime == nil {
		if this.CreateTime != nil {
			return false
		}
	} else if !this.CreateTime.Equal(*that1.CreateTime) {
		return false
	}
	return true
}
func (this *ListNamespacesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNamespacesReq)
	if !ok {
		that2, ok := that.(ListNamespacesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicOnly != that1.PublicOnly {
		return false
	}
	return true
}
func (this *ListNamespacesRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNamespacesRes)
	if !ok {
		that2, ok := that.(ListNamespacesRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if !this.Namespaces[i].Equal(that1.Namespaces[i]) {
			return false
		}
	}
	return true
}
func (this *ListRepositoriesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRepositoriesReq)
	if !ok {
		that2, ok := that.(ListRepositoriesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Namespace.Equal(that1.Namespace) {
		return false
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *ListRepositoriesRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRepositoriesRes)
	if !ok {
		that2, ok := that.(ListRepositoriesRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Repositories) != len(that1.Repositories) {
		return false
	}
	for i := range this.Repositories {
		if !this.Repositories[i].Equal(that1.Repositories[i]) {
			return false
		}
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *ListTagsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTagsReq)
	if !ok {
		that2, ok := that.(ListTagsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Namespace.Equal(that1.Namespace) {
		return false
	}
	if !this.Repository.Equal(that1.Repository) {
		return false
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *ListTagsRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTagsRes)
	if !ok {
		that2, ok := that.(ListTagsRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryServiceClient interface {
	ListNamespaces(ctx context.Context, in *ListNamespacesReq, opts ...grpc.CallOption) (*ListNamespacesRes, error)
	ListRepositories(ctx context.Context, in *ListRepositoriesReq, opts ...grpc.CallOption) (*ListRepositoriesRes, error)
	ListTags(ctx context.Context, in *ListTagsReq, opts ...grpc.CallOption) (*ListTagsRes, error)
}

type registryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegistryServiceClient(cc *grpc.ClientConn) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesReq, opts ...grpc.CallOption) (*ListNamespacesRes, error) {
	out := new(ListNamespacesRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.RegistryService/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesReq, opts ...grpc.CallOption) (*ListRepositoriesRes, error) {
	out := new(ListRepositoriesRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.RegistryService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListTags(ctx context.Context, in *ListTagsReq, opts ...grpc.CallOption) (*ListTagsRes, error) {
	out := new(ListTagsRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.RegistryService/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
type RegistryServiceServer interface {
	ListNamespaces(context.Context, *ListNamespacesReq) (*ListNamespacesRes, error)
	ListRepositories(context.Context, *ListRepositoriesReq) (*ListRepositoriesRes, error)
	ListTags(context.Context, *ListTagsReq) (*ListTagsRes, error)
}

// UnimplementedRegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceServer struct {
}

func (*UnimplementedRegistryServiceServer) ListNamespaces(ctx context.Context, req *ListNamespacesReq) (*ListNamespacesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (*UnimplementedRegistryServiceServer) ListRepositories(ctx context.Context, req *ListRepositoriesReq) (*ListRepositoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (*UnimplementedRegistryServiceServer) ListTags(ctx context.Context, req *ListTagsReq) (*ListTagsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}

func RegisterRegistryServiceServer(s *grpc.Server, srv RegistryServiceServer) {
	s.RegisterService(&_RegistryService_serviceDesc, srv)
}

func _RegistryService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.RegistryService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListNamespaces(ctx, req.(*ListNamespacesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.RegistryService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListRepositories(ctx, req.(*ListRepositoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.RegistryService/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListTags(ctx, req.(*ListTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.v2.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNamespaces",
			Handler:    _RegistryService_ListNamespaces_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _RegistryService_ListRepositories_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _RegistryService_ListTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}
