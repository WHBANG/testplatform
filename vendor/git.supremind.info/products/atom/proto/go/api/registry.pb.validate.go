// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: registry.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _registry_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegistryNamespace with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegistryNamespace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Public

	{
		tmp := m.GetCreateTime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RegistryNamespaceValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// RegistryNamespaceValidationError is the validation error returned by
// RegistryNamespace.Validate if the designated constraints aren't met.
type RegistryNamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryNamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryNamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryNamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryNamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryNamespaceValidationError) ErrorName() string {
	return "RegistryNamespaceValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryNamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryNamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryNamespaceValidationError{}

// Validate checks the field values on RegistryRepository with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegistryRepository) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	{
		tmp := m.GetCreateTime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RegistryRepositoryValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// RegistryRepositoryValidationError is the validation error returned by
// RegistryRepository.Validate if the designated constraints aren't met.
type RegistryRepositoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryRepositoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryRepositoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryRepositoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryRepositoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryRepositoryValidationError) ErrorName() string {
	return "RegistryRepositoryValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryRepositoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryRepository.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryRepositoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryRepositoryValidationError{}

// Validate checks the field values on RegistryTag with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegistryTag) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Location

	// no validation rules for ShortRevision

	// no validation rules for TotalSize

	{
		tmp := m.GetCreateTime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RegistryTagValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// RegistryTagValidationError is the validation error returned by
// RegistryTag.Validate if the designated constraints aren't met.
type RegistryTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryTagValidationError) ErrorName() string { return "RegistryTagValidationError" }

// Error satisfies the builtin error interface
func (e RegistryTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryTagValidationError{}

// Validate checks the field values on ListNamespacesReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListNamespacesReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PublicOnly

	return nil
}

// ListNamespacesReqValidationError is the validation error returned by
// ListNamespacesReq.Validate if the designated constraints aren't met.
type ListNamespacesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesReqValidationError) ErrorName() string {
	return "ListNamespacesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesReqValidationError{}

// Validate checks the field values on ListNamespacesRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListNamespacesRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListNamespacesResValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListNamespacesResValidationError is the validation error returned by
// ListNamespacesRes.Validate if the designated constraints aren't met.
type ListNamespacesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResValidationError) ErrorName() string {
	return "ListNamespacesResValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResValidationError{}

// Validate checks the field values on ListRepositoriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRepositoriesReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetNamespace()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListRepositoriesReqValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListRepositoriesReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListRepositoriesReqValidationError is the validation error returned by
// ListRepositoriesReq.Validate if the designated constraints aren't met.
type ListRepositoriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoriesReqValidationError) ErrorName() string {
	return "ListRepositoriesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoriesReqValidationError{}

// Validate checks the field values on ListRepositoriesRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRepositoriesRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRepositories() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListRepositoriesResValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListRepositoriesResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListRepositoriesResValidationError is the validation error returned by
// ListRepositoriesRes.Validate if the designated constraints aren't met.
type ListRepositoriesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoriesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoriesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoriesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoriesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoriesResValidationError) ErrorName() string {
	return "ListRepositoriesResValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoriesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoriesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoriesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoriesResValidationError{}

// Validate checks the field values on ListTagsReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListTagsReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetNamespace()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListTagsReqValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetRepository()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListTagsReqValidationError{
					field:  "Repository",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListTagsReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListTagsReqValidationError is the validation error returned by
// ListTagsReq.Validate if the designated constraints aren't met.
type ListTagsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsReqValidationError) ErrorName() string { return "ListTagsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsReqValidationError{}

// Validate checks the field values on ListTagsRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListTagsRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListTagsResValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListTagsResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListTagsResValidationError is the validation error returned by
// ListTagsRes.Validate if the designated constraints aren't met.
type ListTagsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsResValidationError) ErrorName() string { return "ListTagsResValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsResValidationError{}
