// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: secret.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecretKind int32

const (
	SecretUnknown SecretKind = 0
	SecretSSH     SecretKind = 1
	SecretQiniu   SecretKind = 2
	SecretAliyun  SecretKind = 3
	SecretGitlab  SecretKind = 4
	SecretDidiyun SecretKind = 5
)

var SecretKind_name = map[int32]string{
	0: "SecretUnknown",
	1: "SecretSSH",
	2: "SecretQiniu",
	3: "SecretAliyun",
	4: "SecretGitlab",
	5: "SecretDidiyun",
}

var SecretKind_value = map[string]int32{
	"SecretUnknown": 0,
	"SecretSSH":     1,
	"SecretQiniu":   2,
	"SecretAliyun":  3,
	"SecretGitlab":  4,
	"SecretDidiyun": 5,
}

func (x SecretKind) String() string {
	return proto.EnumName(SecretKind_name, int32(x))
}

func (SecretKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0}
}

// Secrets may be used to connect to internal or third-party services,
// including object storage, docker image registry...
type Secret struct {
	*Metadata `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta,omitempty" bson:",inline"`
	Spec      *SecretSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty" bson:"spec"`
	Status    *SecretStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" bson:"status"`
}

func (m *Secret) Reset()         { *m = Secret{} }
func (m *Secret) String() string { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()    {}
func (*Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0}
}
func (m *Secret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret.Unmarshal(m, b)
}
func (m *Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret.Marshal(b, m, deterministic)
}
func (m *Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret.Merge(m, src)
}
func (m *Secret) XXX_Size() int {
	return xxx_messageInfo_Secret.Size(m)
}
func (m *Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Secret proto.InternalMessageInfo

func (m *Secret) GetSpec() *SecretSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Secret) GetStatus() *SecretStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type Secret_SSH struct {
	PublicKey   string `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty" bson:"publicKey"`
	FingerPrint string `protobuf:"bytes,2,opt,name=fingerPrint,proto3" json:"fingerPrint,omitempty" bson:"fingerPrint,omitempty"`
}

func (m *Secret_SSH) Reset()         { *m = Secret_SSH{} }
func (m *Secret_SSH) String() string { return proto.CompactTextString(m) }
func (*Secret_SSH) ProtoMessage()    {}
func (*Secret_SSH) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0, 0}
}
func (m *Secret_SSH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret_SSH.Unmarshal(m, b)
}
func (m *Secret_SSH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret_SSH.Marshal(b, m, deterministic)
}
func (m *Secret_SSH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret_SSH.Merge(m, src)
}
func (m *Secret_SSH) XXX_Size() int {
	return xxx_messageInfo_Secret_SSH.Size(m)
}
func (m *Secret_SSH) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret_SSH.DiscardUnknown(m)
}

var xxx_messageInfo_Secret_SSH proto.InternalMessageInfo

func (m *Secret_SSH) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Secret_SSH) GetFingerPrint() string {
	if m != nil {
		return m.FingerPrint
	}
	return ""
}

type Secret_Qiniu struct {
	AccessKey string `protobuf:"bytes,1,opt,name=accessKey,proto3" json:"accessKey,omitempty" bson:"accessKey"`
	SecretKey string `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty" bson:"secretKey"`
}

func (m *Secret_Qiniu) Reset()         { *m = Secret_Qiniu{} }
func (m *Secret_Qiniu) String() string { return proto.CompactTextString(m) }
func (*Secret_Qiniu) ProtoMessage()    {}
func (*Secret_Qiniu) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0, 1}
}
func (m *Secret_Qiniu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret_Qiniu.Unmarshal(m, b)
}
func (m *Secret_Qiniu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret_Qiniu.Marshal(b, m, deterministic)
}
func (m *Secret_Qiniu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret_Qiniu.Merge(m, src)
}
func (m *Secret_Qiniu) XXX_Size() int {
	return xxx_messageInfo_Secret_Qiniu.Size(m)
}
func (m *Secret_Qiniu) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret_Qiniu.DiscardUnknown(m)
}

var xxx_messageInfo_Secret_Qiniu proto.InternalMessageInfo

func (m *Secret_Qiniu) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *Secret_Qiniu) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

type Secret_Aliyun struct {
	AccessKeyID     string `protobuf:"bytes,1,opt,name=accessKeyID,proto3" json:"accessKeyID,omitempty" bson:"accessKeyID"`
	AccessKeySecret string `protobuf:"bytes,2,opt,name=accessKeySecret,proto3" json:"accessKeySecret,omitempty" bson:"accessKeySecret"`
}

func (m *Secret_Aliyun) Reset()         { *m = Secret_Aliyun{} }
func (m *Secret_Aliyun) String() string { return proto.CompactTextString(m) }
func (*Secret_Aliyun) ProtoMessage()    {}
func (*Secret_Aliyun) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0, 2}
}
func (m *Secret_Aliyun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret_Aliyun.Unmarshal(m, b)
}
func (m *Secret_Aliyun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret_Aliyun.Marshal(b, m, deterministic)
}
func (m *Secret_Aliyun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret_Aliyun.Merge(m, src)
}
func (m *Secret_Aliyun) XXX_Size() int {
	return xxx_messageInfo_Secret_Aliyun.Size(m)
}
func (m *Secret_Aliyun) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret_Aliyun.DiscardUnknown(m)
}

var xxx_messageInfo_Secret_Aliyun proto.InternalMessageInfo

func (m *Secret_Aliyun) GetAccessKeyID() string {
	if m != nil {
		return m.AccessKeyID
	}
	return ""
}

func (m *Secret_Aliyun) GetAccessKeySecret() string {
	if m != nil {
		return m.AccessKeySecret
	}
	return ""
}

type Secret_Gitlab struct {
	Email         string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty" bson:"email"`
	PersonalToken string `protobuf:"bytes,2,opt,name=personalToken,proto3" json:"personalToken,omitempty" bson:"personalToken"`
}

func (m *Secret_Gitlab) Reset()         { *m = Secret_Gitlab{} }
func (m *Secret_Gitlab) String() string { return proto.CompactTextString(m) }
func (*Secret_Gitlab) ProtoMessage()    {}
func (*Secret_Gitlab) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0, 3}
}
func (m *Secret_Gitlab) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret_Gitlab.Unmarshal(m, b)
}
func (m *Secret_Gitlab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret_Gitlab.Marshal(b, m, deterministic)
}
func (m *Secret_Gitlab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret_Gitlab.Merge(m, src)
}
func (m *Secret_Gitlab) XXX_Size() int {
	return xxx_messageInfo_Secret_Gitlab.Size(m)
}
func (m *Secret_Gitlab) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret_Gitlab.DiscardUnknown(m)
}

var xxx_messageInfo_Secret_Gitlab proto.InternalMessageInfo

func (m *Secret_Gitlab) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Secret_Gitlab) GetPersonalToken() string {
	if m != nil {
		return m.PersonalToken
	}
	return ""
}

type Secret_Didiyun struct {
	SecretID  string `protobuf:"bytes,1,opt,name=secretID,proto3" json:"secretID,omitempty" bson:"secretID"`
	SecretKey string `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty" bson:"secretKey"`
}

func (m *Secret_Didiyun) Reset()         { *m = Secret_Didiyun{} }
func (m *Secret_Didiyun) String() string { return proto.CompactTextString(m) }
func (*Secret_Didiyun) ProtoMessage()    {}
func (*Secret_Didiyun) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0, 4}
}
func (m *Secret_Didiyun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret_Didiyun.Unmarshal(m, b)
}
func (m *Secret_Didiyun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret_Didiyun.Marshal(b, m, deterministic)
}
func (m *Secret_Didiyun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret_Didiyun.Merge(m, src)
}
func (m *Secret_Didiyun) XXX_Size() int {
	return xxx_messageInfo_Secret_Didiyun.Size(m)
}
func (m *Secret_Didiyun) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret_Didiyun.DiscardUnknown(m)
}

var xxx_messageInfo_Secret_Didiyun proto.InternalMessageInfo

func (m *Secret_Didiyun) GetSecretID() string {
	if m != nil {
		return m.SecretID
	}
	return ""
}

func (m *Secret_Didiyun) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

type SecretSpec struct {
	Kind           SecretKind `protobuf:"varint,1,opt,name=kind,proto3,enum=apiserver.v2.SecretKind" json:"kind,omitempty" bson:"kind"`
	*SecretContent `protobuf:"bytes,2,opt,name=content,proto3,embedded=content" json:"content,omitempty" bson:",inline"`
}

func (m *SecretSpec) Reset()         { *m = SecretSpec{} }
func (m *SecretSpec) String() string { return proto.CompactTextString(m) }
func (*SecretSpec) ProtoMessage()    {}
func (*SecretSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{1}
}
func (m *SecretSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecretSpec.Unmarshal(m, b)
}
func (m *SecretSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecretSpec.Marshal(b, m, deterministic)
}
func (m *SecretSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretSpec.Merge(m, src)
}
func (m *SecretSpec) XXX_Size() int {
	return xxx_messageInfo_SecretSpec.Size(m)
}
func (m *SecretSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SecretSpec proto.InternalMessageInfo

func (m *SecretSpec) GetKind() SecretKind {
	if m != nil {
		return m.Kind
	}
	return SecretUnknown
}

type SecretContent struct {
	Ssh     *Secret_SSH     `protobuf:"bytes,1,opt,name=ssh,proto3" json:"ssh,omitempty" bson:"ssh,omitempty"`
	Qiniu   *Secret_Qiniu   `protobuf:"bytes,2,opt,name=qiniu,proto3" json:"qiniu,omitempty" bson:"qiniu,omitempty"`
	Aliyun  *Secret_Aliyun  `protobuf:"bytes,3,opt,name=aliyun,proto3" json:"aliyun,omitempty" bson:"aliyun,omitempty"`
	Gitlab  *Secret_Gitlab  `protobuf:"bytes,4,opt,name=gitlab,proto3" json:"gitlab,omitempty" bson:"gitlab,omitempty"`
	Didiyun *Secret_Didiyun `protobuf:"bytes,5,opt,name=didiyun,proto3" json:"didiyun,omitempty" bson:"didiyun,omitempty"`
}

func (m *SecretContent) Reset()         { *m = SecretContent{} }
func (m *SecretContent) String() string { return proto.CompactTextString(m) }
func (*SecretContent) ProtoMessage()    {}
func (*SecretContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{2}
}
func (m *SecretContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecretContent.Unmarshal(m, b)
}
func (m *SecretContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecretContent.Marshal(b, m, deterministic)
}
func (m *SecretContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretContent.Merge(m, src)
}
func (m *SecretContent) XXX_Size() int {
	return xxx_messageInfo_SecretContent.Size(m)
}
func (m *SecretContent) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretContent.DiscardUnknown(m)
}

var xxx_messageInfo_SecretContent proto.InternalMessageInfo

func (m *SecretContent) GetSsh() *Secret_SSH {
	if m != nil {
		return m.Ssh
	}
	return nil
}

func (m *SecretContent) GetQiniu() *Secret_Qiniu {
	if m != nil {
		return m.Qiniu
	}
	return nil
}

func (m *SecretContent) GetAliyun() *Secret_Aliyun {
	if m != nil {
		return m.Aliyun
	}
	return nil
}

func (m *SecretContent) GetGitlab() *Secret_Gitlab {
	if m != nil {
		return m.Gitlab
	}
	return nil
}

func (m *SecretContent) GetDidiyun() *Secret_Didiyun {
	if m != nil {
		return m.Didiyun
	}
	return nil
}

type SecretStatus struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" bson:"enabled"`
}

func (m *SecretStatus) Reset()         { *m = SecretStatus{} }
func (m *SecretStatus) String() string { return proto.CompactTextString(m) }
func (*SecretStatus) ProtoMessage()    {}
func (*SecretStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{3}
}
func (m *SecretStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecretStatus.Unmarshal(m, b)
}
func (m *SecretStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecretStatus.Marshal(b, m, deterministic)
}
func (m *SecretStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretStatus.Merge(m, src)
}
func (m *SecretStatus) XXX_Size() int {
	return xxx_messageInfo_SecretStatus.Size(m)
}
func (m *SecretStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SecretStatus proto.InternalMessageInfo

func (m *SecretStatus) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type CreateSecretReq struct {
	Secret *Secret `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *CreateSecretReq) Reset()         { *m = CreateSecretReq{} }
func (m *CreateSecretReq) String() string { return proto.CompactTextString(m) }
func (*CreateSecretReq) ProtoMessage()    {}
func (*CreateSecretReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{4}
}
func (m *CreateSecretReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSecretReq.Unmarshal(m, b)
}
func (m *CreateSecretReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSecretReq.Marshal(b, m, deterministic)
}
func (m *CreateSecretReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSecretReq.Merge(m, src)
}
func (m *CreateSecretReq) XXX_Size() int {
	return xxx_messageInfo_CreateSecretReq.Size(m)
}
func (m *CreateSecretReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSecretReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSecretReq proto.InternalMessageInfo

func (m *CreateSecretReq) GetSecret() *Secret {
	if m != nil {
		return m.Secret
	}
	return nil
}

type GetSecretReq struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *GetSecretReq) Reset()         { *m = GetSecretReq{} }
func (m *GetSecretReq) String() string { return proto.CompactTextString(m) }
func (*GetSecretReq) ProtoMessage()    {}
func (*GetSecretReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{5}
}
func (m *GetSecretReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSecretReq.Unmarshal(m, b)
}
func (m *GetSecretReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSecretReq.Marshal(b, m, deterministic)
}
func (m *GetSecretReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecretReq.Merge(m, src)
}
func (m *GetSecretReq) XXX_Size() int {
	return xxx_messageInfo_GetSecretReq.Size(m)
}
func (m *GetSecretReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecretReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecretReq proto.InternalMessageInfo

func (m *GetSecretReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetSecretReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type ListSecretsReq struct {
	Kind                SecretKind `protobuf:"varint,1,opt,name=kind,proto3,enum=apiserver.v2.SecretKind" json:"kind,omitempty"`
	Creator             string     `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Pager               *PagerReq  `protobuf:"bytes,4,opt,name=pager,proto3" json:"pager,omitempty"`
	PersonalSecretsOnly bool       `protobuf:"varint,2,opt,name=personalSecretsOnly,proto3" json:"personalSecretsOnly,omitempty"`
}

func (m *ListSecretsReq) Reset()         { *m = ListSecretsReq{} }
func (m *ListSecretsReq) String() string { return proto.CompactTextString(m) }
func (*ListSecretsReq) ProtoMessage()    {}
func (*ListSecretsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{6}
}
func (m *ListSecretsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSecretsReq.Unmarshal(m, b)
}
func (m *ListSecretsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSecretsReq.Marshal(b, m, deterministic)
}
func (m *ListSecretsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSecretsReq.Merge(m, src)
}
func (m *ListSecretsReq) XXX_Size() int {
	return xxx_messageInfo_ListSecretsReq.Size(m)
}
func (m *ListSecretsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSecretsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListSecretsReq proto.InternalMessageInfo

func (m *ListSecretsReq) GetKind() SecretKind {
	if m != nil {
		return m.Kind
	}
	return SecretUnknown
}

func (m *ListSecretsReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ListSecretsReq) GetPager() *PagerReq {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *ListSecretsReq) GetPersonalSecretsOnly() bool {
	if m != nil {
		return m.PersonalSecretsOnly
	}
	return false
}

type ListSecretsRes struct {
	Secrets []*Secret `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
	Pager   *PagerRes `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListSecretsRes) Reset()         { *m = ListSecretsRes{} }
func (m *ListSecretsRes) String() string { return proto.CompactTextString(m) }
func (*ListSecretsRes) ProtoMessage()    {}
func (*ListSecretsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{7}
}
func (m *ListSecretsRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSecretsRes.Unmarshal(m, b)
}
func (m *ListSecretsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSecretsRes.Marshal(b, m, deterministic)
}
func (m *ListSecretsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSecretsRes.Merge(m, src)
}
func (m *ListSecretsRes) XXX_Size() int {
	return xxx_messageInfo_ListSecretsRes.Size(m)
}
func (m *ListSecretsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSecretsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListSecretsRes proto.InternalMessageInfo

func (m *ListSecretsRes) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *ListSecretsRes) GetPager() *PagerRes {
	if m != nil {
		return m.Pager
	}
	return nil
}

type RemoveSecretReq struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *RemoveSecretReq) Reset()         { *m = RemoveSecretReq{} }
func (m *RemoveSecretReq) String() string { return proto.CompactTextString(m) }
func (*RemoveSecretReq) ProtoMessage()    {}
func (*RemoveSecretReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{8}
}
func (m *RemoveSecretReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveSecretReq.Unmarshal(m, b)
}
func (m *RemoveSecretReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveSecretReq.Marshal(b, m, deterministic)
}
func (m *RemoveSecretReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveSecretReq.Merge(m, src)
}
func (m *RemoveSecretReq) XXX_Size() int {
	return xxx_messageInfo_RemoveSecretReq.Size(m)
}
func (m *RemoveSecretReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveSecretReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveSecretReq proto.InternalMessageInfo

func (m *RemoveSecretReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveSecretReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterEnum("apiserver.v2.SecretKind", SecretKind_name, SecretKind_value)
	proto.RegisterType((*Secret)(nil), "apiserver.v2.Secret")
	proto.RegisterType((*Secret_SSH)(nil), "apiserver.v2.Secret.SSH")
	proto.RegisterType((*Secret_Qiniu)(nil), "apiserver.v2.Secret.Qiniu")
	proto.RegisterType((*Secret_Aliyun)(nil), "apiserver.v2.Secret.Aliyun")
	proto.RegisterType((*Secret_Gitlab)(nil), "apiserver.v2.Secret.Gitlab")
	proto.RegisterType((*Secret_Didiyun)(nil), "apiserver.v2.Secret.Didiyun")
	proto.RegisterType((*SecretSpec)(nil), "apiserver.v2.SecretSpec")
	proto.RegisterType((*SecretContent)(nil), "apiserver.v2.SecretContent")
	proto.RegisterType((*SecretStatus)(nil), "apiserver.v2.SecretStatus")
	proto.RegisterType((*CreateSecretReq)(nil), "apiserver.v2.CreateSecretReq")
	proto.RegisterType((*GetSecretReq)(nil), "apiserver.v2.GetSecretReq")
	proto.RegisterType((*ListSecretsReq)(nil), "apiserver.v2.ListSecretsReq")
	proto.RegisterType((*ListSecretsRes)(nil), "apiserver.v2.ListSecretsRes")
	proto.RegisterType((*RemoveSecretReq)(nil), "apiserver.v2.RemoveSecretReq")
}

func init() { proto.RegisterFile("secret.proto", fileDescriptor_6acf428160d7a216) }

var fileDescriptor_6acf428160d7a216 = []byte{
	// 1098 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x18, 0xad, 0xf3, 0xb3, 0xf9, 0x92, 0x6e, 0xb2, 0xc3, 0xaa, 0x1b, 0xb9, 0xdd, 0xa4, 0x3b, 0x27,
	0x84, 0x5a, 0x07, 0x15, 0x09, 0x89, 0x15, 0xab, 0xd5, 0xba, 0xad, 0xb6, 0xa5, 0x0b, 0x74, 0x27,
	0xbb, 0x17, 0x6e, 0x8e, 0x33, 0x4d, 0x47, 0x4d, 0xc6, 0xae, 0xc7, 0x09, 0x54, 0x02, 0x0e, 0x88,
	0x13, 0x27, 0x4e, 0x9c, 0x91, 0x10, 0x12, 0xe2, 0x2f, 0xe0, 0x4f, 0xe0, 0xd8, 0x23, 0xa7, 0x48,
	0xd0, 0xff, 0x20, 0x17, 0xa4, 0x3d, 0x21, 0xcf, 0x8c, 0x63, 0x27, 0xb8, 0x05, 0x09, 0x6e, 0xf1,
	0xcc, 0x7b, 0xcf, 0xdf, 0x7c, 0xdf, 0x7b, 0x13, 0x43, 0x4d, 0x50, 0x37, 0xa0, 0xa1, 0xe5, 0x07,
	0x5e, 0xe8, 0xa1, 0x9a, 0xe3, 0x33, 0x41, 0x83, 0x09, 0x0d, 0xac, 0xc9, 0xae, 0xb9, 0x33, 0x60,
	0xe1, 0xd9, 0xb8, 0x67, 0xb9, 0xde, 0xa8, 0x33, 0xf0, 0x06, 0x5e, 0x47, 0x82, 0x7a, 0xe3, 0x53,
	0xf9, 0x24, 0x1f, 0xe4, 0x2f, 0x45, 0x36, 0x9f, 0xa6, 0xe0, 0x94, 0x4f, 0xbc, 0x4b, 0x3f, 0xf0,
	0x3e, 0xbb, 0x54, 0x24, 0x77, 0x67, 0x40, 0xf9, 0xce, 0xc4, 0x19, 0xb2, 0xbe, 0x13, 0xd2, 0xce,
	0xdf, 0x7e, 0x68, 0x89, 0x8d, 0x81, 0xe7, 0x0d, 0x86, 0x34, 0x79, 0x11, 0x1d, 0xf9, 0xe1, 0xa5,
	0xde, 0x84, 0x11, 0x0d, 0x1d, 0xf5, 0x1b, 0xff, 0x59, 0x82, 0x52, 0x57, 0x56, 0x8e, 0x3e, 0x80,
	0x42, 0xb4, 0xd1, 0x34, 0xb6, 0x8c, 0x37, 0xab, 0xbb, 0xeb, 0x56, 0xfa, 0x08, 0xd6, 0x87, 0x34,
	0x74, 0xfa, 0x4e, 0xe8, 0xd8, 0xad, 0xd7, 0x76, 0xf1, 0x1b, 0x23, 0xb7, 0x6a, 0x5c, 0x4d, 0xdb,
	0xc6, 0x6c, 0xda, 0xbe, 0xd3, 0x13, 0x1e, 0x7f, 0x84, 0xb7, 0x19, 0x1f, 0x32, 0x4e, 0x31, 0x91,
	0x1a, 0xe8, 0x31, 0x14, 0x84, 0x4f, 0xdd, 0x66, 0x4e, 0x6a, 0x35, 0x17, 0xb5, 0xd4, 0xfb, 0xba,
	0x3e, 0x75, 0xed, 0xfa, 0x6c, 0xda, 0xae, 0x2a, 0x85, 0x08, 0x8f, 0x89, 0xa4, 0xa1, 0x03, 0x28,
	0x89, 0xd0, 0x09, 0xc7, 0xa2, 0x99, 0x97, 0x02, 0x66, 0xa6, 0x80, 0x44, 0xd8, 0x77, 0x67, 0xd3,
	0xf6, 0x9a, 0x96, 0x90, 0x2b, 0x98, 0x68, 0xb2, 0xf9, 0xb5, 0x01, 0xf9, 0x6e, 0xf7, 0x10, 0xbd,
	0x07, 0x15, 0x7f, 0xdc, 0x1b, 0x32, 0xf7, 0x98, 0x5e, 0xca, 0xe3, 0x55, 0xec, 0x8d, 0xd7, 0x76,
	0x21, 0xc8, 0x35, 0xa2, 0x13, 0x34, 0x14, 0x79, 0x8e, 0xc0, 0x24, 0x41, 0x23, 0x1b, 0xaa, 0xa7,
	0x8c, 0x0f, 0x68, 0x70, 0x12, 0x30, 0x1e, 0xca, 0xf3, 0x54, 0xec, 0xad, 0xd9, 0xb4, 0xbd, 0xa9,
	0x58, 0xa9, 0xcd, 0x6d, 0x6f, 0xc4, 0x42, 0xd9, 0x67, 0x4c, 0xd2, 0x24, 0xf3, 0x0b, 0x28, 0xbe,
	0x60, 0x9c, 0x8d, 0xa3, 0x3a, 0x1c, 0xd7, 0xa5, 0x42, 0xdc, 0x56, 0xc7, 0x1c, 0x81, 0x49, 0x82,
	0x8e, 0xa8, 0xca, 0x60, 0x11, 0x35, 0x77, 0x03, 0x75, 0x8e, 0xc0, 0x24, 0x41, 0x9b, 0xdf, 0x19,
	0x50, 0x7a, 0x3a, 0x64, 0x97, 0x63, 0x8e, 0x9e, 0x40, 0x75, 0x2e, 0x79, 0xb4, 0xaf, 0x4b, 0x78,
	0x90, 0xe8, 0xa0, 0xa5, 0x12, 0x8e, 0xf6, 0x31, 0x49, 0x33, 0xd0, 0x31, 0xd4, 0xe7, 0x8f, 0x6a,
	0x0a, 0xba, 0x98, 0x87, 0x89, 0xc8, 0xfa, 0x92, 0x88, 0xc2, 0x61, 0xb2, 0xcc, 0x34, 0xbf, 0x84,
	0xd2, 0x33, 0x16, 0x0e, 0x9d, 0x1e, 0xda, 0x81, 0x22, 0x1d, 0x39, 0x6c, 0xa8, 0x2b, 0xba, 0x9f,
	0x88, 0xd5, 0x94, 0x98, 0xdc, 0xc5, 0x44, 0xa1, 0xd0, 0x01, 0xac, 0xf9, 0x34, 0x10, 0x1e, 0x77,
	0x86, 0x2f, 0xbd, 0x73, 0xca, 0x75, 0x0d, 0xed, 0x84, 0x76, 0x4f, 0xcf, 0x34, 0x8d, 0xc2, 0x64,
	0x91, 0x65, 0x7e, 0x0e, 0xe5, 0x7d, 0xd6, 0x97, 0x8d, 0x79, 0x17, 0x56, 0x55, 0xc3, 0xe6, 0x5d,
	0x31, 0x13, 0xb1, 0x7a, 0xba, 0xbb, 0x51, 0x4b, 0xe6, 0xd8, 0xff, 0x30, 0x16, 0xfc, 0xb3, 0x01,
	0x90, 0x24, 0x01, 0x1d, 0x40, 0xe1, 0x9c, 0xf1, 0xbe, 0x7c, 0xfb, 0x9d, 0xec, 0xc4, 0x1c, 0x33,
	0xde, 0x8f, 0x7a, 0x53, 0xfc, 0xca, 0x50, 0xfa, 0x3a, 0x39, 0x11, 0x0f, 0x13, 0x49, 0x47, 0xaf,
	0xa0, 0xec, 0x7a, 0x3c, 0xa4, 0xda, 0xab, 0xd5, 0xdd, 0x8d, 0x2c, 0xa5, 0x3d, 0x05, 0xf9, 0xc7,
	0x30, 0xc7, 0x5a, 0xf8, 0x87, 0x3c, 0xac, 0x2d, 0x50, 0xd1, 0x3e, 0xe4, 0x85, 0x38, 0xd3, 0x97,
	0x45, 0x66, 0xb9, 0x56, 0xb7, 0x7b, 0x68, 0x37, 0x93, 0x61, 0x08, 0x71, 0x96, 0x8e, 0x48, 0x44,
	0x47, 0xcf, 0xa1, 0x78, 0x11, 0x45, 0x43, 0x17, 0x9b, 0x99, 0x73, 0x4b, 0x86, 0xc7, 0x36, 0x13,
	0x6b, 0x49, 0x4a, 0x5a, 0x4b, 0x89, 0xa0, 0x13, 0x28, 0x39, 0xd2, 0xe8, 0xfa, 0xda, 0xc8, 0x3c,
	0xbb, 0xa5, 0xb2, 0x60, 0x6f, 0xcc, 0xa6, 0xed, 0xfb, 0xda, 0xaa, 0x72, 0x25, 0x2d, 0xa8, 0x75,
	0x22, 0xc5, 0x81, 0xb4, 0x68, 0xb3, 0x70, 0x8b, 0xa2, 0x72, 0x71, 0x5a, 0x51, 0x91, 0x16, 0x14,
	0xd5, 0x12, 0x7a, 0x09, 0xe5, 0xbe, 0x32, 0x5d, 0xb3, 0x28, 0x25, 0x37, 0x33, 0x25, 0xb5, 0x31,
	0xed, 0xcd, 0xd9, 0xb4, 0xdd, 0x54, 0x9a, 0x9a, 0x96, 0x16, 0x8d, 0xa5, 0x1e, 0x15, 0x7e, 0xfd,
	0xbe, 0x6d, 0xe0, 0xf7, 0xa1, 0x96, 0xbe, 0x1a, 0xd1, 0x36, 0x94, 0x29, 0x77, 0x7a, 0x43, 0xaa,
	0x6c, 0xb5, 0x6a, 0xa3, 0x64, 0xc6, 0x7a, 0x03, 0x93, 0x18, 0x82, 0x9f, 0x40, 0x7d, 0x2f, 0xa0,
	0x4e, 0x48, 0x95, 0x06, 0xa1, 0x17, 0x68, 0x1b, 0x4a, 0xca, 0xb0, 0x7a, 0xce, 0xf7, 0xb2, 0x6a,
	0x25, 0x1a, 0x83, 0x3f, 0x82, 0xda, 0x33, 0x1a, 0x26, 0xec, 0x0d, 0x28, 0x70, 0x67, 0x44, 0x75,
	0xa0, 0xca, 0x3a, 0x17, 0x44, 0x2e, 0xa2, 0x87, 0x50, 0x76, 0xa3, 0xb7, 0x79, 0x81, 0xce, 0xcd,
	0x7c, 0x3f, 0x5e, 0xc7, 0xbf, 0x18, 0x70, 0xe7, 0x39, 0x13, 0x5a, 0x51, 0xa8, 0x82, 0xfe, 0x55,
	0x4a, 0x74, 0x18, 0x9a, 0xc9, 0x3b, 0x22, 0x43, 0x54, 0xe6, 0xd2, 0x68, 0x1b, 0x8a, 0xbe, 0x33,
	0xa0, 0x81, 0x1e, 0xeb, 0xd2, 0x9f, 0xdd, 0x49, 0xb4, 0x45, 0xe8, 0x05, 0x51, 0x20, 0xf4, 0x36,
	0xbc, 0x11, 0xdf, 0x1c, 0xba, 0x96, 0x8f, 0xf9, 0x50, 0xe5, 0x7d, 0x95, 0x64, 0x6d, 0x61, 0xbe,
	0x54, 0xb9, 0x40, 0x16, 0x94, 0x55, 0x9b, 0x44, 0xd3, 0xd8, 0xca, 0xdf, 0xd8, 0xcb, 0x18, 0x94,
	0x54, 0x98, 0xbb, 0xa5, 0x42, 0xa1, 0x2b, 0xc4, 0x2f, 0xa0, 0x4e, 0xe8, 0xc8, 0x9b, 0xd0, 0xff,
	0xad, 0xfb, 0x6f, 0x4d, 0xe2, 0xeb, 0x29, 0x6a, 0x28, 0xba, 0x1b, 0xe7, 0xff, 0x15, 0x3f, 0xe7,
	0xde, 0xa7, 0xbc, 0xb1, 0x82, 0xd6, 0xa0, 0xa2, 0xdd, 0xd6, 0x3d, 0x6c, 0x18, 0xa8, 0x0e, 0x55,
	0xf5, 0x28, 0xe3, 0xda, 0xc8, 0xa1, 0x46, 0xec, 0x46, 0x15, 0xb8, 0x46, 0x3e, 0x59, 0x51, 0x81,
	0x69, 0x14, 0x12, 0x59, 0xed, 0xf7, 0x46, 0x71, 0xf7, 0xc7, 0x5c, 0xbc, 0xd6, 0xa5, 0xc1, 0x84,
	0xb9, 0x14, 0xed, 0x41, 0x2d, 0x6d, 0x4c, 0xf4, 0x60, 0xb1, 0x17, 0x4b, 0xa6, 0x35, 0x33, 0x1b,
	0x8b, 0x1e, 0x43, 0x65, 0x6e, 0x4e, 0xb4, 0x74, 0xcf, 0xa4, 0x5d, 0x7b, 0x03, 0xfd, 0x08, 0xaa,
	0xa9, 0x81, 0xa2, 0xa5, 0xd0, 0x2e, 0xba, 0xd4, 0xbc, 0x6d, 0x57, 0xa0, 0x03, 0xa8, 0xa5, 0x67,
	0xb5, 0x7c, 0x9c, 0xa5, 0x39, 0x9a, 0xeb, 0x96, 0xfa, 0x96, 0xb3, 0xe2, 0x6f, 0x39, 0xeb, 0x20,
	0x0a, 0xbf, 0xbd, 0x77, 0xf5, 0x7b, 0x6b, 0xe5, 0xa7, 0x3f, 0x5a, 0xc6, 0xb7, 0xd7, 0xad, 0x95,
	0xab, 0xeb, 0xd6, 0xca, 0x6f, 0xd7, 0xad, 0x95, 0x4f, 0xa2, 0x4f, 0x4d, 0x4b, 0x8c, 0xfd, 0x80,
	0x8e, 0x18, 0xef, 0x5b, 0x8c, 0x9f, 0xca, 0xaf, 0xcd, 0xfe, 0xd8, 0x0d, 0x45, 0xc7, 0x09, 0xbd,
	0x51, 0x27, 0xfe, 0xdc, 0xec, 0x38, 0x3e, 0xeb, 0x95, 0xe4, 0xd3, 0x3b, 0x7f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xd4, 0x20, 0x8d, 0xd2, 0xbe, 0x0a, 0x00, 0x00,
}

func (this *Secret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Secret)
	if !ok {
		that2, ok := that.(Secret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *Secret_SSH) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Secret_SSH)
	if !ok {
		that2, ok := that.(Secret_SSH)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.FingerPrint != that1.FingerPrint {
		return false
	}
	return true
}
func (this *Secret_Qiniu) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Secret_Qiniu)
	if !ok {
		that2, ok := that.(Secret_Qiniu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessKey != that1.AccessKey {
		return false
	}
	if this.SecretKey != that1.SecretKey {
		return false
	}
	return true
}
func (this *Secret_Aliyun) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Secret_Aliyun)
	if !ok {
		that2, ok := that.(Secret_Aliyun)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessKeyID != that1.AccessKeyID {
		return false
	}
	if this.AccessKeySecret != that1.AccessKeySecret {
		return false
	}
	return true
}
func (this *Secret_Gitlab) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Secret_Gitlab)
	if !ok {
		that2, ok := that.(Secret_Gitlab)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.PersonalToken != that1.PersonalToken {
		return false
	}
	return true
}
func (this *Secret_Didiyun) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Secret_Didiyun)
	if !ok {
		that2, ok := that.(Secret_Didiyun)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SecretID != that1.SecretID {
		return false
	}
	if this.SecretKey != that1.SecretKey {
		return false
	}
	return true
}
func (this *SecretSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretSpec)
	if !ok {
		that2, ok := that.(SecretSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !this.SecretContent.Equal(that1.SecretContent) {
		return false
	}
	return true
}
func (this *SecretContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretContent)
	if !ok {
		that2, ok := that.(SecretContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ssh.Equal(that1.Ssh) {
		return false
	}
	if !this.Qiniu.Equal(that1.Qiniu) {
		return false
	}
	if !this.Aliyun.Equal(that1.Aliyun) {
		return false
	}
	if !this.Gitlab.Equal(that1.Gitlab) {
		return false
	}
	if !this.Didiyun.Equal(that1.Didiyun) {
		return false
	}
	return true
}
func (this *SecretStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretStatus)
	if !ok {
		that2, ok := that.(SecretStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	return true
}
func (this *CreateSecretReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSecretReq)
	if !ok {
		that2, ok := that.(CreateSecretReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	return true
}
func (this *GetSecretReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSecretReq)
	if !ok {
		that2, ok := that.(GetSecretReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}
func (this *ListSecretsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSecretsReq)
	if !ok {
		that2, ok := that.(ListSecretsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	if this.PersonalSecretsOnly != that1.PersonalSecretsOnly {
		return false
	}
	return true
}
func (this *ListSecretsRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSecretsRes)
	if !ok {
		that2, ok := that.(ListSecretsRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Secrets) != len(that1.Secrets) {
		return false
	}
	for i := range this.Secrets {
		if !this.Secrets[i].Equal(that1.Secrets[i]) {
			return false
		}
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *RemoveSecretReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveSecretReq)
	if !ok {
		that2, ok := that.(RemoveSecretReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SecretServiceClient is the client API for SecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecretServiceClient interface {
	// create a new secret
	CreateSecret(ctx context.Context, in *CreateSecretReq, opts ...grpc.CallOption) (*Secret, error)
	// get a user secret
	GetSecret(ctx context.Context, in *GetSecretReq, opts ...grpc.CallOption) (*Secret, error)
	// list all secrets
	ListSecrets(ctx context.Context, in *ListSecretsReq, opts ...grpc.CallOption) (*ListSecretsRes, error)
	// remove a secret
	RemoveSecret(ctx context.Context, in *RemoveSecretReq, opts ...grpc.CallOption) (*types.Empty, error)
}

type secretServiceClient struct {
	cc *grpc.ClientConn
}

func NewSecretServiceClient(cc *grpc.ClientConn) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) CreateSecret(ctx context.Context, in *CreateSecretReq, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, "/apiserver.v2.SecretService/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) GetSecret(ctx context.Context, in *GetSecretReq, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, "/apiserver.v2.SecretService/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) ListSecrets(ctx context.Context, in *ListSecretsReq, opts ...grpc.CallOption) (*ListSecretsRes, error) {
	out := new(ListSecretsRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.SecretService/ListSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) RemoveSecret(ctx context.Context, in *RemoveSecretReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/apiserver.v2.SecretService/RemoveSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServiceServer is the server API for SecretService service.
type SecretServiceServer interface {
	// create a new secret
	CreateSecret(context.Context, *CreateSecretReq) (*Secret, error)
	// get a user secret
	GetSecret(context.Context, *GetSecretReq) (*Secret, error)
	// list all secrets
	ListSecrets(context.Context, *ListSecretsReq) (*ListSecretsRes, error)
	// remove a secret
	RemoveSecret(context.Context, *RemoveSecretReq) (*types.Empty, error)
}

// UnimplementedSecretServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSecretServiceServer struct {
}

func (*UnimplementedSecretServiceServer) CreateSecret(ctx context.Context, req *CreateSecretReq) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (*UnimplementedSecretServiceServer) GetSecret(ctx context.Context, req *GetSecretReq) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (*UnimplementedSecretServiceServer) ListSecrets(ctx context.Context, req *ListSecretsReq) (*ListSecretsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (*UnimplementedSecretServiceServer) RemoveSecret(ctx context.Context, req *RemoveSecretReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecret not implemented")
}

func RegisterSecretServiceServer(s *grpc.Server, srv SecretServiceServer) {
	s.RegisterService(&_SecretService_serviceDesc, srv)
}

func _SecretService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.SecretService/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).CreateSecret(ctx, req.(*CreateSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.SecretService/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).GetSecret(ctx, req.(*GetSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.SecretService/ListSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).ListSecrets(ctx, req.(*ListSecretsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_RemoveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).RemoveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.SecretService/RemoveSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).RemoveSecret(ctx, req.(*RemoveSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecretService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.v2.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSecret",
			Handler:    _SecretService_CreateSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _SecretService_GetSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _SecretService_ListSecrets_Handler,
		},
		{
			MethodName: "RemoveSecret",
			Handler:    _SecretService_RemoveSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

func (this *SecretContent) GetValue() interface{} {
	if this.Ssh != nil {
		return this.Ssh
	}
	if this.Qiniu != nil {
		return this.Qiniu
	}
	if this.Aliyun != nil {
		return this.Aliyun
	}
	if this.Gitlab != nil {
		return this.Gitlab
	}
	if this.Didiyun != nil {
		return this.Didiyun
	}
	return nil
}

func (this *SecretContent) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *Secret_SSH:
		this.Ssh = vt
	case *Secret_Qiniu:
		this.Qiniu = vt
	case *Secret_Aliyun:
		this.Aliyun = vt
	case *Secret_Gitlab:
		this.Gitlab = vt
	case *Secret_Didiyun:
		this.Didiyun = vt
	default:
		return false
	}
	return true
}
