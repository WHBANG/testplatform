// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: secret.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _secret_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Secret) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SecretValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SecretValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on SecretSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SecretSpec) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := SecretKind_name[int32(m.GetKind())]; !ok {
		return SecretSpecValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
	}

	// skipping validation for content

	return nil
}

// SecretSpecValidationError is the validation error returned by
// SecretSpec.Validate if the designated constraints aren't met.
type SecretSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretSpecValidationError) ErrorName() string { return "SecretSpecValidationError" }

// Error satisfies the builtin error interface
func (e SecretSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretSpecValidationError{}

// Validate checks the field values on SecretContent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SecretContent) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetSsh()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SecretContentValidationError{
					field:  "Ssh",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetQiniu()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SecretContentValidationError{
					field:  "Qiniu",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAliyun()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SecretContentValidationError{
					field:  "Aliyun",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetGitlab()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SecretContentValidationError{
					field:  "Gitlab",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetDidiyun()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SecretContentValidationError{
					field:  "Didiyun",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// SecretContentValidationError is the validation error returned by
// SecretContent.Validate if the designated constraints aren't met.
type SecretContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretContentValidationError) ErrorName() string { return "SecretContentValidationError" }

// Error satisfies the builtin error interface
func (e SecretContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretContentValidationError{}

// Validate checks the field values on SecretStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SecretStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enabled

	return nil
}

// SecretStatusValidationError is the validation error returned by
// SecretStatus.Validate if the designated constraints aren't met.
type SecretStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretStatusValidationError) ErrorName() string { return "SecretStatusValidationError" }

// Error satisfies the builtin error interface
func (e SecretStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretStatusValidationError{}

// Validate checks the field values on CreateSecretReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateSecretReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetSecret()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateSecretReqValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateSecretReqValidationError is the validation error returned by
// CreateSecretReq.Validate if the designated constraints aren't met.
type CreateSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSecretReqValidationError) ErrorName() string { return "CreateSecretReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSecretReqValidationError{}

// Validate checks the field values on GetSecretReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetSecretReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return GetSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		return GetSecretReqValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetSecretReqValidationError is the validation error returned by
// GetSecretReq.Validate if the designated constraints aren't met.
type GetSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretReqValidationError) ErrorName() string { return "GetSecretReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretReqValidationError{}

// Validate checks the field values on ListSecretsReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListSecretsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kind

	// no validation rules for Creator

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListSecretsReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for PersonalSecretsOnly

	return nil
}

// ListSecretsReqValidationError is the validation error returned by
// ListSecretsReq.Validate if the designated constraints aren't met.
type ListSecretsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsReqValidationError) ErrorName() string { return "ListSecretsReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSecretsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsReqValidationError{}

// Validate checks the field values on ListSecretsRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListSecretsRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListSecretsResValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListSecretsResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListSecretsResValidationError is the validation error returned by
// ListSecretsRes.Validate if the designated constraints aren't met.
type ListSecretsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsResValidationError) ErrorName() string { return "ListSecretsResValidationError" }

// Error satisfies the builtin error interface
func (e ListSecretsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsResValidationError{}

// Validate checks the field values on RemoveSecretReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveSecretReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RemoveSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		return RemoveSecretReqValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RemoveSecretReqValidationError is the validation error returned by
// RemoveSecretReq.Validate if the designated constraints aren't met.
type RemoveSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSecretReqValidationError) ErrorName() string { return "RemoveSecretReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSecretReqValidationError{}

// Validate checks the field values on Secret_SSH with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Secret_SSH) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPublicKey()) < 1 {
		return Secret_SSHValidationError{
			field:  "PublicKey",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for FingerPrint

	return nil
}

// Secret_SSHValidationError is the validation error returned by
// Secret_SSH.Validate if the designated constraints aren't met.
type Secret_SSHValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Secret_SSHValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Secret_SSHValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Secret_SSHValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Secret_SSHValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Secret_SSHValidationError) ErrorName() string { return "Secret_SSHValidationError" }

// Error satisfies the builtin error interface
func (e Secret_SSHValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret_SSH.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Secret_SSHValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Secret_SSHValidationError{}

// Validate checks the field values on Secret_Qiniu with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Secret_Qiniu) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		return Secret_QiniuValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		return Secret_QiniuValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// Secret_QiniuValidationError is the validation error returned by
// Secret_Qiniu.Validate if the designated constraints aren't met.
type Secret_QiniuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Secret_QiniuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Secret_QiniuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Secret_QiniuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Secret_QiniuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Secret_QiniuValidationError) ErrorName() string { return "Secret_QiniuValidationError" }

// Error satisfies the builtin error interface
func (e Secret_QiniuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret_Qiniu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Secret_QiniuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Secret_QiniuValidationError{}

// Validate checks the field values on Secret_Aliyun with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Secret_Aliyun) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccessKeyID()) < 1 {
		return Secret_AliyunValidationError{
			field:  "AccessKeyID",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		return Secret_AliyunValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// Secret_AliyunValidationError is the validation error returned by
// Secret_Aliyun.Validate if the designated constraints aren't met.
type Secret_AliyunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Secret_AliyunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Secret_AliyunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Secret_AliyunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Secret_AliyunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Secret_AliyunValidationError) ErrorName() string { return "Secret_AliyunValidationError" }

// Error satisfies the builtin error interface
func (e Secret_AliyunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret_Aliyun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Secret_AliyunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Secret_AliyunValidationError{}

// Validate checks the field values on Secret_Gitlab with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Secret_Gitlab) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		return Secret_GitlabValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPersonalToken()) < 1 {
		return Secret_GitlabValidationError{
			field:  "PersonalToken",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// Secret_GitlabValidationError is the validation error returned by
// Secret_Gitlab.Validate if the designated constraints aren't met.
type Secret_GitlabValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Secret_GitlabValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Secret_GitlabValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Secret_GitlabValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Secret_GitlabValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Secret_GitlabValidationError) ErrorName() string { return "Secret_GitlabValidationError" }

// Error satisfies the builtin error interface
func (e Secret_GitlabValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret_Gitlab.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Secret_GitlabValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Secret_GitlabValidationError{}

// Validate checks the field values on Secret_Didiyun with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Secret_Didiyun) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSecretID()) < 1 {
		return Secret_DidiyunValidationError{
			field:  "SecretID",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		return Secret_DidiyunValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// Secret_DidiyunValidationError is the validation error returned by
// Secret_Didiyun.Validate if the designated constraints aren't met.
type Secret_DidiyunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Secret_DidiyunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Secret_DidiyunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Secret_DidiyunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Secret_DidiyunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Secret_DidiyunValidationError) ErrorName() string { return "Secret_DidiyunValidationError" }

// Error satisfies the builtin error interface
func (e Secret_DidiyunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret_Didiyun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Secret_DidiyunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Secret_DidiyunValidationError{}
