// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: training.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _training_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TrainingSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TrainingSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnableJupyter

	// no validation rules for EnableSSH

	// no validation rules for EnableFinder

	// no validation rules for EnableLogger

	return nil
}

// TrainingSpecValidationError is the validation error returned by
// TrainingSpec.Validate if the designated constraints aren't met.
type TrainingSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingSpecValidationError) ErrorName() string { return "TrainingSpecValidationError" }

// Error satisfies the builtin error interface
func (e TrainingSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingSpecValidationError{}

// Validate checks the field values on TrainingStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TrainingStatus) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetJupyter()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return TrainingStatusValidationError{
					field:  "Jupyter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetSsh()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return TrainingStatusValidationError{
					field:  "Ssh",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetFinder()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return TrainingStatusValidationError{
					field:  "Finder",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// TrainingStatusValidationError is the validation error returned by
// TrainingStatus.Validate if the designated constraints aren't met.
type TrainingStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingStatusValidationError) ErrorName() string { return "TrainingStatusValidationError" }

// Error satisfies the builtin error interface
func (e TrainingStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingStatusValidationError{}

// Validate checks the field values on TrainingStatus_JupyterStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainingStatus_JupyterStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for LoginURL

	return nil
}

// TrainingStatus_JupyterStatusValidationError is the validation error returned
// by TrainingStatus_JupyterStatus.Validate if the designated constraints
// aren't met.
type TrainingStatus_JupyterStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingStatus_JupyterStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingStatus_JupyterStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingStatus_JupyterStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingStatus_JupyterStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingStatus_JupyterStatusValidationError) ErrorName() string {
	return "TrainingStatus_JupyterStatusValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingStatus_JupyterStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingStatus_JupyterStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingStatus_JupyterStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingStatus_JupyterStatusValidationError{}

// Validate checks the field values on TrainingStatus_SSHStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainingStatus_SSHStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServerHost

	// no validation rules for ServerPort

	return nil
}

// TrainingStatus_SSHStatusValidationError is the validation error returned by
// TrainingStatus_SSHStatus.Validate if the designated constraints aren't met.
type TrainingStatus_SSHStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingStatus_SSHStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingStatus_SSHStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingStatus_SSHStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingStatus_SSHStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingStatus_SSHStatusValidationError) ErrorName() string {
	return "TrainingStatus_SSHStatusValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingStatus_SSHStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingStatus_SSHStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingStatus_SSHStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingStatus_SSHStatusValidationError{}

// Validate checks the field values on TrainingStatus_FinderStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainingStatus_FinderStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RootURL

	return nil
}

// TrainingStatus_FinderStatusValidationError is the validation error returned
// by TrainingStatus_FinderStatus.Validate if the designated constraints
// aren't met.
type TrainingStatus_FinderStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingStatus_FinderStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingStatus_FinderStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingStatus_FinderStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingStatus_FinderStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingStatus_FinderStatusValidationError) ErrorName() string {
	return "TrainingStatus_FinderStatusValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingStatus_FinderStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingStatus_FinderStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingStatus_FinderStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingStatus_FinderStatusValidationError{}
