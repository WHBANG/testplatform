// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: volume.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Volume_Credential_Operation int32

const (
	Volume_Credential_Unset    Volume_Credential_Operation = 0
	Volume_Credential_Upload   Volume_Credential_Operation = 1
	Volume_Credential_Download Volume_Credential_Operation = 2
	Volume_Credential_List     Volume_Credential_Operation = 3
	Volume_Credential_Delete   Volume_Credential_Operation = 4
)

var Volume_Credential_Operation_name = map[int32]string{
	0: "Unset",
	1: "Upload",
	2: "Download",
	3: "List",
	4: "Delete",
}

var Volume_Credential_Operation_value = map[string]int32{
	"Unset":    0,
	"Upload":   1,
	"Download": 2,
	"List":     3,
	"Delete":   4,
}

func (x Volume_Credential_Operation) String() string {
	return proto.EnumName(Volume_Credential_Operation_name, int32(x))
}

func (Volume_Credential_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 0, 0}
}

type ResourceVolume_Vendor int32

const (
	ResourceVolume_Unknown ResourceVolume_Vendor = 0
	ResourceVolume_KODO    ResourceVolume_Vendor = 1
	ResourceVolume_OSS     ResourceVolume_Vendor = 2
	ResourceVolume_Local   ResourceVolume_Vendor = 3
	ResourceVolume_Minio   ResourceVolume_Vendor = 4
)

var ResourceVolume_Vendor_name = map[int32]string{
	0: "Unknown",
	1: "KODO",
	2: "OSS",
	3: "Local",
	4: "Minio",
}

var ResourceVolume_Vendor_value = map[string]int32{
	"Unknown": 0,
	"KODO":    1,
	"OSS":     2,
	"Local":   3,
	"Minio":   4,
}

func (x ResourceVolume_Vendor) String() string {
	return proto.EnumName(ResourceVolume_Vendor_name, int32(x))
}

func (ResourceVolume_Vendor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{2, 0}
}

type Volume struct {
	*Metadata `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta,omitempty" bson:",inline"`
	Spec      *VolumeSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty" bson:"spec"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0}
}
func (m *Volume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume.Unmarshal(m, b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return xxx_messageInfo_Volume.Size(m)
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetSpec() *VolumeSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// deprecated
type Volume_Credential struct {
	Vendor ResourceVolume_Vendor    `protobuf:"varint,1,opt,name=vendor,proto3,enum=apiserver.v2.ResourceVolume_Vendor" json:"vendor,omitempty"`
	Kodo   *Volume_Credential_KODO  `protobuf:"bytes,2,opt,name=kodo,proto3" json:"kodo,omitempty"`
	Local  *Volume_Credential_Local `protobuf:"bytes,3,opt,name=local,proto3" json:"local,omitempty"`
	Minio  *Volume_Credential_Minio `protobuf:"bytes,4,opt,name=minio,proto3" json:"minio,omitempty"`
	Oss    *Volume_Credential_OSS   `protobuf:"bytes,5,opt,name=oss,proto3" json:"oss,omitempty"`
}

func (m *Volume_Credential) Reset()         { *m = Volume_Credential{} }
func (m *Volume_Credential) String() string { return proto.CompactTextString(m) }
func (*Volume_Credential) ProtoMessage()    {}
func (*Volume_Credential) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 0}
}
func (m *Volume_Credential) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_Credential.Unmarshal(m, b)
}
func (m *Volume_Credential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_Credential.Marshal(b, m, deterministic)
}
func (m *Volume_Credential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_Credential.Merge(m, src)
}
func (m *Volume_Credential) XXX_Size() int {
	return xxx_messageInfo_Volume_Credential.Size(m)
}
func (m *Volume_Credential) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_Credential.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_Credential proto.InternalMessageInfo

func (m *Volume_Credential) GetVendor() ResourceVolume_Vendor {
	if m != nil {
		return m.Vendor
	}
	return ResourceVolume_Unknown
}

func (m *Volume_Credential) GetKodo() *Volume_Credential_KODO {
	if m != nil {
		return m.Kodo
	}
	return nil
}

func (m *Volume_Credential) GetLocal() *Volume_Credential_Local {
	if m != nil {
		return m.Local
	}
	return nil
}

func (m *Volume_Credential) GetMinio() *Volume_Credential_Minio {
	if m != nil {
		return m.Minio
	}
	return nil
}

func (m *Volume_Credential) GetOss() *Volume_Credential_OSS {
	if m != nil {
		return m.Oss
	}
	return nil
}

type Volume_Credential_KODO struct {
	UploadToken string `protobuf:"bytes,1,opt,name=uploadToken,proto3" json:"uploadToken,omitempty"`
}

func (m *Volume_Credential_KODO) Reset()         { *m = Volume_Credential_KODO{} }
func (m *Volume_Credential_KODO) String() string { return proto.CompactTextString(m) }
func (*Volume_Credential_KODO) ProtoMessage()    {}
func (*Volume_Credential_KODO) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 0, 0}
}
func (m *Volume_Credential_KODO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_Credential_KODO.Unmarshal(m, b)
}
func (m *Volume_Credential_KODO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_Credential_KODO.Marshal(b, m, deterministic)
}
func (m *Volume_Credential_KODO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_Credential_KODO.Merge(m, src)
}
func (m *Volume_Credential_KODO) XXX_Size() int {
	return xxx_messageInfo_Volume_Credential_KODO.Size(m)
}
func (m *Volume_Credential_KODO) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_Credential_KODO.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_Credential_KODO proto.InternalMessageInfo

func (m *Volume_Credential_KODO) GetUploadToken() string {
	if m != nil {
		return m.UploadToken
	}
	return ""
}

type Volume_Credential_Local struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Volume_Credential_Local) Reset()         { *m = Volume_Credential_Local{} }
func (m *Volume_Credential_Local) String() string { return proto.CompactTextString(m) }
func (*Volume_Credential_Local) ProtoMessage()    {}
func (*Volume_Credential_Local) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 0, 1}
}
func (m *Volume_Credential_Local) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_Credential_Local.Unmarshal(m, b)
}
func (m *Volume_Credential_Local) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_Credential_Local.Marshal(b, m, deterministic)
}
func (m *Volume_Credential_Local) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_Credential_Local.Merge(m, src)
}
func (m *Volume_Credential_Local) XXX_Size() int {
	return xxx_messageInfo_Volume_Credential_Local.Size(m)
}
func (m *Volume_Credential_Local) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_Credential_Local.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_Credential_Local proto.InternalMessageInfo

func (m *Volume_Credential_Local) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Volume_Credential_Minio struct {
	PresignedPostURL string            `protobuf:"bytes,1,opt,name=presignedPostURL,proto3" json:"presignedPostURL,omitempty"`
	FormData         map[string]string `protobuf:"bytes,2,rep,name=formData,proto3" json:"formData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Volume_Credential_Minio) Reset()         { *m = Volume_Credential_Minio{} }
func (m *Volume_Credential_Minio) String() string { return proto.CompactTextString(m) }
func (*Volume_Credential_Minio) ProtoMessage()    {}
func (*Volume_Credential_Minio) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 0, 2}
}
func (m *Volume_Credential_Minio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_Credential_Minio.Unmarshal(m, b)
}
func (m *Volume_Credential_Minio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_Credential_Minio.Marshal(b, m, deterministic)
}
func (m *Volume_Credential_Minio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_Credential_Minio.Merge(m, src)
}
func (m *Volume_Credential_Minio) XXX_Size() int {
	return xxx_messageInfo_Volume_Credential_Minio.Size(m)
}
func (m *Volume_Credential_Minio) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_Credential_Minio.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_Credential_Minio proto.InternalMessageInfo

func (m *Volume_Credential_Minio) GetPresignedPostURL() string {
	if m != nil {
		return m.PresignedPostURL
	}
	return ""
}

func (m *Volume_Credential_Minio) GetFormData() map[string]string {
	if m != nil {
		return m.FormData
	}
	return nil
}

type Volume_Credential_OSS struct {
	PresignedURL string            `protobuf:"bytes,1,opt,name=presignedURL,proto3" json:"presignedURL,omitempty"`
	FormData     map[string]string `protobuf:"bytes,2,rep,name=formData,proto3" json:"formData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Volume_Credential_OSS) Reset()         { *m = Volume_Credential_OSS{} }
func (m *Volume_Credential_OSS) String() string { return proto.CompactTextString(m) }
func (*Volume_Credential_OSS) ProtoMessage()    {}
func (*Volume_Credential_OSS) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 0, 3}
}
func (m *Volume_Credential_OSS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_Credential_OSS.Unmarshal(m, b)
}
func (m *Volume_Credential_OSS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_Credential_OSS.Marshal(b, m, deterministic)
}
func (m *Volume_Credential_OSS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_Credential_OSS.Merge(m, src)
}
func (m *Volume_Credential_OSS) XXX_Size() int {
	return xxx_messageInfo_Volume_Credential_OSS.Size(m)
}
func (m *Volume_Credential_OSS) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_Credential_OSS.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_Credential_OSS proto.InternalMessageInfo

func (m *Volume_Credential_OSS) GetPresignedURL() string {
	if m != nil {
		return m.PresignedURL
	}
	return ""
}

func (m *Volume_Credential_OSS) GetFormData() map[string]string {
	if m != nil {
		return m.FormData
	}
	return nil
}

type Volume_Datum struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Volume_Datum) Reset()         { *m = Volume_Datum{} }
func (m *Volume_Datum) String() string { return proto.CompactTextString(m) }
func (*Volume_Datum) ProtoMessage()    {}
func (*Volume_Datum) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0, 1}
}
func (m *Volume_Datum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume_Datum.Unmarshal(m, b)
}
func (m *Volume_Datum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume_Datum.Marshal(b, m, deterministic)
}
func (m *Volume_Datum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume_Datum.Merge(m, src)
}
func (m *Volume_Datum) XXX_Size() int {
	return xxx_messageInfo_Volume_Datum.Size(m)
}
func (m *Volume_Datum) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume_Datum.DiscardUnknown(m)
}

var xxx_messageInfo_Volume_Datum proto.InternalMessageInfo

func (m *Volume_Datum) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Volume_Datum) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type VolumeSpec struct {
	*ResourceVolume `protobuf:"bytes,1,opt,name=volume,proto3,embedded=volume" json:"volume,omitempty" bson:",inline"`
	Endpoint        string             `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty" bson:"endpoint"`
	Secret          *ResourceReference `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty" bson:"secret,omitempty"`
}

func (m *VolumeSpec) Reset()         { *m = VolumeSpec{} }
func (m *VolumeSpec) String() string { return proto.CompactTextString(m) }
func (*VolumeSpec) ProtoMessage()    {}
func (*VolumeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{1}
}
func (m *VolumeSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeSpec.Unmarshal(m, b)
}
func (m *VolumeSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeSpec.Marshal(b, m, deterministic)
}
func (m *VolumeSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeSpec.Merge(m, src)
}
func (m *VolumeSpec) XXX_Size() int {
	return xxx_messageInfo_VolumeSpec.Size(m)
}
func (m *VolumeSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeSpec proto.InternalMessageInfo

func (m *VolumeSpec) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *VolumeSpec) GetSecret() *ResourceReference {
	if m != nil {
		return m.Secret
	}
	return nil
}

type ResourceVolume struct {
	Vendor ResourceVolume_Vendor `protobuf:"varint,1,opt,name=vendor,proto3,enum=apiserver.v2.ResourceVolume_Vendor" json:"vendor,omitempty" bson:"vendor"`
	Bucket string                `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty" bson:"bucket"`
	Path   string                `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty" bson:"path"`
}

func (m *ResourceVolume) Reset()         { *m = ResourceVolume{} }
func (m *ResourceVolume) String() string { return proto.CompactTextString(m) }
func (*ResourceVolume) ProtoMessage()    {}
func (*ResourceVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{2}
}
func (m *ResourceVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceVolume.Unmarshal(m, b)
}
func (m *ResourceVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceVolume.Marshal(b, m, deterministic)
}
func (m *ResourceVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceVolume.Merge(m, src)
}
func (m *ResourceVolume) XXX_Size() int {
	return xxx_messageInfo_ResourceVolume.Size(m)
}
func (m *ResourceVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceVolume.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceVolume proto.InternalMessageInfo

func (m *ResourceVolume) GetVendor() ResourceVolume_Vendor {
	if m != nil {
		return m.Vendor
	}
	return ResourceVolume_Unknown
}

func (m *ResourceVolume) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *ResourceVolume) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type VolumePathRef struct {
	Vol  *ResourceReference `protobuf:"bytes,1,opt,name=vol,proto3" json:"vol,omitempty" bson:"vol,omitempty"`
	Path string             `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty" bson:"path,omitempty"`
}

func (m *VolumePathRef) Reset()         { *m = VolumePathRef{} }
func (m *VolumePathRef) String() string { return proto.CompactTextString(m) }
func (*VolumePathRef) ProtoMessage()    {}
func (*VolumePathRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{3}
}
func (m *VolumePathRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumePathRef.Unmarshal(m, b)
}
func (m *VolumePathRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumePathRef.Marshal(b, m, deterministic)
}
func (m *VolumePathRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumePathRef.Merge(m, src)
}
func (m *VolumePathRef) XXX_Size() int {
	return xxx_messageInfo_VolumePathRef.Size(m)
}
func (m *VolumePathRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumePathRef.DiscardUnknown(m)
}

var xxx_messageInfo_VolumePathRef proto.InternalMessageInfo

func (m *VolumePathRef) GetVol() *ResourceReference {
	if m != nil {
		return m.Vol
	}
	return nil
}

func (m *VolumePathRef) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CreateVolumeReq struct {
	Volume *Volume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *CreateVolumeReq) Reset()         { *m = CreateVolumeReq{} }
func (m *CreateVolumeReq) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeReq) ProtoMessage()    {}
func (*CreateVolumeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{4}
}
func (m *CreateVolumeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeReq.Unmarshal(m, b)
}
func (m *CreateVolumeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeReq.Marshal(b, m, deterministic)
}
func (m *CreateVolumeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeReq.Merge(m, src)
}
func (m *CreateVolumeReq) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeReq.Size(m)
}
func (m *CreateVolumeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeReq proto.InternalMessageInfo

func (m *CreateVolumeReq) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

type GetVolumeReq struct {
	// select volume by name and creator
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// or by volume
	Volume *ResourceVolume `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *GetVolumeReq) Reset()         { *m = GetVolumeReq{} }
func (m *GetVolumeReq) String() string { return proto.CompactTextString(m) }
func (*GetVolumeReq) ProtoMessage()    {}
func (*GetVolumeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{5}
}
func (m *GetVolumeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeReq.Unmarshal(m, b)
}
func (m *GetVolumeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeReq.Marshal(b, m, deterministic)
}
func (m *GetVolumeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeReq.Merge(m, src)
}
func (m *GetVolumeReq) XXX_Size() int {
	return xxx_messageInfo_GetVolumeReq.Size(m)
}
func (m *GetVolumeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeReq proto.InternalMessageInfo

func (m *GetVolumeReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetVolumeReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GetVolumeReq) GetVolume() *ResourceVolume {
	if m != nil {
		return m.Volume
	}
	return nil
}

type ListVolumesReq struct {
	Creator string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Vendor  ResourceVolume_Vendor `protobuf:"varint,2,opt,name=vendor,proto3,enum=apiserver.v2.ResourceVolume_Vendor" json:"vendor,omitempty"`
	Bucket  string                `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Options *ListOptions          `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	Pager   *PagerReq             `protobuf:"bytes,6,opt,name=pager,proto3" json:"pager,omitempty"`
	// deprecated, use listOptions instead
	Op Operation `protobuf:"varint,4,opt,name=op,proto3,enum=apiserver.v2.Operation" json:"op,omitempty"`
}

func (m *ListVolumesReq) Reset()         { *m = ListVolumesReq{} }
func (m *ListVolumesReq) String() string { return proto.CompactTextString(m) }
func (*ListVolumesReq) ProtoMessage()    {}
func (*ListVolumesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{6}
}
func (m *ListVolumesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesReq.Unmarshal(m, b)
}
func (m *ListVolumesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesReq.Marshal(b, m, deterministic)
}
func (m *ListVolumesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesReq.Merge(m, src)
}
func (m *ListVolumesReq) XXX_Size() int {
	return xxx_messageInfo_ListVolumesReq.Size(m)
}
func (m *ListVolumesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesReq proto.InternalMessageInfo

func (m *ListVolumesReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ListVolumesReq) GetVendor() ResourceVolume_Vendor {
	if m != nil {
		return m.Vendor
	}
	return ResourceVolume_Unknown
}

func (m *ListVolumesReq) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *ListVolumesReq) GetOptions() *ListOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ListVolumesReq) GetPager() *PagerReq {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *ListVolumesReq) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_None
}

type ListVolumesRes struct {
	Volumes []*Volume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Pager   *PagerRes `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListVolumesRes) Reset()         { *m = ListVolumesRes{} }
func (m *ListVolumesRes) String() string { return proto.CompactTextString(m) }
func (*ListVolumesRes) ProtoMessage()    {}
func (*ListVolumesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{7}
}
func (m *ListVolumesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesRes.Unmarshal(m, b)
}
func (m *ListVolumesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesRes.Marshal(b, m, deterministic)
}
func (m *ListVolumesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesRes.Merge(m, src)
}
func (m *ListVolumesRes) XXX_Size() int {
	return xxx_messageInfo_ListVolumesRes.Size(m)
}
func (m *ListVolumesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesRes proto.InternalMessageInfo

func (m *ListVolumesRes) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *ListVolumesRes) GetPager() *PagerRes {
	if m != nil {
		return m.Pager
	}
	return nil
}

type GetVolumeCredentialReq struct {
	Name      string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Creator   string                      `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Operation Volume_Credential_Operation `protobuf:"varint,3,opt,name=operation,proto3,enum=apiserver.v2.Volume_Credential_Operation" json:"operation,omitempty"`
	Overwrite bool                        `protobuf:"varint,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Prefix    string                      `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Key       string                      `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetVolumeCredentialReq) Reset()         { *m = GetVolumeCredentialReq{} }
func (m *GetVolumeCredentialReq) String() string { return proto.CompactTextString(m) }
func (*GetVolumeCredentialReq) ProtoMessage()    {}
func (*GetVolumeCredentialReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{8}
}
func (m *GetVolumeCredentialReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeCredentialReq.Unmarshal(m, b)
}
func (m *GetVolumeCredentialReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeCredentialReq.Marshal(b, m, deterministic)
}
func (m *GetVolumeCredentialReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeCredentialReq.Merge(m, src)
}
func (m *GetVolumeCredentialReq) XXX_Size() int {
	return xxx_messageInfo_GetVolumeCredentialReq.Size(m)
}
func (m *GetVolumeCredentialReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeCredentialReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeCredentialReq proto.InternalMessageInfo

func (m *GetVolumeCredentialReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetVolumeCredentialReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GetVolumeCredentialReq) GetOperation() Volume_Credential_Operation {
	if m != nil {
		return m.Operation
	}
	return Volume_Credential_Unset
}

func (m *GetVolumeCredentialReq) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *GetVolumeCredentialReq) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GetVolumeCredentialReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetFileURLReq struct {
	*ResourceReference `protobuf:"bytes,1,opt,name=volume,proto3,embedded=volume" json:"volume,omitempty"`
	Key                string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetFileURLReq) Reset()         { *m = GetFileURLReq{} }
func (m *GetFileURLReq) String() string { return proto.CompactTextString(m) }
func (*GetFileURLReq) ProtoMessage()    {}
func (*GetFileURLReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{9}
}
func (m *GetFileURLReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFileURLReq.Unmarshal(m, b)
}
func (m *GetFileURLReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFileURLReq.Marshal(b, m, deterministic)
}
func (m *GetFileURLReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFileURLReq.Merge(m, src)
}
func (m *GetFileURLReq) XXX_Size() int {
	return xxx_messageInfo_GetFileURLReq.Size(m)
}
func (m *GetFileURLReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFileURLReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetFileURLReq proto.InternalMessageInfo

func (m *GetFileURLReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetFileURLRes struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *GetFileURLRes) Reset()         { *m = GetFileURLRes{} }
func (m *GetFileURLRes) String() string { return proto.CompactTextString(m) }
func (*GetFileURLRes) ProtoMessage()    {}
func (*GetFileURLRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{10}
}
func (m *GetFileURLRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFileURLRes.Unmarshal(m, b)
}
func (m *GetFileURLRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFileURLRes.Marshal(b, m, deterministic)
}
func (m *GetFileURLRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFileURLRes.Merge(m, src)
}
func (m *GetFileURLRes) XXX_Size() int {
	return xxx_messageInfo_GetFileURLRes.Size(m)
}
func (m *GetFileURLRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFileURLRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetFileURLRes proto.InternalMessageInfo

func (m *GetFileURLRes) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ListVolumeDataReq struct {
	*ResourceReference `protobuf:"bytes,1,opt,name=volume,proto3,embedded=volume" json:"volume,omitempty"`
	Prefix             string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Limit              int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ListVolumeDataReq) Reset()         { *m = ListVolumeDataReq{} }
func (m *ListVolumeDataReq) String() string { return proto.CompactTextString(m) }
func (*ListVolumeDataReq) ProtoMessage()    {}
func (*ListVolumeDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{11}
}
func (m *ListVolumeDataReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumeDataReq.Unmarshal(m, b)
}
func (m *ListVolumeDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumeDataReq.Marshal(b, m, deterministic)
}
func (m *ListVolumeDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumeDataReq.Merge(m, src)
}
func (m *ListVolumeDataReq) XXX_Size() int {
	return xxx_messageInfo_ListVolumeDataReq.Size(m)
}
func (m *ListVolumeDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumeDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumeDataReq proto.InternalMessageInfo

func (m *ListVolumeDataReq) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ListVolumeDataReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RemoveVolumeReq struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *RemoveVolumeReq) Reset()         { *m = RemoveVolumeReq{} }
func (m *RemoveVolumeReq) String() string { return proto.CompactTextString(m) }
func (*RemoveVolumeReq) ProtoMessage()    {}
func (*RemoveVolumeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{12}
}
func (m *RemoveVolumeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveVolumeReq.Unmarshal(m, b)
}
func (m *RemoveVolumeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveVolumeReq.Marshal(b, m, deterministic)
}
func (m *RemoveVolumeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveVolumeReq.Merge(m, src)
}
func (m *RemoveVolumeReq) XXX_Size() int {
	return xxx_messageInfo_RemoveVolumeReq.Size(m)
}
func (m *RemoveVolumeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveVolumeReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveVolumeReq proto.InternalMessageInfo

func (m *RemoveVolumeReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoveVolumeReq) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterEnum("apiserver.v2.Volume_Credential_Operation", Volume_Credential_Operation_name, Volume_Credential_Operation_value)
	proto.RegisterEnum("apiserver.v2.ResourceVolume_Vendor", ResourceVolume_Vendor_name, ResourceVolume_Vendor_value)
	proto.RegisterType((*Volume)(nil), "apiserver.v2.Volume")
	proto.RegisterType((*Volume_Credential)(nil), "apiserver.v2.Volume.Credential")
	proto.RegisterType((*Volume_Credential_KODO)(nil), "apiserver.v2.Volume.Credential.KODO")
	proto.RegisterType((*Volume_Credential_Local)(nil), "apiserver.v2.Volume.Credential.Local")
	proto.RegisterType((*Volume_Credential_Minio)(nil), "apiserver.v2.Volume.Credential.Minio")
	proto.RegisterMapType((map[string]string)(nil), "apiserver.v2.Volume.Credential.Minio.FormDataEntry")
	proto.RegisterType((*Volume_Credential_OSS)(nil), "apiserver.v2.Volume.Credential.OSS")
	proto.RegisterMapType((map[string]string)(nil), "apiserver.v2.Volume.Credential.OSS.FormDataEntry")
	proto.RegisterType((*Volume_Datum)(nil), "apiserver.v2.Volume.Datum")
	proto.RegisterType((*VolumeSpec)(nil), "apiserver.v2.VolumeSpec")
	proto.RegisterType((*ResourceVolume)(nil), "apiserver.v2.ResourceVolume")
	proto.RegisterType((*VolumePathRef)(nil), "apiserver.v2.VolumePathRef")
	proto.RegisterType((*CreateVolumeReq)(nil), "apiserver.v2.CreateVolumeReq")
	proto.RegisterType((*GetVolumeReq)(nil), "apiserver.v2.GetVolumeReq")
	proto.RegisterType((*ListVolumesReq)(nil), "apiserver.v2.ListVolumesReq")
	proto.RegisterType((*ListVolumesRes)(nil), "apiserver.v2.ListVolumesRes")
	proto.RegisterType((*GetVolumeCredentialReq)(nil), "apiserver.v2.GetVolumeCredentialReq")
	proto.RegisterType((*GetFileURLReq)(nil), "apiserver.v2.GetFileURLReq")
	proto.RegisterType((*GetFileURLRes)(nil), "apiserver.v2.GetFileURLRes")
	proto.RegisterType((*ListVolumeDataReq)(nil), "apiserver.v2.ListVolumeDataReq")
	proto.RegisterType((*RemoveVolumeReq)(nil), "apiserver.v2.RemoveVolumeReq")
}

func init() { proto.RegisterFile("volume.proto", fileDescriptor_498b213ad3bcd5ad) }

var fileDescriptor_498b213ad3bcd5ad = []byte{
	// 1356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcb, 0x72, 0xd3, 0x56,
	0x18, 0x8e, 0xe4, 0x4b, 0xe2, 0x3f, 0x4e, 0x62, 0x0e, 0x69, 0x30, 0x0a, 0xc4, 0x20, 0xe8, 0x14,
	0xda, 0x44, 0x6e, 0x4d, 0x3b, 0xc3, 0xc0, 0x50, 0xa6, 0x26, 0x09, 0xd3, 0x12, 0x6a, 0x7a, 0x42,
	0x58, 0x74, 0xba, 0x51, 0xe4, 0x13, 0x47, 0x13, 0x59, 0x47, 0x48, 0xc7, 0x86, 0xec, 0xbb, 0xe8,
	0x94, 0x4d, 0x1f, 0xa0, 0x0f, 0xd0, 0x17, 0xe8, 0x03, 0xf0, 0x06, 0x2c, 0xbb, 0xf2, 0xa2, 0xac,
	0xba, 0xeb, 0x78, 0xc9, 0xaa, 0x73, 0x2e, 0xd6, 0xc5, 0x31, 0x31, 0xbd, 0xed, 0xce, 0xe5, 0xbf,
	0x7c, 0xff, 0xed, 0x3b, 0x12, 0x94, 0xfb, 0xd4, 0xeb, 0x75, 0x89, 0x15, 0x84, 0x94, 0x51, 0x54,
	0xb6, 0x03, 0x37, 0x22, 0x61, 0x9f, 0x84, 0x56, 0xbf, 0x61, 0x6c, 0x74, 0x5c, 0x76, 0xd8, 0xdb,
	0xb7, 0x1c, 0xda, 0xad, 0x77, 0x68, 0x87, 0xd6, 0x85, 0xd0, 0x7e, 0xef, 0x40, 0xec, 0xc4, 0x46,
	0xac, 0xa4, 0xb2, 0xf1, 0x45, 0x4a, 0x9c, 0xf8, 0x7d, 0x7a, 0x1c, 0x84, 0xf4, 0xf9, 0xb1, 0x54,
	0x72, 0x36, 0x3a, 0xc4, 0xdf, 0xe8, 0xdb, 0x9e, 0xdb, 0xb6, 0x19, 0xa9, 0x9f, 0x58, 0x28, 0x13,
	0xab, 0x1d, 0x4a, 0x3b, 0x1e, 0x49, 0x1c, 0x91, 0x6e, 0xc0, 0x8e, 0xd5, 0x25, 0x74, 0x09, 0xb3,
	0xd5, 0xba, 0x6c, 0x3b, 0x0e, 0x89, 0x22, 0xb9, 0x33, 0xbf, 0x9f, 0x83, 0xe2, 0x13, 0x11, 0x07,
	0xfa, 0x0a, 0xf2, 0x5c, 0xac, 0xaa, 0x5d, 0xd2, 0xae, 0xcd, 0x37, 0x56, 0xac, 0x74, 0x40, 0xd6,
	0x43, 0xc2, 0xec, 0xb6, 0xcd, 0xec, 0xe6, 0xda, 0x9b, 0x66, 0xe1, 0x47, 0x4d, 0x9f, 0xd3, 0x5e,
	0x0d, 0x6a, 0xda, 0x70, 0x50, 0x5b, 0xdc, 0x8f, 0xa8, 0x7f, 0xcb, 0x5c, 0x77, 0x7d, 0xcf, 0xf5,
	0x89, 0x89, 0x85, 0x0d, 0x74, 0x07, 0xf2, 0x51, 0x40, 0x9c, 0xaa, 0x2e, 0x6c, 0x55, 0xb3, 0xb6,
	0xa4, 0xbf, 0xdd, 0x80, 0x38, 0xcd, 0xa5, 0xe1, 0xa0, 0x36, 0x2f, 0x2d, 0x70, 0x79, 0x13, 0x0b,
	0x35, 0xe3, 0x65, 0x11, 0xe0, 0x5e, 0x48, 0xda, 0xc4, 0x67, 0xae, 0xed, 0xa1, 0xdb, 0x50, 0xec,
	0x13, 0xbf, 0x4d, 0x43, 0x81, 0x6d, 0xb1, 0x71, 0x25, 0x6b, 0x0f, 0x93, 0x88, 0xf6, 0x42, 0x87,
	0x48, 0xbb, 0xd6, 0x13, 0x21, 0x8a, 0x95, 0x0a, 0xba, 0x09, 0xf9, 0x23, 0xda, 0xa6, 0x0a, 0xca,
	0xd5, 0x49, 0x50, 0xac, 0xc4, 0x97, 0xf5, 0xa0, 0xb5, 0xd9, 0xc2, 0x42, 0x03, 0xdd, 0x86, 0x82,
	0x47, 0x1d, 0xdb, 0xab, 0xe6, 0x84, 0xea, 0xfb, 0xd3, 0x54, 0x77, 0xb8, 0x30, 0x96, 0x3a, 0x5c,
	0xb9, 0xeb, 0xfa, 0x2e, 0xad, 0xe6, 0xdf, 0x4d, 0xf9, 0x21, 0x17, 0xc6, 0x52, 0x07, 0x7d, 0x06,
	0x39, 0x1a, 0x45, 0xd5, 0x82, 0x50, 0xbd, 0x32, 0x4d, 0xb5, 0xb5, 0xbb, 0x8b, 0xb9, 0xbc, 0x71,
	0x0d, 0xf2, 0x1c, 0x3e, 0xba, 0x04, 0xf3, 0xbd, 0xc0, 0xa3, 0x76, 0xfb, 0x31, 0x3d, 0x22, 0xbe,
	0x48, 0x5a, 0x09, 0xa7, 0x8f, 0x8c, 0x8b, 0x50, 0x10, 0x68, 0xd1, 0x32, 0x14, 0x58, 0x4a, 0x48,
	0x6e, 0x8c, 0x97, 0x1a, 0x14, 0x04, 0x20, 0xf4, 0x21, 0x54, 0x82, 0x90, 0x44, 0x6e, 0xc7, 0x27,
	0xed, 0x47, 0x34, 0x62, 0x7b, 0x78, 0x47, 0x89, 0x9e, 0x38, 0x47, 0x2d, 0x98, 0x3b, 0xa0, 0x61,
	0x77, 0xd3, 0x66, 0x76, 0x55, 0xbf, 0x94, 0xbb, 0x36, 0xdf, 0xb8, 0xf1, 0x4e, 0x51, 0x5b, 0xdb,
	0x4a, 0x6b, 0xcb, 0x67, 0xe1, 0x31, 0x8e, 0x8d, 0x18, 0xb7, 0x61, 0x21, 0x73, 0x85, 0x2a, 0x90,
	0x3b, 0x22, 0xc7, 0x0a, 0x00, 0x5f, 0x72, 0xfc, 0x7d, 0xdb, 0xeb, 0x11, 0x51, 0xde, 0x12, 0x96,
	0x9b, 0x5b, 0xfa, 0x4d, 0xcd, 0xf8, 0x55, 0x83, 0x5c, 0x6b, 0x77, 0x17, 0x99, 0x50, 0x8e, 0x91,
	0x26, 0xe8, 0x33, 0x67, 0xe8, 0xe1, 0x09, 0xe4, 0x9f, 0xbc, 0x43, 0xd2, 0xff, 0x17, 0xdc, 0xe6,
	0x36, 0x94, 0x5a, 0x01, 0x09, 0x6d, 0xe6, 0x52, 0x1f, 0x95, 0xa0, 0xb0, 0xe7, 0x47, 0x84, 0x55,
	0x66, 0x10, 0x40, 0x71, 0x4f, 0x54, 0xb0, 0xa2, 0xa1, 0x32, 0xcc, 0x6d, 0xd2, 0x67, 0xbe, 0xd8,
	0xe9, 0x68, 0x0e, 0xf2, 0x3b, 0x6e, 0xc4, 0x2a, 0x39, 0x2e, 0xb3, 0x49, 0x3c, 0xc2, 0x48, 0x25,
	0x6f, 0x7c, 0x04, 0x85, 0x4d, 0x9b, 0xf5, 0xba, 0x13, 0x9c, 0x57, 0x20, 0xd7, 0x0b, 0x3d, 0xe5,
	0x9a, 0x2f, 0xcd, 0x3f, 0x34, 0x80, 0x64, 0x2c, 0xd1, 0x63, 0x28, 0x4a, 0x72, 0x53, 0x64, 0x70,
	0xe1, 0xb4, 0x81, 0x9b, 0x4a, 0x09, 0xca, 0x16, 0xaa, 0xc3, 0x1c, 0xf1, 0xdb, 0x01, 0x75, 0x7d,
	0x26, 0x7d, 0x37, 0xcf, 0x0e, 0x07, 0xb5, 0x25, 0x29, 0x3d, 0xba, 0x31, 0x71, 0x2c, 0xc4, 0x61,
	0x44, 0xc4, 0x09, 0x09, 0x53, 0x13, 0x58, 0x9b, 0x0c, 0x03, 0x93, 0x03, 0x12, 0x12, 0xdf, 0x21,
	0xcd, 0xd5, 0xe1, 0xa0, 0x76, 0x4e, 0xd1, 0x89, 0x50, 0x5c, 0xa7, 0x5d, 0x97, 0x09, 0x26, 0x34,
	0xb1, 0xb2, 0x65, 0xfe, 0xa9, 0xc1, 0x62, 0x36, 0x02, 0xf4, 0xf5, 0x3f, 0x20, 0x98, 0xe6, 0x99,
	0xe1, 0xa0, 0xb6, 0x20, 0x9d, 0x49, 0x65, 0x33, 0xe6, 0x9c, 0xeb, 0x50, 0xdc, 0xef, 0x39, 0x47,
	0x64, 0x14, 0x67, 0x4a, 0x54, 0x9e, 0x9b, 0x58, 0x09, 0xa0, 0x2b, 0x90, 0x0f, 0x6c, 0x76, 0x28,
	0x22, 0x2c, 0xa5, 0xf9, 0x90, 0x9f, 0x9a, 0x58, 0x5c, 0x9a, 0x9f, 0x43, 0x51, 0x3a, 0x45, 0xf3,
	0x30, 0xbb, 0xe7, 0x1f, 0xf9, 0xf4, 0x99, 0x5f, 0x99, 0xe1, 0x85, 0xe7, 0xf3, 0x5e, 0xd1, 0xd0,
	0xac, 0xe8, 0xf5, 0x8a, 0xce, 0x1b, 0x46, 0x0c, 0x76, 0x25, 0xc7, 0x97, 0x62, 0xbc, 0x2a, 0x79,
	0xf3, 0x85, 0x06, 0x0b, 0x12, 0xfc, 0x23, 0x9b, 0x1d, 0x62, 0x72, 0x80, 0x1e, 0x40, 0xae, 0x4f,
	0x3d, 0x55, 0xde, 0xa9, 0x79, 0xad, 0x0e, 0x07, 0xb5, 0x65, 0x15, 0x2a, 0xf5, 0xd2, 0x49, 0xe5,
	0x56, 0xd0, 0x86, 0x8a, 0x41, 0x06, 0x7b, 0x7e, 0x38, 0xa8, 0xbd, 0x97, 0xc4, 0x90, 0x96, 0x96,
	0xd1, 0xdc, 0x85, 0xa5, 0x7b, 0x21, 0xb1, 0x99, 0xca, 0x27, 0x26, 0x4f, 0xd1, 0xfa, 0x58, 0xc3,
	0x2d, 0x4f, 0x1a, 0xbf, 0x51, 0x23, 0x99, 0x21, 0x94, 0xef, 0x13, 0x96, 0x68, 0x23, 0xc8, 0xfb,
	0xb6, 0xd2, 0x2d, 0x61, 0xb1, 0x46, 0x55, 0x98, 0x75, 0xb8, 0x13, 0x1a, 0xaa, 0x3e, 0x1f, 0x6d,
	0xd1, 0xa7, 0xb1, 0xaf, 0xdc, 0xf4, 0xe6, 0x8e, 0x7d, 0xbe, 0xd0, 0x61, 0x91, 0x4f, 0x99, 0x3c,
	0x8e, 0xb8, 0xdb, 0x94, 0x0b, 0x2d, 0xeb, 0x22, 0x79, 0xb0, 0xf4, 0xbf, 0xff, 0x60, 0xad, 0xc4,
	0xcd, 0x23, 0x7a, 0x22, 0xee, 0x94, 0x1b, 0x30, 0x4b, 0x03, 0xce, 0x0a, 0xa3, 0x87, 0xe1, 0x7c,
	0xd6, 0x2a, 0x47, 0xd7, 0x92, 0x02, 0x78, 0x24, 0x89, 0xd6, 0xa1, 0x10, 0xd8, 0x1d, 0x12, 0x56,
	0x8b, 0x93, 0x5e, 0xf5, 0x47, 0xfc, 0x0a, 0x93, 0xa7, 0x58, 0x0a, 0xa1, 0x0f, 0x40, 0xa7, 0x81,
	0x78, 0xb1, 0x16, 0x1b, 0xe7, 0xb2, 0xa2, 0x31, 0x27, 0x61, 0x9d, 0x06, 0xa6, 0x3f, 0x96, 0x8c,
	0x08, 0x59, 0x30, 0x2b, 0x33, 0x15, 0x55, 0x35, 0xc1, 0xa0, 0x93, 0x4b, 0x38, 0x12, 0x4a, 0x80,
	0xe9, 0xa7, 0x00, 0x8b, 0x14, 0x30, 0xce, 0x4f, 0x2b, 0x71, 0xc9, 0x13, 0x16, 0xe6, 0x55, 0x58,
	0x4d, 0x17, 0xbf, 0x39, 0xfb, 0xa6, 0x99, 0x0f, 0xf5, 0x8a, 0xa6, 0xba, 0xe0, 0xf2, 0x58, 0x17,
	0x24, 0xf7, 0x71, 0xad, 0xee, 0x43, 0x89, 0x8e, 0x62, 0x13, 0x19, 0x5f, 0x6c, 0x5c, 0x9f, 0x4a,
	0xfe, 0x71, 0x32, 0x12, 0x5d, 0x74, 0x01, 0x4a, 0xb4, 0x4f, 0xc2, 0x67, 0xa1, 0xcb, 0x88, 0xc8,
	0xe1, 0x1c, 0x4e, 0x0e, 0x78, 0x55, 0x83, 0x90, 0x1c, 0xb8, 0xcf, 0x45, 0xf1, 0x4a, 0x58, 0xed,
	0x46, 0xec, 0x5c, 0x8c, 0xd9, 0xd9, 0x3c, 0x84, 0x85, 0xfb, 0x84, 0x6d, 0xbb, 0x1e, 0xd9, 0xc3,
	0x3b, 0x3c, 0xc2, 0xad, 0xb1, 0xe1, 0x98, 0x3a, 0xae, 0xe5, 0x34, 0x21, 0xc7, 0xf4, 0xab, 0x3c,
	0xe9, 0x89, 0xa7, 0xcb, 0x59, 0x4f, 0xd1, 0xe8, 0x61, 0xd0, 0x92, 0x87, 0xe1, 0x07, 0x0d, 0xce,
	0x24, 0x95, 0xe6, 0x2f, 0xda, 0x7f, 0x88, 0x28, 0xc9, 0x89, 0x9e, 0xc9, 0xc9, 0x32, 0x14, 0x3c,
	0xb7, 0xeb, 0xca, 0x01, 0x28, 0x60, 0xb9, 0x31, 0xbf, 0x81, 0x25, 0x4c, 0xba, 0xb4, 0x9f, 0xa2,
	0x8d, 0x7f, 0x59, 0xfb, 0xc6, 0xcf, 0xf9, 0x11, 0x2f, 0xee, 0x92, 0xb0, 0xef, 0x3a, 0x04, 0xdd,
	0x83, 0x72, 0x9a, 0x9b, 0xd0, 0xc5, 0x6c, 0x64, 0x63, 0xbc, 0x65, 0x4c, 0x6c, 0x72, 0x74, 0x07,
	0x4a, 0x71, 0xb3, 0x22, 0x23, 0x2b, 0x92, 0x26, 0xae, 0xb7, 0xa8, 0x7f, 0x09, 0xf3, 0xa9, 0xe1,
	0x42, 0x17, 0x4e, 0x8e, 0x79, 0x42, 0x42, 0xc6, 0x69, 0xb7, 0x11, 0xfa, 0x0e, 0xce, 0x4e, 0x18,
	0x1b, 0x74, 0xf5, 0x2d, 0x98, 0x32, 0x93, 0x65, 0xd4, 0xa6, 0x8c, 0x01, 0xda, 0x06, 0x48, 0xfa,
	0x07, 0xad, 0x9e, 0x30, 0x9a, 0xf4, 0xb0, 0x71, 0xca, 0x65, 0x84, 0x5a, 0x69, 0x36, 0xe1, 0x3d,
	0x86, 0x6a, 0x6f, 0x8b, 0x4a, 0x75, 0xa0, 0x61, 0x4c, 0xc4, 0x26, 0x3e, 0x78, 0x3e, 0xd6, 0xd0,
	0x16, 0x94, 0xd3, 0xad, 0x32, 0x5e, 0xc5, 0xb1, 0x36, 0x32, 0x56, 0x2c, 0xf9, 0xf3, 0x64, 0x8d,
	0x7e, 0x9e, 0xac, 0x2d, 0xfe, 0x5e, 0x35, 0xef, 0xfe, 0xf2, 0xfb, 0x9a, 0xf6, 0xd3, 0xeb, 0xb5,
	0x99, 0x57, 0xaf, 0xd7, 0x66, 0x7e, 0x7b, 0xbd, 0x36, 0xf3, 0x2d, 0xff, 0xaf, 0xb3, 0xa2, 0x5e,
	0x10, 0x92, 0xae, 0xeb, 0xb7, 0x2d, 0xd7, 0x3f, 0x10, 0xbf, 0x76, 0xed, 0x9e, 0xc3, 0xa2, 0xba,
	0xcd, 0x68, 0xb7, 0x3e, 0xfa, 0xb7, 0xab, 0xdb, 0x81, 0xbb, 0x5f, 0x14, 0xbb, 0x1b, 0x7f, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x5a, 0xb2, 0xf1, 0x96, 0x2b, 0x0e, 0x00, 0x00,
}

func (this *Volume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume)
	if !ok {
		that2, ok := that.(Volume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *Volume_Credential) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume_Credential)
	if !ok {
		that2, ok := that.(Volume_Credential)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vendor != that1.Vendor {
		return false
	}
	if !this.Kodo.Equal(that1.Kodo) {
		return false
	}
	if !this.Local.Equal(that1.Local) {
		return false
	}
	if !this.Minio.Equal(that1.Minio) {
		return false
	}
	if !this.Oss.Equal(that1.Oss) {
		return false
	}
	return true
}
func (this *Volume_Credential_KODO) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume_Credential_KODO)
	if !ok {
		that2, ok := that.(Volume_Credential_KODO)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UploadToken != that1.UploadToken {
		return false
	}
	return true
}
func (this *Volume_Credential_Local) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume_Credential_Local)
	if !ok {
		that2, ok := that.(Volume_Credential_Local)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *Volume_Credential_Minio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume_Credential_Minio)
	if !ok {
		that2, ok := that.(Volume_Credential_Minio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PresignedPostURL != that1.PresignedPostURL {
		return false
	}
	if len(this.FormData) != len(that1.FormData) {
		return false
	}
	for i := range this.FormData {
		if this.FormData[i] != that1.FormData[i] {
			return false
		}
	}
	return true
}
func (this *Volume_Credential_OSS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume_Credential_OSS)
	if !ok {
		that2, ok := that.(Volume_Credential_OSS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PresignedURL != that1.PresignedURL {
		return false
	}
	if len(this.FormData) != len(that1.FormData) {
		return false
	}
	for i := range this.FormData {
		if this.FormData[i] != that1.FormData[i] {
			return false
		}
	}
	return true
}
func (this *Volume_Datum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume_Datum)
	if !ok {
		that2, ok := that.(Volume_Datum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *VolumeSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolumeSpec)
	if !ok {
		that2, ok := that.(VolumeSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResourceVolume.Equal(that1.ResourceVolume) {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	return true
}
func (this *ResourceVolume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceVolume)
	if !ok {
		that2, ok := that.(ResourceVolume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vendor != that1.Vendor {
		return false
	}
	if this.Bucket != that1.Bucket {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *VolumePathRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VolumePathRef)
	if !ok {
		that2, ok := that.(VolumePathRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vol.Equal(that1.Vol) {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *CreateVolumeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateVolumeReq)
	if !ok {
		that2, ok := that.(CreateVolumeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Volume.Equal(that1.Volume) {
		return false
	}
	return true
}
func (this *GetVolumeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetVolumeReq)
	if !ok {
		that2, ok := that.(GetVolumeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if !this.Volume.Equal(that1.Volume) {
		return false
	}
	return true
}
func (this *ListVolumesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListVolumesReq)
	if !ok {
		that2, ok := that.(ListVolumesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.Vendor != that1.Vendor {
		return false
	}
	if this.Bucket != that1.Bucket {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	return true
}
func (this *ListVolumesRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListVolumesRes)
	if !ok {
		that2, ok := that.(ListVolumesRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return false
		}
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *GetVolumeCredentialReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetVolumeCredentialReq)
	if !ok {
		that2, ok := that.(GetVolumeCredentialReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.Operation != that1.Operation {
		return false
	}
	if this.Overwrite != that1.Overwrite {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *GetFileURLReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFileURLReq)
	if !ok {
		that2, ok := that.(GetFileURLReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResourceReference.Equal(that1.ResourceReference) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *GetFileURLRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetFileURLRes)
	if !ok {
		that2, ok := that.(GetFileURLRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *ListVolumeDataReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListVolumeDataReq)
	if !ok {
		that2, ok := that.(ListVolumeDataReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResourceReference.Equal(that1.ResourceReference) {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *RemoveVolumeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveVolumeReq)
	if !ok {
		that2, ok := that.(RemoveVolumeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeServiceClient interface {
	CreateVolume(ctx context.Context, in *CreateVolumeReq, opts ...grpc.CallOption) (*Volume, error)
	GetVolume(ctx context.Context, in *GetVolumeReq, opts ...grpc.CallOption) (*Volume, error)
	ListVolumes(ctx context.Context, in *ListVolumesReq, opts ...grpc.CallOption) (*ListVolumesRes, error)
	GetVolumeCredential(ctx context.Context, in *GetVolumeCredentialReq, opts ...grpc.CallOption) (*Volume_Credential, error)
	GetFileURL(ctx context.Context, in *GetFileURLReq, opts ...grpc.CallOption) (*GetFileURLRes, error)
	ListVolumeData(ctx context.Context, in *ListVolumeDataReq, opts ...grpc.CallOption) (VolumeService_ListVolumeDataClient, error)
	RemoveVolume(ctx context.Context, in *RemoveVolumeReq, opts ...grpc.CallOption) (*types.Empty, error)
}

type volumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewVolumeServiceClient(cc *grpc.ClientConn) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) CreateVolume(ctx context.Context, in *CreateVolumeReq, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/apiserver.v2.VolumeService/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) GetVolume(ctx context.Context, in *GetVolumeReq, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/apiserver.v2.VolumeService/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) ListVolumes(ctx context.Context, in *ListVolumesReq, opts ...grpc.CallOption) (*ListVolumesRes, error) {
	out := new(ListVolumesRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.VolumeService/ListVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) GetVolumeCredential(ctx context.Context, in *GetVolumeCredentialReq, opts ...grpc.CallOption) (*Volume_Credential, error) {
	out := new(Volume_Credential)
	err := c.cc.Invoke(ctx, "/apiserver.v2.VolumeService/GetVolumeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) GetFileURL(ctx context.Context, in *GetFileURLReq, opts ...grpc.CallOption) (*GetFileURLRes, error) {
	out := new(GetFileURLRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.VolumeService/GetFileURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) ListVolumeData(ctx context.Context, in *ListVolumeDataReq, opts ...grpc.CallOption) (VolumeService_ListVolumeDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[0], "/apiserver.v2.VolumeService/ListVolumeData", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceListVolumeDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeService_ListVolumeDataClient interface {
	Recv() (*Volume_Datum, error)
	grpc.ClientStream
}

type volumeServiceListVolumeDataClient struct {
	grpc.ClientStream
}

func (x *volumeServiceListVolumeDataClient) Recv() (*Volume_Datum, error) {
	m := new(Volume_Datum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) RemoveVolume(ctx context.Context, in *RemoveVolumeReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/apiserver.v2.VolumeService/RemoveVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServiceServer is the server API for VolumeService service.
type VolumeServiceServer interface {
	CreateVolume(context.Context, *CreateVolumeReq) (*Volume, error)
	GetVolume(context.Context, *GetVolumeReq) (*Volume, error)
	ListVolumes(context.Context, *ListVolumesReq) (*ListVolumesRes, error)
	GetVolumeCredential(context.Context, *GetVolumeCredentialReq) (*Volume_Credential, error)
	GetFileURL(context.Context, *GetFileURLReq) (*GetFileURLRes, error)
	ListVolumeData(*ListVolumeDataReq, VolumeService_ListVolumeDataServer) error
	RemoveVolume(context.Context, *RemoveVolumeReq) (*types.Empty, error)
}

// UnimplementedVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (*UnimplementedVolumeServiceServer) CreateVolume(ctx context.Context, req *CreateVolumeReq) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (*UnimplementedVolumeServiceServer) GetVolume(ctx context.Context, req *GetVolumeReq) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (*UnimplementedVolumeServiceServer) ListVolumes(ctx context.Context, req *ListVolumesReq) (*ListVolumesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (*UnimplementedVolumeServiceServer) GetVolumeCredential(ctx context.Context, req *GetVolumeCredentialReq) (*Volume_Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeCredential not implemented")
}
func (*UnimplementedVolumeServiceServer) GetFileURL(ctx context.Context, req *GetFileURLReq) (*GetFileURLRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileURL not implemented")
}
func (*UnimplementedVolumeServiceServer) ListVolumeData(req *ListVolumeDataReq, srv VolumeService_ListVolumeDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVolumeData not implemented")
}
func (*UnimplementedVolumeServiceServer) RemoveVolume(ctx context.Context, req *RemoveVolumeReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVolume not implemented")
}

func RegisterVolumeServiceServer(s *grpc.Server, srv VolumeServiceServer) {
	s.RegisterService(&_VolumeService_serviceDesc, srv)
}

func _VolumeService_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.VolumeService/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).CreateVolume(ctx, req.(*CreateVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.VolumeService/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).GetVolume(ctx, req.(*GetVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.VolumeService/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).ListVolumes(ctx, req.(*ListVolumesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_GetVolumeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).GetVolumeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.VolumeService/GetVolumeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).GetVolumeCredential(ctx, req.(*GetVolumeCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_GetFileURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).GetFileURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.VolumeService/GetFileURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).GetFileURL(ctx, req.(*GetFileURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_ListVolumeData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVolumeDataReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServiceServer).ListVolumeData(m, &volumeServiceListVolumeDataServer{stream})
}

type VolumeService_ListVolumeDataServer interface {
	Send(*Volume_Datum) error
	grpc.ServerStream
}

type volumeServiceListVolumeDataServer struct {
	grpc.ServerStream
}

func (x *volumeServiceListVolumeDataServer) Send(m *Volume_Datum) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeService_RemoveVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).RemoveVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.VolumeService/RemoveVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).RemoveVolume(ctx, req.(*RemoveVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.v2.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _VolumeService_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _VolumeService_GetVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _VolumeService_ListVolumes_Handler,
		},
		{
			MethodName: "GetVolumeCredential",
			Handler:    _VolumeService_GetVolumeCredential_Handler,
		},
		{
			MethodName: "GetFileURL",
			Handler:    _VolumeService_GetFileURL_Handler,
		},
		{
			MethodName: "RemoveVolume",
			Handler:    _VolumeService_RemoveVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVolumeData",
			Handler:       _VolumeService_ListVolumeData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "volume.proto",
}
