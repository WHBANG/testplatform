// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: volume.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _volume_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Volume) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for meta

	{
		tmp := m.GetSpec()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return VolumeValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}

// Validate checks the field values on VolumeSpec with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *VolumeSpec) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for volume

	// no validation rules for Endpoint

	{
		tmp := m.GetSecret()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return VolumeSpecValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// VolumeSpecValidationError is the validation error returned by
// VolumeSpec.Validate if the designated constraints aren't met.
type VolumeSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeSpecValidationError) ErrorName() string { return "VolumeSpecValidationError" }

// Error satisfies the builtin error interface
func (e VolumeSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeSpecValidationError{}

// Validate checks the field values on ResourceVolume with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceVolume) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Vendor

	// no validation rules for Bucket

	// no validation rules for Path

	return nil
}

// ResourceVolumeValidationError is the validation error returned by
// ResourceVolume.Validate if the designated constraints aren't met.
type ResourceVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceVolumeValidationError) ErrorName() string { return "ResourceVolumeValidationError" }

// Error satisfies the builtin error interface
func (e ResourceVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceVolumeValidationError{}

// Validate checks the field values on VolumePathRef with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VolumePathRef) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVol()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return VolumePathRefValidationError{
					field:  "Vol",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Path

	return nil
}

// VolumePathRefValidationError is the validation error returned by
// VolumePathRef.Validate if the designated constraints aren't met.
type VolumePathRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumePathRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumePathRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumePathRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumePathRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumePathRefValidationError) ErrorName() string { return "VolumePathRefValidationError" }

// Error satisfies the builtin error interface
func (e VolumePathRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumePathRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumePathRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumePathRefValidationError{}

// Validate checks the field values on CreateVolumeReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetVolume()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateVolumeReqValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateVolumeReqValidationError is the validation error returned by
// CreateVolumeReq.Validate if the designated constraints aren't met.
type CreateVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVolumeReqValidationError) ErrorName() string { return "CreateVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVolumeReqValidationError{}

// Validate checks the field values on GetVolumeReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Creator

	{
		tmp := m.GetVolume()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GetVolumeReqValidationError{
					field:  "Volume",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// GetVolumeReqValidationError is the validation error returned by
// GetVolumeReq.Validate if the designated constraints aren't met.
type GetVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVolumeReqValidationError) ErrorName() string { return "GetVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVolumeReqValidationError{}

// Validate checks the field values on ListVolumesReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListVolumesReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Creator

	// no validation rules for Vendor

	// no validation rules for Bucket

	{
		tmp := m.GetOptions()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListVolumesReqValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListVolumesReqValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Op

	return nil
}

// ListVolumesReqValidationError is the validation error returned by
// ListVolumesReq.Validate if the designated constraints aren't met.
type ListVolumesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVolumesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVolumesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVolumesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVolumesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVolumesReqValidationError) ErrorName() string { return "ListVolumesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListVolumesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVolumesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVolumesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVolumesReqValidationError{}

// Validate checks the field values on ListVolumesRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListVolumesRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListVolumesResValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetPager()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ListVolumesResValidationError{
					field:  "Pager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ListVolumesResValidationError is the validation error returned by
// ListVolumesRes.Validate if the designated constraints aren't met.
type ListVolumesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVolumesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVolumesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVolumesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVolumesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVolumesResValidationError) ErrorName() string { return "ListVolumesResValidationError" }

// Error satisfies the builtin error interface
func (e ListVolumesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVolumesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVolumesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVolumesResValidationError{}

// Validate checks the field values on GetVolumeCredentialReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVolumeCredentialReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return GetVolumeCredentialReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		return GetVolumeCredentialReqValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Operation

	// no validation rules for Overwrite

	// no validation rules for Prefix

	// no validation rules for Key

	return nil
}

// GetVolumeCredentialReqValidationError is the validation error returned by
// GetVolumeCredentialReq.Validate if the designated constraints aren't met.
type GetVolumeCredentialReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVolumeCredentialReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVolumeCredentialReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVolumeCredentialReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVolumeCredentialReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVolumeCredentialReqValidationError) ErrorName() string {
	return "GetVolumeCredentialReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetVolumeCredentialReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVolumeCredentialReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVolumeCredentialReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVolumeCredentialReqValidationError{}

// Validate checks the field values on GetFileURLReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetFileURLReq) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for volume

	// no validation rules for Key

	return nil
}

// GetFileURLReqValidationError is the validation error returned by
// GetFileURLReq.Validate if the designated constraints aren't met.
type GetFileURLReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileURLReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileURLReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileURLReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileURLReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileURLReqValidationError) ErrorName() string { return "GetFileURLReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFileURLReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileURLReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileURLReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileURLReqValidationError{}

// Validate checks the field values on GetFileURLRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetFileURLRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// GetFileURLResValidationError is the validation error returned by
// GetFileURLRes.Validate if the designated constraints aren't met.
type GetFileURLResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileURLResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileURLResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileURLResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileURLResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileURLResValidationError) ErrorName() string { return "GetFileURLResValidationError" }

// Error satisfies the builtin error interface
func (e GetFileURLResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileURLRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileURLResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileURLResValidationError{}

// Validate checks the field values on ListVolumeDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListVolumeDataReq) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for volume

	// no validation rules for Prefix

	// no validation rules for Limit

	return nil
}

// ListVolumeDataReqValidationError is the validation error returned by
// ListVolumeDataReq.Validate if the designated constraints aren't met.
type ListVolumeDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVolumeDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVolumeDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVolumeDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVolumeDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVolumeDataReqValidationError) ErrorName() string {
	return "ListVolumeDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListVolumeDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVolumeDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVolumeDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVolumeDataReqValidationError{}

// Validate checks the field values on RemoveVolumeReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RemoveVolumeReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		return RemoveVolumeReqValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RemoveVolumeReqValidationError is the validation error returned by
// RemoveVolumeReq.Validate if the designated constraints aren't met.
type RemoveVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveVolumeReqValidationError) ErrorName() string { return "RemoveVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveVolumeReqValidationError{}

// Validate checks the field values on Volume_Credential with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Volume_Credential) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Vendor

	{
		tmp := m.GetKodo()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Volume_CredentialValidationError{
					field:  "Kodo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetLocal()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Volume_CredentialValidationError{
					field:  "Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetMinio()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Volume_CredentialValidationError{
					field:  "Minio",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetOss()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Volume_CredentialValidationError{
					field:  "Oss",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Volume_CredentialValidationError is the validation error returned by
// Volume_Credential.Validate if the designated constraints aren't met.
type Volume_CredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Volume_CredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Volume_CredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Volume_CredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Volume_CredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Volume_CredentialValidationError) ErrorName() string {
	return "Volume_CredentialValidationError"
}

// Error satisfies the builtin error interface
func (e Volume_CredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume_Credential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Volume_CredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Volume_CredentialValidationError{}

// Validate checks the field values on Volume_Datum with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Volume_Datum) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Url

	return nil
}

// Volume_DatumValidationError is the validation error returned by
// Volume_Datum.Validate if the designated constraints aren't met.
type Volume_DatumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Volume_DatumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Volume_DatumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Volume_DatumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Volume_DatumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Volume_DatumValidationError) ErrorName() string { return "Volume_DatumValidationError" }

// Error satisfies the builtin error interface
func (e Volume_DatumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume_Datum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Volume_DatumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Volume_DatumValidationError{}

// Validate checks the field values on Volume_Credential_KODO with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Volume_Credential_KODO) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UploadToken

	return nil
}

// Volume_Credential_KODOValidationError is the validation error returned by
// Volume_Credential_KODO.Validate if the designated constraints aren't met.
type Volume_Credential_KODOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Volume_Credential_KODOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Volume_Credential_KODOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Volume_Credential_KODOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Volume_Credential_KODOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Volume_Credential_KODOValidationError) ErrorName() string {
	return "Volume_Credential_KODOValidationError"
}

// Error satisfies the builtin error interface
func (e Volume_Credential_KODOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume_Credential_KODO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Volume_Credential_KODOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Volume_Credential_KODOValidationError{}

// Validate checks the field values on Volume_Credential_Local with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Volume_Credential_Local) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// Volume_Credential_LocalValidationError is the validation error returned by
// Volume_Credential_Local.Validate if the designated constraints aren't met.
type Volume_Credential_LocalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Volume_Credential_LocalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Volume_Credential_LocalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Volume_Credential_LocalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Volume_Credential_LocalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Volume_Credential_LocalValidationError) ErrorName() string {
	return "Volume_Credential_LocalValidationError"
}

// Error satisfies the builtin error interface
func (e Volume_Credential_LocalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume_Credential_Local.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Volume_Credential_LocalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Volume_Credential_LocalValidationError{}

// Validate checks the field values on Volume_Credential_Minio with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Volume_Credential_Minio) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PresignedPostURL

	// no validation rules for FormData

	return nil
}

// Volume_Credential_MinioValidationError is the validation error returned by
// Volume_Credential_Minio.Validate if the designated constraints aren't met.
type Volume_Credential_MinioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Volume_Credential_MinioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Volume_Credential_MinioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Volume_Credential_MinioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Volume_Credential_MinioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Volume_Credential_MinioValidationError) ErrorName() string {
	return "Volume_Credential_MinioValidationError"
}

// Error satisfies the builtin error interface
func (e Volume_Credential_MinioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume_Credential_Minio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Volume_Credential_MinioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Volume_Credential_MinioValidationError{}

// Validate checks the field values on Volume_Credential_OSS with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Volume_Credential_OSS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PresignedURL

	// no validation rules for FormData

	return nil
}

// Volume_Credential_OSSValidationError is the validation error returned by
// Volume_Credential_OSS.Validate if the designated constraints aren't met.
type Volume_Credential_OSSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Volume_Credential_OSSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Volume_Credential_OSSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Volume_Credential_OSSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Volume_Credential_OSSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Volume_Credential_OSSValidationError) ErrorName() string {
	return "Volume_Credential_OSSValidationError"
}

// Error satisfies the builtin error interface
func (e Volume_Credential_OSSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume_Credential_OSS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Volume_Credential_OSSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Volume_Credential_OSSValidationError{}
