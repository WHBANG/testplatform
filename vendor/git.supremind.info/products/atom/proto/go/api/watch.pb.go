// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: watch.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IsWatchingRes struct {
	Watching bool `protobuf:"varint,1,opt,name=watching,proto3" json:"watching,omitempty"`
}

func (m *IsWatchingRes) Reset()         { *m = IsWatchingRes{} }
func (m *IsWatchingRes) String() string { return proto.CompactTextString(m) }
func (*IsWatchingRes) ProtoMessage()    {}
func (*IsWatchingRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c826da73fff4a2c7, []int{0}
}
func (m *IsWatchingRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsWatchingRes.Unmarshal(m, b)
}
func (m *IsWatchingRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsWatchingRes.Marshal(b, m, deterministic)
}
func (m *IsWatchingRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWatchingRes.Merge(m, src)
}
func (m *IsWatchingRes) XXX_Size() int {
	return xxx_messageInfo_IsWatchingRes.Size(m)
}
func (m *IsWatchingRes) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWatchingRes.DiscardUnknown(m)
}

var xxx_messageInfo_IsWatchingRes proto.InternalMessageInfo

func (m *IsWatchingRes) GetWatching() bool {
	if m != nil {
		return m.Watching
	}
	return false
}

type ListWatchingReq struct {
	Kind  ResourceKind `protobuf:"varint,1,opt,name=kind,proto3,enum=apiserver.v2.ResourceKind" json:"kind,omitempty"`
	Pager *PagerReq    `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListWatchingReq) Reset()         { *m = ListWatchingReq{} }
func (m *ListWatchingReq) String() string { return proto.CompactTextString(m) }
func (*ListWatchingReq) ProtoMessage()    {}
func (*ListWatchingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c826da73fff4a2c7, []int{1}
}
func (m *ListWatchingReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListWatchingReq.Unmarshal(m, b)
}
func (m *ListWatchingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListWatchingReq.Marshal(b, m, deterministic)
}
func (m *ListWatchingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWatchingReq.Merge(m, src)
}
func (m *ListWatchingReq) XXX_Size() int {
	return xxx_messageInfo_ListWatchingReq.Size(m)
}
func (m *ListWatchingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWatchingReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListWatchingReq proto.InternalMessageInfo

func (m *ListWatchingReq) GetKind() ResourceKind {
	if m != nil {
		return m.Kind
	}
	return ResourceKindUnknown
}

func (m *ListWatchingReq) GetPager() *PagerReq {
	if m != nil {
		return m.Pager
	}
	return nil
}

type ListWatchingRes struct {
	Resources []*ResourceReference `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	Pager     *PagerRes            `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
}

func (m *ListWatchingRes) Reset()         { *m = ListWatchingRes{} }
func (m *ListWatchingRes) String() string { return proto.CompactTextString(m) }
func (*ListWatchingRes) ProtoMessage()    {}
func (*ListWatchingRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c826da73fff4a2c7, []int{2}
}
func (m *ListWatchingRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListWatchingRes.Unmarshal(m, b)
}
func (m *ListWatchingRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListWatchingRes.Marshal(b, m, deterministic)
}
func (m *ListWatchingRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWatchingRes.Merge(m, src)
}
func (m *ListWatchingRes) XXX_Size() int {
	return xxx_messageInfo_ListWatchingRes.Size(m)
}
func (m *ListWatchingRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWatchingRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListWatchingRes proto.InternalMessageInfo

func (m *ListWatchingRes) GetResources() []*ResourceReference {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ListWatchingRes) GetPager() *PagerRes {
	if m != nil {
		return m.Pager
	}
	return nil
}

func init() {
	proto.RegisterType((*IsWatchingRes)(nil), "apiserver.v2.IsWatchingRes")
	proto.RegisterType((*ListWatchingReq)(nil), "apiserver.v2.ListWatchingReq")
	proto.RegisterType((*ListWatchingRes)(nil), "apiserver.v2.ListWatchingRes")
}

func init() { proto.RegisterFile("watch.proto", fileDescriptor_c826da73fff4a2c7) }

var fileDescriptor_c826da73fff4a2c7 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x41, 0x4b, 0xe3, 0x40,
	0x14, 0xc7, 0x9b, 0xee, 0x76, 0xb7, 0x3b, 0xed, 0xee, 0xc2, 0x1c, 0x4a, 0x49, 0x31, 0x96, 0x9e,
	0x0a, 0xea, 0x04, 0xe2, 0x59, 0x94, 0x82, 0x07, 0xb5, 0x07, 0x19, 0x11, 0xc1, 0x5b, 0x9a, 0xbc,
	0xa6, 0x83, 0x26, 0x93, 0xce, 0x4c, 0x5a, 0xbc, 0xf8, 0x19, 0xfc, 0x18, 0x9e, 0xfc, 0x2c, 0x1e,
	0x3d, 0xdb, 0x2f, 0x22, 0x99, 0xa4, 0xa6, 0x29, 0x62, 0x05, 0x6f, 0xef, 0xcf, 0xfb, 0xbd, 0xf7,
	0x1f, 0xe6, 0xff, 0x50, 0x63, 0xee, 0x2a, 0x6f, 0x42, 0x62, 0xc1, 0x15, 0xc7, 0x4d, 0x37, 0x66,
	0x12, 0xc4, 0x0c, 0x04, 0x99, 0x39, 0x66, 0x27, 0xe0, 0x3c, 0xb8, 0x05, 0x5b, 0xf7, 0x46, 0xc9,
	0xd8, 0x86, 0x30, 0x56, 0x77, 0x19, 0x6a, 0xee, 0x05, 0x4c, 0x4d, 0x92, 0x11, 0xf1, 0x78, 0x68,
	0x07, 0x3c, 0xe0, 0x05, 0x95, 0x2a, 0x2d, 0x74, 0x95, 0xe3, 0x28, 0x04, 0xe5, 0x66, 0x75, 0x6f,
	0x07, 0xfd, 0x3d, 0x91, 0x57, 0xa9, 0x2d, 0x8b, 0x02, 0x0a, 0x12, 0x9b, 0xa8, 0x3e, 0xcf, 0x65,
	0xdb, 0xe8, 0x1a, 0xfd, 0x3a, 0x7d, 0xd7, 0x3d, 0x8e, 0xfe, 0x0f, 0x99, 0x54, 0x05, 0x3e, 0xc5,
	0x04, 0xfd, 0xbc, 0x61, 0x91, 0xaf, 0xd1, 0x7f, 0x8e, 0x49, 0x56, 0x1f, 0x4d, 0x28, 0x48, 0x9e,
	0x08, 0x0f, 0xce, 0x58, 0xe4, 0x53, 0xcd, 0xe1, 0x5d, 0x54, 0x8b, 0xdd, 0x00, 0x44, 0xbb, 0xda,
	0x35, 0xfa, 0x0d, 0xa7, 0x55, 0x1e, 0x38, 0x4f, 0x5b, 0x14, 0xa6, 0x34, 0x83, 0x7a, 0xf7, 0xeb,
	0x86, 0x12, 0x1f, 0xa0, 0x3f, 0x22, 0x5f, 0x2b, 0xdb, 0x46, 0xf7, 0x47, 0xbf, 0xe1, 0x6c, 0x7f,
	0xec, 0x4a, 0x61, 0x0c, 0x02, 0x22, 0x0f, 0x68, 0x31, 0xf1, 0x35, 0x7f, 0x99, 0xfb, 0x3b, 0x4f,
	0x55, 0xd4, 0xd4, 0xe6, 0x17, 0x20, 0x66, 0xcc, 0x03, 0x7c, 0x84, 0x6a, 0x5a, 0xe3, 0x4d, 0x9e,
	0x66, 0x8b, 0x64, 0x89, 0x91, 0x65, 0x16, 0xe4, 0x38, 0x4d, 0x0c, 0x0f, 0xd0, 0xef, 0xcb, 0x68,
	0xfe, 0xbd, 0x1d, 0xa7, 0x08, 0x15, 0xa1, 0x6d, 0x5e, 0xd3, 0x29, 0x03, 0xe5, 0xbc, 0x87, 0xa8,
	0xb9, 0xfa, 0xc5, 0x78, 0xab, 0x0c, 0xaf, 0xe5, 0x6d, 0x7e, 0xda, 0x96, 0x83, 0xc3, 0xc7, 0x57,
	0xcb, 0x78, 0x58, 0x58, 0x95, 0xe7, 0x85, 0x55, 0x79, 0x59, 0x58, 0x95, 0xeb, 0xf4, 0x36, 0x89,
	0x4c, 0x62, 0x01, 0x21, 0x8b, 0x7c, 0xc2, 0xa2, 0xb1, 0x3e, 0x4f, 0x3f, 0xf1, 0x94, 0xb4, 0x5d,
	0xc5, 0x43, 0x7b, 0x79, 0x9f, 0xb6, 0x1b, 0xb3, 0xd1, 0x2f, 0xad, 0xf6, 0xdf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x2b, 0xde, 0xc1, 0x7e, 0x0b, 0x03, 0x00, 0x00,
}

func (this *IsWatchingRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsWatchingRes)
	if !ok {
		that2, ok := that.(IsWatchingRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Watching != that1.Watching {
		return false
	}
	return true
}
func (this *ListWatchingReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListWatchingReq)
	if !ok {
		that2, ok := that.(ListWatchingReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}
func (this *ListWatchingRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListWatchingRes)
	if !ok {
		that2, ok := that.(ListWatchingRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if !this.Resources[i].Equal(that1.Resources[i]) {
			return false
		}
	}
	if !this.Pager.Equal(that1.Pager) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WatchServiceClient is the client API for WatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchServiceClient interface {
	Watch(ctx context.Context, in *ResourceReference, opts ...grpc.CallOption) (*types.Empty, error)
	Unwatch(ctx context.Context, in *ResourceReference, opts ...grpc.CallOption) (*types.Empty, error)
	IsWatching(ctx context.Context, in *ResourceReference, opts ...grpc.CallOption) (*IsWatchingRes, error)
	ListWatching(ctx context.Context, in *ListWatchingReq, opts ...grpc.CallOption) (*ListWatchingRes, error)
}

type watchServiceClient struct {
	cc *grpc.ClientConn
}

func NewWatchServiceClient(cc *grpc.ClientConn) WatchServiceClient {
	return &watchServiceClient{cc}
}

func (c *watchServiceClient) Watch(ctx context.Context, in *ResourceReference, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/apiserver.v2.WatchService/Watch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) Unwatch(ctx context.Context, in *ResourceReference, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/apiserver.v2.WatchService/Unwatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) IsWatching(ctx context.Context, in *ResourceReference, opts ...grpc.CallOption) (*IsWatchingRes, error) {
	out := new(IsWatchingRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.WatchService/IsWatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) ListWatching(ctx context.Context, in *ListWatchingReq, opts ...grpc.CallOption) (*ListWatchingRes, error) {
	out := new(ListWatchingRes)
	err := c.cc.Invoke(ctx, "/apiserver.v2.WatchService/ListWatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServiceServer is the server API for WatchService service.
type WatchServiceServer interface {
	Watch(context.Context, *ResourceReference) (*types.Empty, error)
	Unwatch(context.Context, *ResourceReference) (*types.Empty, error)
	IsWatching(context.Context, *ResourceReference) (*IsWatchingRes, error)
	ListWatching(context.Context, *ListWatchingReq) (*ListWatchingRes, error)
}

// UnimplementedWatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWatchServiceServer struct {
}

func (*UnimplementedWatchServiceServer) Watch(ctx context.Context, req *ResourceReference) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (*UnimplementedWatchServiceServer) Unwatch(ctx context.Context, req *ResourceReference) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unwatch not implemented")
}
func (*UnimplementedWatchServiceServer) IsWatching(ctx context.Context, req *ResourceReference) (*IsWatchingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWatching not implemented")
}
func (*UnimplementedWatchServiceServer) ListWatching(ctx context.Context, req *ListWatchingReq) (*ListWatchingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatching not implemented")
}

func RegisterWatchServiceServer(s *grpc.Server, srv WatchServiceServer) {
	s.RegisterService(&_WatchService_serviceDesc, srv)
}

func _WatchService_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.WatchService/Watch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).Watch(ctx, req.(*ResourceReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_Unwatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).Unwatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.WatchService/Unwatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).Unwatch(ctx, req.(*ResourceReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_IsWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).IsWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.WatchService/IsWatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).IsWatching(ctx, req.(*ResourceReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_ListWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWatchingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).ListWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.v2.WatchService/ListWatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).ListWatching(ctx, req.(*ListWatchingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.v2.WatchService",
	HandlerType: (*WatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Watch",
			Handler:    _WatchService_Watch_Handler,
		},
		{
			MethodName: "Unwatch",
			Handler:    _WatchService_Unwatch_Handler,
		},
		{
			MethodName: "IsWatching",
			Handler:    _WatchService_IsWatching_Handler,
		},
		{
			MethodName: "ListWatching",
			Handler:    _WatchService_ListWatching_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watch.proto",
}
